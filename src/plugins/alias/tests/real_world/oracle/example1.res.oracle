[kernel] Parsing example1.c (with preprocessing)
[alias] analysing function: f1
[alias] analysing instruction: ty *tmp = x;
[alias] May-aliases after instruction  ty *tmp = x;  are  { x; tmp }
[alias] May-alias graph after instruction  ty *tmp = x;  is
  0:{ x; tmp } → 1:{  }
[alias] analysing instruction:
  idata = (double *)malloc((unsigned long)10 * sizeof(double));
[alias] May-aliases after instruction
  idata = (double *)malloc((unsigned long)10 * sizeof(double));  are
  { x; tmp }
[alias] May-alias graph after instruction
  idata = (double *)malloc((unsigned long)10 * sizeof(double));  is
  0:{ x; tmp } → 1:{  }   4:{ idata } → 5:{  }
[alias] analysing instruction: idata = tmp->t2[*(tmp->n2)];
[alias] May-aliases after instruction  idata = tmp->t2[*(tmp->n2)];  are
  { x; tmp }  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }
[alias] May-alias graph after instruction  idata = tmp->t2[*(tmp->n2)];  is
  0:{ x; tmp } → 1:{  }   1:{  } -t2→ 6:{  }   4:{ idata } → 5:{  }
  6:{  } → 4:{ idata }
[alias] analysing instruction: odata = tmp->t1[*(tmp->n1)];
[alias] May-aliases after instruction  odata = tmp->t1[*(tmp->n1)];  are
  { x; tmp }  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph after instruction  odata = tmp->t1[*(tmp->n1)];  is
  0:{ x; tmp } → 1:{  }   1:{  } -t2→ 6:{  }   1:{  } -t1→ 10:{  }
  4:{ idata } → 5:{  }   6:{  } → 4:{ idata }   8:{ odata } → 9:{  }
  10:{  } → 8:{ odata }
[alias] analysing instruction: idx = 0;
[alias] May-aliases after instruction  idx = 0;  are
  { x; tmp }  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph after instruction  idx = 0;  is
  0:{ x; tmp } → 1:{  }   1:{  } -t2→ 6:{  }   1:{  } -t1→ 10:{  }
  4:{ idata } → 5:{  }   6:{  } → 4:{ idata }   8:{ odata } → 9:{  }
  10:{  } → 8:{ odata }
[alias] analysing instruction: tmp_1 = sin(*(idata + idx));
[alias:undefined:fn] example1.c:45: Warning: function sin has no definition
[alias] May-aliases after instruction  tmp_1 = sin(*(idata + idx));  are
  { x; tmp }  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph after instruction  tmp_1 = sin(*(idata + idx));  is
  0:{ x; tmp } → 1:{  }   1:{  } -t2→ 6:{  }   1:{  } -t1→ 10:{  }
  4:{ idata } → 5:{  }   6:{  } → 4:{ idata }   8:{ odata } → 9:{  }
  10:{  } → 8:{ odata }
[alias] analysing instruction: *(odata + idx) = 0.5 * tmp_1;
[alias] May-aliases after instruction  *(odata + idx) = 0.5 * tmp_1;  are
  { x; tmp }  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph after instruction  *(odata + idx) = 0.5 * tmp_1;  is
  0:{ x; tmp } → 1:{  }   1:{  } -t2→ 6:{  }   1:{  } -t1→ 10:{  }
  4:{ idata } → 5:{  }   6:{  } → 4:{ idata }   8:{ odata } → 9:{  }
  10:{  } → 8:{ odata }
[alias] analysing instruction: idx ++;
[alias] May-aliases after instruction  idx ++;  are
  { x; tmp }  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph after instruction  idx ++;  is
  0:{ x; tmp } → 1:{  }   1:{  } -t2→ 6:{  }   1:{  } -t1→ 10:{  }
  4:{ idata } → 5:{  }   6:{  } → 4:{ idata }   8:{ odata } → 9:{  }
  10:{  } → 8:{ odata }
[alias] analysing instruction: swap(tmp->n1);
[alias] analysing function: swap
[alias] analysing instruction: *n = 0;
[alias] May-aliases after instruction  *n = 0;  are  <none>
[alias] May-alias graph after instruction  *n = 0;  is    <empty>
[alias] analysing instruction: (*n) ++;
[alias] May-aliases after instruction  (*n) ++;  are  <none>
[alias] May-alias graph after instruction  (*n) ++;  is    <empty>
[alias] May-aliases at the end of function swap: <none>
[alias] May-alias graph at the end of function swap:
  <empty>
[alias] Summary of function swap:
[alias] May-aliases after instruction  swap(tmp->n1);  are
  { x; tmp }  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph after instruction  swap(tmp->n1);  is
  0:{ x; tmp } → 1:{  }   1:{  } -t2→ 6:{  }   1:{  } -t1→ 10:{  }
  4:{ idata } → 5:{  }   6:{  } → 4:{ idata }   8:{ odata } → 9:{  }
  10:{  } → 8:{ odata }
[alias] analysing instruction: idata = tmp->t2[*(tmp->n2)];
[alias] May-aliases after instruction  idata = tmp->t2[*(tmp->n2)];  are
  { x; tmp }  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph after instruction  idata = tmp->t2[*(tmp->n2)];  is
  0:{ x; tmp } → 1:{  }   1:{  } -t2→ 6:{  }   1:{  } -t1→ 10:{  }
  4:{ idata } → 5:{  }   6:{  } → 4:{ idata }   8:{ odata } → 9:{  }
  10:{  } → 8:{ odata }
[alias] analysing instruction: odata = tmp->t1[*(tmp->n1)];
[alias] May-aliases after instruction  odata = tmp->t1[*(tmp->n1)];  are
  { x; tmp }  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph after instruction  odata = tmp->t1[*(tmp->n1)];  is
  0:{ x; tmp } → 1:{  }   1:{  } -t2→ 6:{  }   1:{  } -t1→ 10:{  }
  4:{ idata } → 5:{  }   6:{  } → 4:{ idata }   8:{ odata } → 9:{  }
  10:{  } → 8:{ odata }
[alias:no-return] example1.c:29: Warning: 
  function f1 does not return; analysis may be unsound
[alias] May-aliases at the end of function f1: <none>
[alias] May-alias graph at the end of function f1:
  <empty>
[alias] Summary of function f1:
  formals: x    returns: __retres    state: <none>
[alias] analysing function: f2
[alias] analysing instruction: ty *tmp = x;
[alias] May-aliases after instruction  ty *tmp = x;  are  { x; tmp }
[alias] May-alias graph after instruction  ty *tmp = x;  is
  14:{ x; tmp } → 15:{  }
[alias] analysing instruction:
  idata = (double *)malloc((unsigned long)10 * sizeof(double));
[alias] May-aliases after instruction
  idata = (double *)malloc((unsigned long)10 * sizeof(double));  are
  { x; tmp }
[alias] May-alias graph after instruction
  idata = (double *)malloc((unsigned long)10 * sizeof(double));  is
  14:{ x; tmp } → 15:{  }   18:{ idata } → 19:{  }
[alias] analysing instruction: idata = tmp->t1[*(tmp->n1)];
[alias] May-aliases after instruction  idata = tmp->t1[*(tmp->n1)];  are
  { x; tmp }  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }
[alias] May-alias graph after instruction  idata = tmp->t1[*(tmp->n1)];  is
  14:{ x; tmp } → 15:{  }   15:{  } -t1→ 20:{  }
  18:{ idata } → 19:{  }   20:{  } → 18:{ idata }
[alias] analysing instruction: odata = tmp->t2[*(tmp->n2)];
[alias] May-aliases after instruction  odata = tmp->t2[*(tmp->n2)];  are
  { x; tmp }  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; odata }
[alias] May-alias graph after instruction  odata = tmp->t2[*(tmp->n2)];  is
  14:{ x; tmp } → 15:{  }   15:{  } -t1→ 20:{  }   15:{  } -t2→ 24:{  }
  18:{ idata } → 19:{  }   20:{  } → 18:{ idata }
  22:{ odata } → 23:{  }   24:{  } → 22:{ odata }
[alias] analysing instruction: idx = 0;
[alias] May-aliases after instruction  idx = 0;  are
  { x; tmp }  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; odata }
[alias] May-alias graph after instruction  idx = 0;  is
  14:{ x; tmp } → 15:{  }   15:{  } -t1→ 20:{  }   15:{  } -t2→ 24:{  }
  18:{ idata } → 19:{  }   20:{  } → 18:{ idata }
  22:{ odata } → 23:{  }   24:{  } → 22:{ odata }
[alias] analysing instruction:
  *(odata + idx) = (double)3 * *(idata + idx) + (double)1;
[alias] May-aliases after instruction
  *(odata + idx) = (double)3 * *(idata + idx) + (double)1;  are
  { x; tmp }  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; odata }
[alias] May-alias graph after instruction
  *(odata + idx) = (double)3 * *(idata + idx) + (double)1;  is
  14:{ x; tmp } → 15:{  }   15:{  } -t1→ 20:{  }   15:{  } -t2→ 24:{  }
  18:{ idata } → 19:{  }   20:{  } → 18:{ idata }
  22:{ odata } → 23:{  }   24:{  } → 22:{ odata }
[alias] analysing instruction: idx ++;
[alias] May-aliases after instruction  idx ++;  are
  { x; tmp }  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; odata }
[alias] May-alias graph after instruction  idx ++;  is
  14:{ x; tmp } → 15:{  }   15:{  } -t1→ 20:{  }   15:{  } -t2→ 24:{  }
  18:{ idata } → 19:{  }   20:{  } → 18:{ idata }
  22:{ odata } → 23:{  }   24:{  } → 22:{ odata }
[alias] analysing instruction: swap(tmp->n2);
[alias] May-aliases after instruction  swap(tmp->n2);  are
  { x; tmp }  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; odata }
[alias] May-alias graph after instruction  swap(tmp->n2);  is
  14:{ x; tmp } → 15:{  }   15:{  } -t1→ 20:{  }   15:{  } -t2→ 24:{  }
  18:{ idata } → 19:{  }   20:{  } → 18:{ idata }
  22:{ odata } → 23:{  }   24:{  } → 22:{ odata }
[alias] analysing instruction: idata = tmp->t1[*(tmp->n1)];
[alias] May-aliases after instruction  idata = tmp->t1[*(tmp->n1)];  are
  { x; tmp }  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; odata }
[alias] May-alias graph after instruction  idata = tmp->t1[*(tmp->n1)];  is
  14:{ x; tmp } → 15:{  }   15:{  } -t1→ 20:{  }   15:{  } -t2→ 24:{  }
  18:{ idata } → 19:{  }   20:{  } → 18:{ idata }
  22:{ odata } → 23:{  }   24:{  } → 22:{ odata }
[alias] analysing instruction: odata = tmp->t2[*(tmp->n2)];
[alias] May-aliases after instruction  odata = tmp->t2[*(tmp->n2)];  are
  { x; tmp }  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; odata }
[alias] May-alias graph after instruction  odata = tmp->t2[*(tmp->n2)];  is
  14:{ x; tmp } → 15:{  }   15:{  } -t1→ 20:{  }   15:{  } -t2→ 24:{  }
  18:{ idata } → 19:{  }   20:{  } → 18:{ idata }
  22:{ odata } → 23:{  }   24:{  } → 22:{ odata }
[alias:no-return] example1.c:53: Warning: 
  function f2 does not return; analysis may be unsound
[alias] May-aliases at the end of function f2: <none>
[alias] May-alias graph at the end of function f2:
  <empty>
[alias] Summary of function f2:
  formals: x    returns: __retres    state: <none>
[alias] analysing function: main
[alias] analysing instruction: a = (ty *)malloc(sizeof(ty));
[alias] May-aliases after instruction  a = (ty *)malloc(sizeof(ty));  are  <none>
[alias] May-alias graph after instruction  a = (ty *)malloc(sizeof(ty));  is
  28:{ a } → 29:{  }
[alias] analysing instruction: b = (ty *)malloc(sizeof(ty));
[alias] May-aliases after instruction  b = (ty *)malloc(sizeof(ty));  are  <none>
[alias] May-alias graph after instruction  b = (ty *)malloc(sizeof(ty));  is
  28:{ a } → 29:{  }   30:{ b } → 31:{  }
[alias] analysing instruction: i = 0;
[alias] May-aliases after instruction  i = 0;  are  <none>
[alias] May-alias graph after instruction  i = 0;  is
  28:{ a } → 29:{  }   30:{ b } → 31:{  }
[alias] analysing instruction:
  a->t1[i] = (double *)malloc((unsigned long)10 * sizeof(double));
[alias] May-aliases after instruction
  a->t1[i] = (double *)malloc((unsigned long)10 * sizeof(double));  are  
  <none>
[alias] May-alias graph after instruction
  a->t1[i] = (double *)malloc((unsigned long)10 * sizeof(double));  is
  28:{ a } → 29:{  }   29:{  } -t1→ 32:{  }   30:{ b } → 31:{  }
  32:{  } → 33:{  }   33:{  } → 34:{  }
[alias] analysing instruction:
  a->t2[i] = (double *)malloc((unsigned long)10 * sizeof(double));
[alias] May-aliases after instruction
  a->t2[i] = (double *)malloc((unsigned long)10 * sizeof(double));  are  
  <none>
[alias] May-alias graph after instruction
  a->t2[i] = (double *)malloc((unsigned long)10 * sizeof(double));  is
  28:{ a } → 29:{  }   29:{  } -t1→ 32:{  }   29:{  } -t2→ 35:{  }
  30:{ b } → 31:{  }   32:{  } → 33:{  }   33:{  } → 34:{  }
  35:{  } → 36:{  }   36:{  } → 37:{  }
[alias] analysing instruction: i ++;
[alias] May-aliases after instruction  i ++;  are  <none>
[alias] May-alias graph after instruction  i ++;  is
  28:{ a } → 29:{  }   29:{  } -t1→ 32:{  }   29:{  } -t2→ 35:{  }
  30:{ b } → 31:{  }   32:{  } → 33:{  }   33:{  } → 34:{  }
  35:{  } → 36:{  }   36:{  } → 37:{  }
[alias] analysing instruction: a->n1 = (int *)malloc(sizeof(int));
[alias] May-aliases after instruction  a->n1 = (int *)malloc(sizeof(int));  are
  <none>
[alias] May-alias graph after instruction  a->n1 = (int *)malloc(sizeof(int));  is
  28:{ a } → 29:{  }   29:{  } -n1→ 38:{  }   30:{ b } → 31:{  }
  38:{  } → 39:{  }
[alias] analysing instruction: a->n2 = (int *)malloc(sizeof(int));
[alias] May-aliases after instruction  a->n2 = (int *)malloc(sizeof(int));  are
  <none>
[alias] May-alias graph after instruction  a->n2 = (int *)malloc(sizeof(int));  is
  28:{ a } → 29:{  }   29:{  } -n1→ 38:{  }   29:{  } -n2→ 40:{  }
  30:{ b } → 31:{  }   38:{  } → 39:{  }   40:{  } → 41:{  }
[alias] analysing instruction: *(a->n1) = 1;
[alias] May-aliases after instruction  *(a->n1) = 1;  are  <none>
[alias] May-alias graph after instruction  *(a->n1) = 1;  is
  28:{ a } → 29:{  }   29:{  } -n1→ 38:{  }   29:{  } -n2→ 40:{  }
  30:{ b } → 31:{  }   38:{  } → 39:{  }   40:{  } → 41:{  }
[alias] analysing instruction: *(a->n2) = 1;
[alias] May-aliases after instruction  *(a->n2) = 1;  are  <none>
[alias] May-alias graph after instruction  *(a->n2) = 1;  is
  28:{ a } → 29:{  }   29:{  } -n1→ 38:{  }   29:{  } -n2→ 40:{  }
  30:{ b } → 31:{  }   38:{  } → 39:{  }   40:{  } → 41:{  }
[alias] analysing instruction: i = 0;
[alias] May-aliases after instruction  i = 0;  are  <none>
[alias] May-alias graph after instruction  i = 0;  is
  28:{ a } → 29:{  }   29:{  } -n1→ 38:{  }   29:{  } -n2→ 40:{  }
  30:{ b } → 31:{  }   38:{  } → 39:{  }   40:{  } → 41:{  }
[alias] analysing instruction: b->t1[i] = a->t1[i];
[alias] May-aliases after instruction  b->t1[i] = a->t1[i];  are  { a->t1; b->t1 }
[alias] May-alias graph after instruction  b->t1[i] = a->t1[i];  is
  28:{ a } → 29:{  }   29:{  } -n1→ 38:{  }   29:{  } -n2→ 40:{  }
  29:{  } -t1→ 44:{  }   30:{ b } → 31:{  }   31:{  } -t1→ 42:{  }
  38:{  } → 39:{  }   40:{  } → 41:{  }   42:{  } → 43:{  }
  44:{  } → 43:{  }
[alias] analysing instruction: b->t2[i] = a->t2[i];
[alias] May-aliases after instruction  b->t2[i] = a->t2[i];  are
  { a->t1; b->t1 }  { a->t2; b->t2 }
[alias] May-alias graph after instruction  b->t2[i] = a->t2[i];  is
  28:{ a } → 29:{  }   29:{  } -n1→ 38:{  }   29:{  } -n2→ 40:{  }
  29:{  } -t1→ 44:{  }   29:{  } -t2→ 48:{  }   30:{ b } → 31:{  }
  31:{  } -t1→ 42:{  }   31:{  } -t2→ 46:{  }   38:{  } → 39:{  }
  40:{  } → 41:{  }   42:{  } → 43:{  }   44:{  } → 43:{  }
  46:{  } → 47:{  }   48:{  } → 47:{  }
[alias] analysing instruction: i ++;
[alias] May-aliases after instruction  i ++;  are  { a->t1; b->t1 }  { a->t2; b->t2 }
[alias] May-alias graph after instruction  i ++;  is
  28:{ a } → 29:{  }   29:{  } -n1→ 38:{  }   29:{  } -n2→ 40:{  }
  29:{  } -t1→ 44:{  }   29:{  } -t2→ 48:{  }   30:{ b } → 31:{  }
  31:{  } -t1→ 42:{  }   31:{  } -t2→ 46:{  }   38:{  } → 39:{  }
  40:{  } → 41:{  }   42:{  } → 43:{  }   44:{  } → 43:{  }
  46:{  } → 47:{  }   48:{  } → 47:{  }
[alias] analysing instruction: b->n1 = a->n1;
[alias] May-aliases after instruction  b->n1 = a->n1;  are  { a->n1; b->n1 }
[alias] May-alias graph after instruction  b->n1 = a->n1;  is
  28:{ a } → 29:{  }   29:{  } -n2→ 40:{  }   29:{  } -n1→ 50:{  }
  30:{ b } → 31:{  }   31:{  } -n1→ 50:{  }   40:{  } → 41:{  }
  50:{  } → 39:{  }
[alias] analysing instruction: b->n2 = a->n2;
[alias] May-aliases after instruction  b->n2 = a->n2;  are
  { a->n1; b->n1 }  { a->n2; b->n2 }
[alias] May-alias graph after instruction  b->n2 = a->n2;  is
  28:{ a } → 29:{  }   29:{  } -n1→ 50:{  }   29:{  } -n2→ 51:{  }
  30:{ b } → 31:{  }   31:{  } -n1→ 50:{  }   31:{  } -n2→ 51:{  }
  50:{  } → 39:{  }   51:{  } → 41:{  }
[alias] analysing instruction: f1(a);
[alias] May-aliases after instruction  f1(a);  are
  { a->n1; b->n1 }  { a->n2; b->n2 }
[alias] May-alias graph after instruction  f1(a);  is
  28:{ a } → 29:{  }   29:{  } -n1→ 50:{  }   29:{  } -n2→ 51:{  }
  30:{ b } → 31:{  }   31:{  } -n1→ 50:{  }   31:{  } -n2→ 51:{  }
  50:{  } → 39:{  }   51:{  } → 41:{  }
[alias] analysing instruction: f2(b);
[alias] May-aliases after instruction  f2(b);  are
  { a->n1; b->n1 }  { a->n2; b->n2 }
[alias] May-alias graph after instruction  f2(b);  is
  28:{ a } → 29:{  }   29:{  } -n1→ 50:{  }   29:{  } -n2→ 51:{  }
  30:{ b } → 31:{  }   31:{  } -n1→ 50:{  }   31:{  } -n2→ 51:{  }
  50:{  } → 39:{  }   51:{  } → 41:{  }
[alias] analysing instruction: __retres = 0;
[alias] May-aliases after instruction  __retres = 0;  are
  { a->n1; b->n1 }  { a->n2; b->n2 }
[alias] May-alias graph after instruction  __retres = 0;  is
  28:{ a } → 29:{  }   29:{  } -n1→ 50:{  }   29:{  } -n2→ 51:{  }
  30:{ b } → 31:{  }   31:{  } -n1→ 50:{  }   31:{  } -n2→ 51:{  }
  50:{  } → 39:{  }   51:{  } → 41:{  }
[alias] May-aliases at the end of function main: { a->n1; b->n1 }  { a->n2; b->n2 }
[alias] May-alias graph at the end of function main:
  28:{ a } → 29:{  }   29:{  } -n1→ 50:{  }   29:{  } -n2→ 51:{  }
  30:{ b } → 31:{  }   31:{  } -n1→ 50:{  }   31:{  } -n2→ 51:{  }
  50:{  } → 39:{  }   51:{  } → 41:{  }
[alias] Summary of function main:
  formals:     returns: __retres    state: { a->n1; b->n1 }  { a->n2; b->n2 }
[alias] analysing function: swap
[alias] May-aliases at the end of function swap: <none>
[alias] May-alias graph at the end of function swap:
  <empty>
[alias] Summary of function swap:
[alias] Analysis complete
