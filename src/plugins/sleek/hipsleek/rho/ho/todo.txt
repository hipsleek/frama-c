# msg2.slk why is %P not printed in residue?

checkentail c::MSG{x::cell<v> & v>0}<> * x::cell<3>
    |- c::MSG{%P}<> .
print residue.


 Entail 2: Valid. 

 <1>x::cell<flted_21_22>&flted_21_22=3&{FLOW,(21,22)=__norm}[]
[[ COND ==>  Match ==> ]
===================================================================
# msg3-d1.ss --dis-imm

--dis-imm not working properly as hole still present..

Successful States:
[
 Label: []
 State:Hole[1242]&v_int_40_1241=1 & c_39'!=Cnull & c_39'!=Cnull&{FLOW,(24,25)=__norm}[]
===================================================================
# msg3.ss 

  receive(ch,ccc);
  dprint;
}

substitution of HVar(P) have not
beeb applied in post-condition.

Successful States:
[
 Label: []
 State:ch_38'::MSG{ (exists flted_19_42: v_1242::cell<flted_19_42>&flted_19_42=1&
{FLOW,(24,25)=__norm})[]}<v_1242> * (HVar P)&v_int_40_1243=1 & v_int_40_1243=1 & v_1246!=Cnull & v_1246!=Cnull & ccc_39'=v_1246 & a!=Cnull&{FLOW,(24,25)=__norm}[]
       es_heap: emp
       es_var_measures 2: MayLoop[]
       es_cond_path: [0]

===================================================================
# msg-d2.ss

!!! Khanh : need to perform ho_var subs here
!!! residue(subs_ho): List of Failesc Context: [FEC(0, 0, 1  [])]

Successful States:
[
 Label: []
 State:(exists d_1244: ch_38'::MSG{ (exists flted_19_42: v_1241::cell<flted_19_4
2>&flted_19_42=1&
{FLOW,(24,25)=__norm})[]}<v_1241> * c_39'::cell<v_int_39_1242> * (HVar PPP)&v_in
t_39_1242=1 & d_40'=d_1244 & d_1244!=Cnull&{FLOW,(24,25)=__norm})[]
       es_heap: emp
       es_ho_vars_map: [PPP(exists flted_19_42: v_1241::cell<flted_19_42>&
                        d_40'=v_1241 & flted_19_42=1&
                        {FLOW,(24,25)=__norm})[]]
       es_var_measures 2: MayLoop[]
       es_cond_path: [0]
===================================================================
# msg4.ss

n_1300 should be existentially quantified..

Instead of:
  (exists v,n: res::MSG{v::cell<n> & n>x}<v>

We need quantification within the CAP 
  res::MSG[v,n]{v::cell<n> & n>x}<v>

===================================================================
# lemma-propo0.slk

check_normalize x::WAIT<S> * c1::CNT<1> & S={}.

(exists c1_47,x_48,S1_58: x_48::WAIT{}<S1_58> * c1::CNT{}<flted_10_39>&
S1_58=union(S_50,{a_49}) & c1=c1_47 & x=x_48 & flted_10_39=1 & S={}&
{FLOW,(21,22)=__norm})[]

# a_69 should be bound to flted_10_39

//synchronization lemma
lemma_prop "wait-for" c1::CNT<a>@L * x::WAIT<S> & a notin S ->  
x::WAIT<S1> & S1=union(S,{a}).

===================================================================
# lemma-prop2.slk

lemma_prop "wait-for" c1::CNT<a> * c2::CNT<b> * x::WAIT<S> 
  & a>0 & b<0 & v notin S & v=tup2(c1,c2)
 ->  c1::CNT<a> * c2::CNT<b> * x::WAIT<S1> & S1=union(S,{tup2(c1,c2)}) & a>0 & b<0.

check_normalize x::WAIT<S> * c1::CNT<1> * c2::CNT<(-1)> & S={}.
//output one state

 wrong to have false here!

 CheckNorm (1) :  hfalse&false&{FLOW,(21,22)=__norm}[]
*/
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
===================================================================
