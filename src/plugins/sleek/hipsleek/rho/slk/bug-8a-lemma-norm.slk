//CountDownLatch
data cell{ int v; }.

pred_prim CNT<n:int>.

//synchronization lemma
lemma_prop "wait-for" ddd::CNT<aaa> * ddd::CNT<bbb> & bbb=(-1)  ->  ddd::CNT<bbb>.

//check_normalize c2::CNT<1> * c2::CNT<(-1)> .

//check_normalize c1::CNT<1> * c2::CNT<(-1)> .

check_normalize  c2::CNT<(-1)> * c1::CNT<1> * x::cell<n> & n > 0.

check_normalize  c1::CNT<(-1)> * c1::CNT<1> * x::cell<n> & n > 0.

check_normalize  c1::CNT<(-1)> * c2::CNT<1> * x::cell<n> & c1=c2 & n > 0.

/*
checkentail c1::CNT<flted_15_34> * c1::CNT<flted_15_33> * x::cell<n> &
flted_15_34+1=0 & flted_15_33=1 & 0<n & c1=ddd_46 & flted_15_34=aaa_45 & 
c1=ddd_46 & flted_15_33=bbb_47 |- ddd_46::CNT{}<aaa_45> * ddd_46::CNT{}<bbb_47>&bbb_47+1=0.
*/

// should not normalize since c1/c2 maybe distinct!

/*
# bug-8a

Two methods used by check_normalize .. in sleek

prop_formula_w_coers#1@2@1
prop_formula_w_coers#1 inp1 : c2::CNT{}<flted_11_33> * c1::CNT{}<flted_11_32>&flted_11_33+1=0 & 
flted_11_32=1&{FLOW,(4,5)=__norm#E}[]
prop_formula_w_coers#1 inp2 :Lemma "wait-for":  ddd::CNT{}<aaa> * ddd::CNT{}<bbb>&bbb+1=0&{FLOW,(4,5)=__norm#E}[]==> ddd::CNT{}<bbb>&{FLOW,(4,5)=__norm#E}[]
 head match:
 body view:
 coercion_univ_vars: []
 materialized vars:  []
 coercion_case: Complex
 head_norm:  (exists bbb_23,aaa: ddd::CNT{}<aaa> * ddd::CNT{}<bbb_23>&bbb+1=0 & 
bbb_23=bbb&{FLOW,(4,5)=__norm#E})[]
 body_norm:  EBase (exists bbb_19: ddd::CNT{}<bbb_19>&bbb_19=bbb&{FLOW,(4,5)=__norm#E})[]
 coercion_univ_vars: []
 coercion_case: Complex
 coercion_origin: user-given
 coercion_kind: LEM_PROP

prop_formula_w_coers#1@2 EXIT: c2::CNT{}<bbb_43>&flted_11_33=aaa_41 & c1=c2 & flted_11_32=bbb_43 & 
flted_11_33+1=0 & flted_11_32=1&{FLOW,(4,5)=__norm#E}[]

CheckNorm (1) :  c2::CNT{}<bbb_43>&flted_11_33=aaa_41 & c1=c2 & flted_11_32=bbb_43 & 
flted_11_33+1=0 & flted_11_32=1&{FLOW,(4,5)=__norm#E}[]


process_check_norm@1
process_check_norm inp1 :IFORM:(emp ; (emp ; ((c2::CNT{}<0-1>@M[HeapNode1]) * (c1::CNT{}<1>@M[HeapNode1]))))*(true)( FLOW __norm)
process_check_norm@1 EXIT:?


*/
