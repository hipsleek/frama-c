# bug-3-ho-vars.slk (DONE)

 checkentail_exact x::cell<1>*y::cell<2> |- x::cell<3>*%P.

 why did this succeed? Did we forget to prove pure at the end?

 ho_vars: [P --> y::cell<flted_7_28>&flted_7_28=2 & flted_7_29=1&
           {FLOW,(4,5)=__norm#E}[]]
=================================================================
# bug-3a-ho-vars.slk (debatable issue) (DONE)

Residue:
 <1>emp&flted_4_15=2 & flted_4_16=1 & Anon_11=flted_4_16&{FLOW,(4,5)=__norm#E}[]
 ho_vars: [P --> y::cell<flted_4_15>&flted_4_15=2 & flted_4_16=1 & 
           Anon_11=flted_4_16&{FLOW,(4,5)=__norm#E}[]]

For instantiation, I think we should pick mainly heap + related pure?
Otherwise, I think we may pick up too much info?
=================================================================
# bug-3b

checkentail_exact x::cell<1>*y::cell<2> |- z::cell<3>*%P.

Entail 1: Fail.(may) cause:do_unmatched_rhs : HVar P

# Why did we not get a better error message on unmatched z::cell<3>?

Residue:
 <1>x::cell<flted_3_15> * y::cell<flted_3_14>&flted_3_14=2 & flted_3_15=1&{FLOW,(4,8)=__MayError#E}[]
[[ COND ==>  COND ==>  UnmatchedRHSData ==> ]]

>> The process_action on 
   COND =>[Prio:2COND =>[Prio:2UnmatchedRHSData =>  z::cell<flted_10_51>];
           Prio:2COND =>[Prio:2UnmatchedRHSData =>  HVar P]]
   always keeps the last result.

=================================================================
# bug-4 (DONE)

checkentail_exact x::cell<_> * %P |- %P * %Q.

# should succeed with %Q --> x::cell<_>

Residue:
 <1>x::cell<Anon_12> * (HVar P)&{FLOW,(4,8)=__MayError#E}[]
[[ COND ==>  COND ==>  UnmatchedRHSData ==> ]]

checkentail_exact  %P |- %P .

# should succeed with matching here..

Entail 2: Fail.(may) cause:do_unmatched_rhs : HVar P

Residue:
 <1>HVar P&{FLOW,(4,8)=__MayError#E}[]
[[ COND ==>  UnmatchedRHSData ==> ]]
=================================================================
# bug-4a (DONE)

checkentail_exact  y::cell<_> * x::cell<3+2> |- %Q * x::cell<_> & x!=null.
print residue.

We may need to keep xpure of extracted term, e.g. y!=null, 
into residue of main expr.

Entail 1: Fail.(may) cause: true |-  y!=null. LOCS:[0;4] (may-bug)

Residue:
 <1>emp&flted_4_15=2+3 & Anon_12=flted_4_15&{FLOW,(4,8)=__MayError#E}[]
 ho_vars: [Q --> y::cell<Anon_11>&{FLOW,(4,5)=__norm#E}[]]
[[ SEARCH ==>  Match(x,x) ==>  COND ==>  UnmatchedRHSData ==> ]]

=================================================================
# bug-6

checkentail c::LatchOut{+ x::cell<n> * y::cell<m>}<> 
    |- c::LatchOut{+ x::cell<n> * %P}<>.

Why isn't SPLIT happening automatically?

Residue:
 <1>emp&{FLOW,(4,5)=__norm#E}[]
 ho_vars: [P --> x::cell<n> * y::cell<m>&{FLOW,(4,5)=__norm#E}[]]
[[ COND ==>  Match(c,c) ==> ]]
=================================================================
# bug-6a

Contravariant checking is absent. Why?

checkentail c::LatchIn{- x::cell<n> & n>3}<> 
    |- c::LatchIn{- x::cell<n> & n>0}<>.
// should be invalid

Entail 1: Valid. 
Residue:
 <1>emp&{FLOW,(4,5)=__norm#E}[]
[[ COND ==>  Match(c,c) ==> ]]
# should fail..

checkentail c::LatchIn{- x::cell<n> & n>3}<> 
    |- c::LatchIn{- x::cell<n> & n>6}<>.
// should be valid

Entail 2: Fail.(must) cause:105matching of ho_args failed
Residue:
 <1>x::cell<n>&3<n&{FLOW,(4,5)=__norm#E}[]

# why is there a positive residue?
=================================================================
# bug-4a (DONE)

checkentail_exact  y::cell<_> * x::cell<3+2> |- %Q * x::cell<_> & y!=null.
print residue.

# residue y=1 is dangerous. Could you use xpure_symbolic which
  will add y!=null instead.

Residue:
 <1>emp&flted_4_17=2+3 & Anon_12=flted_4_17 & y=1&{FLOW,(4,5)=__norm#E}[]
 ho_vars: [Q --> y::cell<Anon_11>&{FLOW,(4,5)=__norm#E}[]]
[[ SEARCH ==>  Match(x,x) ==>  COND ==>  UnmatchedRHSData ==> ]]

=================================================================
# bug-6b1  (OK)

Why isn't binding in the residue?
What about name clashes?

!!! old ho_vars_mao:[]
!!! new ho_var to added:(PPP, x::cell<n> * y::cell<m>&{FLOW,(4,5)=__norm#E}[])

checkentail c::LatchOut{+ x::cell<n> * y::cell<m>}<> 
            |- c::LatchOut{+%PPP}<>.

Entail 1: Valid. 

Residue:
 <1>emp&{FLOW,(4,5)=__norm#E}[]
[[ COND ==>  Match(c,c) ==> ]]
=================================================================
# bug-6b2 (OK)

!!! old ho_vars_mao:[]
!!! new ho_var to added:(PPP, x::cell<n> * y::cell<m>&{FLOW,(4,5)=__norm#E}[])

checkentail c::LatchOut{+ x::cell<n> * y::cell<m>}<> * %PPP
            |- c::LatchOut{+ %PPP}<>.

Why isn't instantiated PPP substituted?

Entail 1: Valid. 

Residue:
 <1>HVar PPP&{FLOW,(4,5)=__norm#E}[]
[[ COND ==>  Match(c,c) ==> ]]
=================================================================
# bug-6e3 --esl (LatchIN)

- should be contravariant but is presently co-variant

checkentail c::LatchIn{- x::cell<n> * y::cell<m> & n>3}<>
            |- c::LatchIn{- x::cell<n> & n>0}<>.

Entail 1: Valid. 
// should fail

Residue:
 <1>c::LatchIn{ - y::cell<m>&{FLOW,(4,5)=__norm#E}[]}<>&{FLOW,(4,5)=__norm#E}[]
[[ COND ==>  Match(c,c) ==> ]]


checkentail c::LatchIn{- x::cell<n> * y::cell<m> & n>3}<>
            |- c::LatchIn{- x::cell<n> & n>5}<>.

// should succeed

Entail 2: Fail.(must) cause:matching of ho_args failed

Residue:
 <1>emp&{FLOW,(1,26)=__flow#E}[]
=================================================================
# bug-8a-lemma

left:
 Lemma "wait-for":  (exists flted_6_15: c2::CNT{}<a> * c2::CNT{}<flted_6_15>&flted_6_15+1=0&
{FLOW,(4,5)=__norm#E})[]==> (exists flted_6_17: c2::CNT{}<flted_6_17>&flted_6_17+1=0&
{FLOW,(4,5)=__norm#E})[]

# need to check nodes equality, such as c1=c2..

lemma_prop "wait-for" c2::CNT<a> * c2::CNT<(-1)>  ->  c2::CNT<(-1)>.

check_normalize c1::CNT<1> * c2::CNT<(-1)> .

CheckNorm (2) :  c1::CNT{}<flted_7_72>&flted_11_59=a_67 & c2=c1 & flted_11_58=flted_6_15 & 
flted_11_59=1 & flted_11_58+1=0 & flted_7_72+1=0&{FLOW,(4,5)=__norm#E}[]
=================================================================
# bug-6e4 --esl (LatchIN)

- why did this example fail?
- We should allow %PPP = emp as solution.

checkentail c::LatchIn{- x::cell<n> & n>3}<>
            |- c::LatchIn{- x::cell<n> * %PPP & n>5}<>.
print residue.

Entail 1: Fail.(must) cause:matching of ho_args failed

Residue:
 <1>emp&{FLOW,(1,26)=__flow#E}[]
=================================================================
# bug-8a1

c1,c2 are equal, hence lemma should be triggered..

CheckNorm (3) :  c1::CNT{}<flted_17_71> * c2::CNT{}<flted_17_70> * x::cell<n>&flted_17_71+
1=0 & flted_17_70=1 & c1=c2 & 0<n&{FLOW,(4,5)=__norm#E}[]
=================================================================
// # bug-8a2 

(some simplification helpful)

check_normalize  c1::CNT<(-1)> * c2::CNT<1> * x::cell<n> & c1>=c2 & c2>=c1
   & n > 0.
// failure may be OK here.
/* 
  no simplification? did we use transitive closure?

CheckNorm (4) :  c1::CNT{}<flted_16_97> * c2::CNT{}<flted_16_96> * x::cell<n>&flted_16_97+
1=0 & flted_16_96=1 & c2<=c1 & c1<=c2 & 0<n&{FLOW,(4,5)=__norm#E}[]

*/

check_normalize  c1::CNT<(-1)> * c2::CNT<1> * x::cell<n> & n=0 & n > 0.
/* 

   no unsat check?
CheckNorm (5) :  c1::CNT{}<flted_20_116> * c2::CNT{}<flted_20_115> * x::cell<n>&flted_20_116+
1=0 & flted_20_115=1 & n=0 & 0<n&{FLOW,(4,5)=__norm#E}[]

*/


check_normalize  c1::CNT<(-1)> * c2::CNT<1> * x::cell<n> & exists(z:c1=z & c2=z) & n > 0.
/*
  cannot handle? maybe some simplifier could help

CheckNorm (6) :  c1::CNT{}<flted_37_135> * c2::CNT{}<flted_37_134> * x::cell<n>&flted_37_135+
1=0 & flted_37_134=1 & exists(z:c1=z & c2=z) & 0<n&{FLOW,(4,5)=__norm#E}[]


*/
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
=================================================================
