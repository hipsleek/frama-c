



 int foo(int n)
  case {
   n<0 -> requires Loop 
          ensures false;
   n=0 -> requires Term[]
          ensures res=0
   n>0 -> requires Term[n] 
          ensures res=2*n
  }
 { 
   if (n=0) return 0;
   else return 2+foo(n-1);
 }


 Term[..] - definite termination
 MayLoop  - may terminate or may loop
 Loop     - definite looping
 
 MayLoop |- Term[..] ==> MayLoop
 MayLoop |- MayLoop  ==> MayLoop
 MayLoop |- Loop     ==> MayLoop

 Loop  |- Term    ==> Loop
 Loop  |- MayLoop ==> Loop
 Loop  |- Loop    ==> false
 Term[Xs] |- MayLoop  ==> Fail_MAY (may go into a loop here)
 Term[XS] |- Loop ==> Fail_MUST (definitely do not terminate here)

       Xs > Ys
 ---------------------------------
 Term[Xs] |- Term[Ys] ==> Term[Xs]

       not(Xs > Ys)
 ---------------------------------
 Term[Xs] |- Term[Ys] ==> FAIL_MAY (unable to prove lexical ordering)


What about?

(i) D1 and D2 are not disjoint
    requires D1 & Term or D2 & Loop
 Can our system handle correctly?

(ii) What if we had specified:
 requires Loop
 ensures true;
 How do we signal a failure?

   CheckLoop(D1)
   CheckLoop(D2)
  ---------------------
  CheckLoop(D1 or D2)

  ---------------------
  CheckLoop(D & Error)

  -------------------
  CheckLoop(D & Term)

  ----------------------
  CheckLoop(D & MayLoop)

    D |- false
  -------------------
  CheckLoop(D & Loop)


  {Pre} code {D}
  D |- Post  => D2
  CheckLoop(D2)
 --------------------
 {Pre} code {Post}

 


