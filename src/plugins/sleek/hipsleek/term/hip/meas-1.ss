logical int p1, p2, p3, m1,m2;
//function M1(int a,int b).
//function M2(int a,int b).

void loop (int x, int y)
/*
case {
	x<=0 -> requires Term[] ensures true;
  x>0 -> case {
		y<0 -> requires Term[1,x] ensures true;
		y>=0 -> requires Term[2,y] ensures true;
	}
}
*/
  infer[p1,p2,p3,M1,M2]
case {
	x<=0 -> requires Term[p1] ensures true;
  x>0 -> case {
     y<0 -> requires Term[p2,M1(x,y)] ensures true;
     y>=0 -> requires Term[p3,M2(x,y)] ensures true;
	}
}

/*
case {
	x<=0 -> requires Term[0] ensures true;
  x>0 -> case {
		y<0 -> requires Term[0,x] ensures true;
		y>=0 -> requires Term[1,y] ensures true;
	}
}
*/
{
	if (x > 0) {
		loop (x+y, y-1);	
	}
}

/*
Constraints generated by the termination checker:
//(1): nothing
infer[p3] Term[p3,y] |- Term[p3,y-1].
print residue.

//(2): p3>p2
infer[p2,p3] (y>=0 & x>0) & (y-1<0 & x+y>0) & Term[p3,y] |- Term[p2,x+y]. 
print residue.

//(3): nothing
infer[p2] (x>0 & y<0) & (x+y>0 & y-1<0) & Term[p2,x] |- Term[p2,x+y].
print residue.

//(4)
infer[p2,p1] (x>0 & y<0) & (x+y<=0) & Term[p2,x] |- Term[p1].
print residue.

--> p3>p2 & p2>=p1 
--> p1=0; p2=0; p3=1
*/
