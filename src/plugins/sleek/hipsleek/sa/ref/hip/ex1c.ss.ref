
!!!Full processing file "hip/ex1c.ss"
Parsing file "hip/ex1c.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

!!! formula1: emp&(self=null | self!=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true),
([], self=null)])
!!! formula1: emp&(self=p | self!=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true),
([], self=p)])
Checking procedure get_next1$node... 
Procedure get_next1$node SUCCESS.

Checking procedure foo3$node... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H5,G1]requires H5(x)&true
 ensures G1(x',res)&true{,(3,4)=__norm};

*************************************
*******relational assumptions ********
*************************************
[ // PRE
(0)H5(x)&true --> x::node<_,p1> * HP_1319(p1)&
true(3,4),
 // POST
(0)HP_1319(res) * x'::node<_,flted2>&flted2=null --> G1(x',res)&
true(3,4)]

Procedure foo3$node SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H5(x1) ::=  [x1::node<_,DP>],
 G1(x2,res1) ::=  [x2::node<_,flted2>&flted2=null & res1=DP]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H5(x1) ::= x1::node<_,DP>(3,4),
 G1(x2,res1) ::= x2::node<_,flted2>&flted2=null & res1=DP(3,4)]
*************************************

Checking procedure get_next$node... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H6,G2]requires H6(x)&true
 ensures G2(x',res)&true{,(3,4)=__norm};

*************************************
*******relational assumptions ********
*************************************
[ // BIND
(0)H6(x)&true --> x::node<val1,next1> * HP_1388(next1)&
true(3,4),
 // POST
(0)HP_1388(res) * x'::node<val1,v1>&v1=null --> G2(x',res)&
true(3,4)]

Procedure get_next$node SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H6(x3) ::=  [x3::node<val,DP1>],
 G2(x4,res2) ::=  [x4::node<val,v>&v=null & res2=DP1]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H6(x3) ::= x3::node<val,DP1>(3,4),
 G2(x4,res2) ::= x4::node<val,v>&v=null & res2=DP1(3,4)]
*************************************
Stop Omega... 11 invocations 
0 false contexts at: ()

!!! log(small):(0.041471,269)
Total verification time: 0.324782 second(s)
	Time spent in main process: 0.305549 second(s)
	Time spent in child processes: 0.019233 second(s)

