
!!!Full processing file "norm/llnth.ss"
Parsing file "norm/llnth.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

!!! formula1: emp&((self=p & self!=null) | (self!=p & self!=null))&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&p!=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], (p<self | self<p)),
([], self=p & self!=null)])
!!! formula1: emp&self!=null & ((p<=(0-1) | 1<=p))&{FLOW,(1,28)=__flow}[]
!!! formula1_under: hfalse&false&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], ((p=self & 1<=self) | (p=self & self<=(0-1)))),
([p,self], (self<p | p<self))])
!!! formula1: emp&(self=null | self!=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true),
([], self=null)])
!!! neqs:[]
Checking procedure last$node~int... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H,G]requires H(x)&true
 ensures G(res,x)&true{,(3,4)=__norm};

*************************************
*******relational assumptions ********
*************************************
[ // BIND
(2;2;0)H(x)&x!=null --> x::node<val1,next1> * HP_1311(next1)&
true(3,4),
 // PRE_REC
(2;2;0)HP_1311(next1)&true --> H(next1)&
true(3,4),
 // POST
(1;0)H(res)&true --> G(res,x)&
true(3,4),
 // POST
(1;2;0)H(x)&res=null & x=null --> G(res,x)&
true(3,4),
 // POST
(2;2;0)x::node<val1,next1> * G(res,next1)&true --> G(res,x)&
true(3,4)]

Procedure last$node~int SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H(res1) ::=  [res1::node<val2,next2> * H(next2); emp&res1=DP; emp&res1=DP & res1!=null; 
emp&res1=DP & res1=null],
 G(res2,x1) ::=  [emp&x1=null & res2=null; G(res2,next) * x1::node<val,next>; emp&x1=res2 & 
res2=DP]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H(res1) ::= 
 emp&res1=DP
 or emp&res1=DP & res1!=null
 or emp&res1=DP & res1=null
 or res1::node<val2,next2> * H(next2)
 (3,4),
 G(res2,x1) ::= 
 G(res2,next) * x1::node<val,next>
 or emp&x1=res2 & res2=DP
 or emp&x1=null & res2=null
 (3,4)]
*************************************
Stop Omega... 20 invocations 
0 false contexts at: ()

!!! log(small):(0.077735,363)
Total verification time: 0.430358 second(s)
	Time spent in main process: 0.401894 second(s)
	Time spent in child processes: 0.028464 second(s)

