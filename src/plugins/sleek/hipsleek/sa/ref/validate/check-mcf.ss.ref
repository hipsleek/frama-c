
!!!Full processing file "validate/check-mcf.ss"
Parsing file "validate/check-mcf.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

!!! formula1: emp&self!=null&{FLOW,(1,28)=__flow}[]
!!! formula1_under: hfalse&false&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true)])
!!! formula1: emp&(self=null | self!=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true),
([], self=null)])
Checking procedure check_child$node~node~tree... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H1,G1,H2,G2]requires H2(l,prv@NI,par@NI)&
true
 ensures G2(l,prv@NI,par@NI)&res{,(3,4)=__norm};

!!! WARNING : Inferable vars include some external variables!
vars:[H1,G1,H2,G2] pre_post_vars:[G2,res,H2,l,prv,par]

!!! >>>>>> HIP gather infer pre <<<<<<
!!!Inferred Heap: []
!!!Inferred Pure: [ forall(prev_52_1376:((par'!=par | prev_52_1376<=prv)) & ((par'!=par | 
prv<=prev_52_1376))), forall(parent_52_1378:((prv'!=prv | parent_52_1378<=par)) & ((prv'!=prv | 
par<=parent_52_1378))), forall(parent_52_1378:((prev_52_1376<=prv | parent_52_1378<=par)) & 
((prv<=prev_52_1376 | parent_52_1378<=par)) & ((prev_52_1376<=prv | 
par<=parent_52_1378)) & ((prv<=prev_52_1376 | par<=parent_52_1378)))]
*************************************
*******relational assumptions ********
*************************************
[ // BIND
(2;0)H2(l,prv@NI,par@NI)&l!=null --> l::node<child1,prev1,next1,parent1> * 
HP_1379(child1,prv@NI,par@NI) * HP_1380(prev1,prv@NI,par@NI) * 
HP_1381(next1,prv@NI,par@NI) * HP_1382(parent1,prv@NI,par@NI)&
true(3,4),
 // PRE_REC
(1;2;0)HP_1381(next1,prev1@NI,par@NI)&
true |#| l::node<child1,prev1,next1,par>&true --> H2(next1,l@NI,par@NI)&
true(3,4),
 // PRE_REC
(1;2;0)HP_1379(child1,prev1@NI,par@NI)&true --> H1(child1)&
true(3,4),
 // POST
(1;0)H2(l,prv@NI,par@NI)&l=null --> G2(l,prv@NI,par@NI)&
true(3,4),
 // POST
(1;2;0)G2(next1,l@NI,par@NI) * l::node<child1,prev1,next1,par> * 
HP_1380(prev1,prev1@NI,par@NI) * HP_1382(par,prev1@NI,par@NI) * G1(child1)&
true --> G2(l,prev1@NI,par@NI)&
true(3,4)]

Procedure check_child$node~node~tree SUCCESS.

Checking procedure check_tree$tree... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H1,G1,H2,G2]requires H1(t)&true
 ensures G1(t)&res{,(3,4)=__norm};

!!! WARNING : Inferable vars include some external variables!
vars:[H1,G1,H2,G2] pre_post_vars:[G1,res,H1,t]

*************************************
*******relational assumptions ********
*************************************
[ // BIND
(0)H1(t)&true --> t::tree<val1,children1> * HP_1798(children1)&
true(3,4),
 // PRE_REC
(2;0)HP_1798(children1)&children1!=null & 
n1'=null |#| t::tree<val1,children1>&true --> H2(children1,n1'@NI,t@NI)&
true(3,4),
 // POST
(1;0)t::tree<val1,children1> * HP_1798(children1)&children1=null --> G1(t)&
true(3,4),
 // POST
(2;0)t::tree<val1,children1> * G2(children1,n1@NI,t@NI)&children1!=null & 
n1=null --> G1(t)&
true(3,4)]

Procedure check_tree$tree SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H1(t1) ::=  [t1::tree<val,children> * H2(children,n',t1)&n'=null],
 H2(l1,prv1,par1) ::=  [emp&l1=null; l1::node<child2,prev2,next2,parent2> * 
child2::tree<val2,children2> * H2(next2,l1,par1) * H2(children2,n',child2)&
parent2=par1 & prv1=prev2 & n'=null],
 G1(t2) ::=  [t2::tree<val,children> * G2(children,n,t2)&n=null],
 G2(l2,prv2,par2) ::=  [emp&l2=null; l2::node<child,prv2,next,par2> * child::tree<val,children> * 
G2(next,l2,par2) * G2(children,n,child)&n=null]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H1(t1) ::= t1::tree<val,children> * H2(children,n',t1)&n'=null(3,4),
 H2(l1,prv1,par1) ::= 
 l1::node<child2,prev2,next2,parent2> * child2::tree<val2,children2> * 
 H2(next2,l1,par1) * H2(children2,n',child2)&parent2=par1 & prv1=prev2 & 
 n'=null
 or emp&l1=null
 (3,4),
 G1(t2) ::= t2::tree<val,children> * G2(children,n,t2)&n=null(3,4),
 G2(l2,prv2,par2) ::= 
 l2::node<child,prv2,next,par2> * child::tree<val,children> * 
 G2(next,l2,par2) * G2(children,n,child)&n=null
 or emp&l2=null
 (3,4)]
*************************************

!!! formula1: emp&(self!=null | self=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([], self=null),
([self], true)])
!!! formula1: emp&(self!=null | self=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([], self=null),
([self], true)])
!!! formula1: emp&self!=null&{FLOW,(1,28)=__flow}[]
!!! formula1_under: hfalse&false&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true)])
!!! formula1: emp&self!=null&{FLOW,(1,28)=__flow}[]
!!! formula1_under: hfalse&false&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true)])Stop Omega... 55 invocations 
0 false contexts at: ()

!!! log(small):(0.212478,827)
Total verification time: 0.710035 second(s)
	Time spent in main process: 0.654396 second(s)
	Time spent in child processes: 0.055639 second(s)

