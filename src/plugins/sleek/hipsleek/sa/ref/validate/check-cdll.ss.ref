
!!!Full processing file "validate/check-cdll.ss"
Parsing file "validate/check-cdll.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

!!! formula1: emp&(self=p | self!=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true),
([], self=p)])
Checking procedure check_cdll$node~node~node... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H1,G1]requires H1(l,prv@NI,p@NI)&true
 ensures G1(l,prv@NI,p@NI)&
res{,(3,4)=__norm};

!!! >>>>>> HIP gather infer pre <<<<<<
!!!Inferred Heap: []
!!!Inferred Pure: [ forall(prev_19_1282:forall(prv:((l!=1 | 1<=p | prev_19_1282<=prv)) & 
((l!=1 | 1<=p | prv<=prev_19_1282)) & ((l!=1 | prev_19_1282<=prv | p<=1)) & 
((l!=1 | prv<=prev_19_1282 | p<=1))))]
*************************************
*******relational assumptions ********
*************************************
[ // BIND
(2;0)H1(l,prv@NI,p@NI)&l!=p --> l::node<prev1,next1> * 
HP_1284(prev1,prv@NI,p@NI) * HP_1285(next1,prv@NI,p@NI)&
true(3,4),
 // PRE_REC
(2;0)HP_1285(next1,prv@NI,p@NI)&l!=p |#| l::node<prev1,next1>&
true --> H1(next1,l@NI,p@NI)&
true(3,4),
 // POST
(1;0)H1(l,prv@NI,l@NI)&true --> G1(l,prv@NI,p@NI)&
true(3,4),
 // POST
(2;0)G1(next1,l@NI,p@NI) * l::node<prev1,next1> * 
HP_1284(prev1,prev1@NI,p@NI)&l!=p --> G1(l,prev1@NI,p@NI)&
true(3,4)]

Procedure check_cdll$node~node~node SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H1(l1,prv1,p1) ::=  [emp&p1=l1; l1::node<prev,next> * H1(next,l1,p1)&l1!=p1 & prv1=prev],
 G1(l2,prv2,p2) ::=  [emp&p2=l2; l2::node<prv2,next> * G1(next,l2,p2)&l2!=p2]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H1(l1,prv1,p1) ::= 
 l1::node<prev,next> * H1(next,l1,p1)&l1!=p1 & prv1=prev
 or emp&p1=l1
 (3,4),
 G1(l2,prv2,p2) ::= 
 l2::node<prv2,next> * G1(next,l2,p2)&l2!=p2
 or emp&p2=l2
 (3,4)]
*************************************
Stop Omega... 18 invocations 
0 false contexts at: ()

!!! log(small):(0.101847,367)
Total verification time: 0.428091 second(s)
	Time spent in main process: 0.382569 second(s)
	Time spent in child processes: 0.045522 second(s)

