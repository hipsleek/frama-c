
!!!Full processing file "paper/check-cllclls.ss"
Parsing file "paper/check-cllclls.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

!!! formula1: emp&(self=p | (self!=p & self!=null))&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], (p<self | self<p)),
([], self=p)])
!!! neqs:[]
Checking procedure check_csll$node~node... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H1,G1]requires H1(l,p)&true
 ensures G1(l,p)&res{,(3,4)=__norm};

*************************************
*******relational assumptions ********
*************************************
[ // BIND
(2;0)H1(l,p)&l!=p --> l::node<val1,next1> * HP_1324(next1,p@NI) * 
HP_1325(p,l@NI)&
true(3,4),
 // PRE_REC
(2;0)HP_1324(next1,p@NI) * HP_1325(p,l@NI)&l!=p --> H1(next1,p)&
true(3,4),
 // POST
(1;0)H1(l,l)&true --> G1(l,p)&
true(3,4),
 // POST
(2;0)l::node<val1,next1> * G1(next1,p)&l!=p --> G1(l,p)&
true(3,4)]

Procedure check_csll$node~node SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H1(l1,p1) ::=  [emp&p1=l1; l1::node<val2,next2> * H1(next2,p1)&l1!=p1],
 G1(l2,p2) ::=  [emp&p2=l2; l2::node<val,next> * G1(next,p2)&l2!=p2]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H1(l1,p1) ::= 
 l1::node<val2,next2> * H1(next2,p1)&l1!=p1
 or emp&p1=l1
 (3,4),
 G1(l2,p2) ::= 
 l2::node<val,next> * G1(next,p2)&l2!=p2
 or emp&p2=l2
 (3,4)]
*************************************

!!! formula1: emp&((self!=p1 & self!=null) | p1=self)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([], p_1379=self),
([self], (p_1379<self | self<p_1379))])
!!! formula1: emp&((self!=p2 & self!=null) | p2=self)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([], p_1381=self),
([self], (p_1381<self | self<p_1381))])
!!! neqs:[]
Checking procedure check_csll_outer$node1~node1... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H2,G2]requires H2(l,p)&true
 ensures G2(l,p)&res{,(3,4)=__norm};

*************************************
*******relational assumptions ********
*************************************
[ // BIND
(2;0)H2(l,p)&l!=p --> HP_1483(dd1,p@NI) * HP_1485(p,l@NI) * 
l::node1<dd1,next3> * HP_1484(next3,p@NI)&
true(3,4),
 // PRE_REC
(2;0)HP_1484(next3,p@NI) * HP_1485(p,l@NI)&l!=p --> H2(next3,p)&
true(3,4),
 // PRE
(2;0)HP_1483(dd1,p@NI)&true --> dd1::H1<dd1>&
true(3,4),
 // POST
(1;0)H2(l,l)&true --> G2(l,p)&
true(3,4),
 // POST
(2;0)G2(next3,p) * l::node1<dd1,next3> * dd1::G1<dd1>&l!=p --> G2(l,p)&
true(3,4)]

Procedure check_csll_outer$node1~node1 SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H2(l3,p3) ::=  [emp&p3=l3; l3::node1<dd2,next4> * dd2::H1<dd2> * H2(next4,p3)&l3!=p3],
 G2(l4,p4) ::=  [emp&p4=l4; l4::node1<dd,next3> * dd::G1<dd> * G2(next3,p4)&l4!=p4]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H2(l3,p3) ::= 
 l3::node1<dd2,next4> * dd2::H1<dd2> * H2(next4,p3)&l3!=p3
 or emp&p3=l3
 (3,4),
 G2(l4,p4) ::= 
 l4::node1<dd,next3> * dd::G1<dd> * G2(next3,p4)&l4!=p4
 or emp&p4=l4
 (3,4)]
*************************************
Stop Omega... 31 invocations 
0 false contexts at: ()

!!! log(small):(0.119916,478)
Total verification time: 0.446462 second(s)
	Time spent in main process: 0.401197 second(s)
	Time spent in child processes: 0.045265 second(s)

