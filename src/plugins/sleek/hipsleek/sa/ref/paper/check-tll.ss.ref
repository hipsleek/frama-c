
!!!Full processing file "paper/check-tll.ss"
Parsing file "paper/check-tll.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

!!! formula1: emp&(self!=null | self!=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self>0&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true)])
!!! formula1: emp&((self=ll & self!=null) | self!=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self>0&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true)])
Checking procedure check_tll$node~node~node... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H,G]requires H(x,t@NI,r@NI)&true
 ensures G(x,t@NI,r@NI)&
res{,(3,4)=__norm};

!!! >>>>>> HIP gather infer pre <<<<<<
!!!Inferred Heap: []
!!!Inferred Pure: [ forall(right_29_1349:((right_29_1349!=0 | left_29_1348<=0)) & 
((right_29_1349!=0 | 0<=left_29_1348))), forall(right_29_1349:((left_29_1348!=0 | right_29_1349<=0)) & 
((left_29_1348!=0 | 0<=right_29_1349)))]
*************************************
*******relational assumptions ********
*************************************
[ // BIND
(0)H(x,t@NI,r@NI)&true --> x::node<left1,right1,next1> * 
HP_1351(left1,t@NI,r@NI) * HP_1352(right1,t@NI,r@NI) * 
HP_1353(next1,t@NI,r@NI)&
true(3,4),
 // PRE_REC
(2;2;0)HP_1351(left1,t@NI,r@NI)&left1!=null |#| x::node<left1,right1,next1>&
right1!=null --> H(left1,t@NI,r1'@NI)&
true(3,4),
 // PRE_REC
(2;2;0)HP_1352(right1,t@NI,r@NI)&
right1!=null |#| x::node<left1,right1,next1>&
left1!=null --> H(right1,r1'@NI,r@NI)&
true(3,4),
 // POST
(1;0)HP_1351(left1,t@NI,r@NI) * HP_1352(right1,t@NI,r@NI) * 
HP_1353(next1,t@NI,r@NI) * x::node<left1,right1,next1>&left1=null & 
right1=null --> G(x,t@NI,r@NI)&
true(3,4),
 // POST
(2;2;0)x::node<left1,right1,next1> * G(left1,t@NI,r2@NI) * 
G(right1,r3@NI,r@NI) * HP_1353(next1,t@NI,r@NI)&right1!=null & 
left1!=null --> G(x,t@NI,r@NI)&
true(3,4)]

Procedure check_tll$node~node~node SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H(x1,t1,r4) ::=  [HP_1931(x1)],
 G(x2,t2,r5) ::=  [HP_1941(x2)],
 HP_1931(x1) ::=  [x1::node<left,right,DP>&left=null & right=null; x1::node<left,right,DP> * 
HP_1931(left) * HP_1931(right)&left!=null & right!=null],
 HP_1941(x2) ::=  [x2::node<left,right,DP>&left=null & right=null; x2::node<left,right,DP> * 
HP_1941(left) * HP_1941(right)&right!=null & left!=null]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H(x1,t1,r4) ::= HP_1931(x1)(3,4),
 G(x2,t2,r5) ::= HP_1941(x2)(3,4),
 HP_1931(x1) ::= 
 x1::node<left,right,DP> * HP_1931(left) * HP_1931(right)&left!=null & 
 right!=null
 or x1::node<left,right,DP>&left=null & right=null
 (3,4),
 HP_1941(x2) ::= 
 x2::node<left,right,DP> * HP_1941(left) * HP_1941(right)&right!=null & 
 left!=null
 or x2::node<left,right,DP>&left=null & right=null
 (3,4)]
*************************************
Stop Omega... 42 invocations 
0 false contexts at: ()

!!! log(small):(0.209477,727)
Total verification time: 0.700389 second(s)
	Time spent in main process: 0.67284 second(s)
	Time spent in child processes: 0.027549 second(s)

