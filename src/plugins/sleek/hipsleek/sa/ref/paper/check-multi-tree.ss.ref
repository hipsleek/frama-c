
!!!Full processing file "paper/check-multi-tree.ss"
Parsing file "paper/check-multi-tree.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

!!! formula1: emp&self!=null&{FLOW,(1,28)=__flow}[]
!!! formula1_under: hfalse&false&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true)])
!!! formula1: emp&(self=null | self!=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true),
([], self=null)])
Checking procedure check_child$node... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H,G,H2,G2]requires H2(l)&true
 ensures G2(l)&res{,(3,4)=__norm};

!!! WARNING : Inferable vars include some external variables!
vars:[H,G,H2,G2] pre_post_vars:[G2,res,H2,l]

*************************************
*******relational assumptions ********
*************************************
[ // BIND
(2;0)H2(l)&l!=null --> l::node<child1,sibling1> * HP_1296(child1) * 
HP_1297(sibling1)&
true(3,4),
 // PRE_REC
(2;0)HP_1297(sibling1)&true --> H2(sibling1)&
true(3,4),
 // PRE_REC
(2;0)HP_1296(child1)&true --> H(child1)&
true(3,4),
 // POST
(1;0)H2(l)&l=null --> G2(l)&
true(3,4),
 // POST
(2;0)l::node<child1,sibling1> * G(child1) * G2(sibling1)&true --> G2(l)&
true(3,4)]

Procedure check_child$node SUCCESS.

Checking procedure check_tree$tree... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H,G,H2,G2]requires H(t)&true
 ensures G(t)&res{,(3,4)=__norm};

!!! WARNING : Inferable vars include some external variables!
vars:[H,G,H2,G2] pre_post_vars:[G,res,H,t]

!!! >>>>>> HIP gather infer pre <<<<<<
!!!Inferred Heap: []
!!!Inferred Pure: [ t!=0]
*************************************
*******relational assumptions ********
*************************************
[ // BIND
(2;0)H(t)&t!=null --> t::tree<children1> * HP_1371(children1)&
true(3,4),
 // PRE_REC
(2;0)HP_1371(children1)&true --> H2(children1)&
true(3,4),
 // POST
(2;0)t::tree<children1> * G2(children1)&true --> G(t)&
true(3,4)]

Procedure check_tree$tree SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ G(t1) ::=  [t1::tree<children> * G2(children)],
 H(t2) ::=  [t2::tree<children2> * H2(children2)],
 H2(l1) ::=  [emp&l1=null; l1::node<child2,sibling2> * child2::tree<children2> * 
H2(sibling2) * H2(children2)],
 G2(l2) ::=  [emp&l2=null; l2::node<child,sibling> * child::tree<children> * 
G2(sibling) * G2(children)]]
*************************************

*************************************
*******relational definition ********
*************************************
[ G(t1) ::= t1::tree<children> * G2(children)(3,4),
 H(t2) ::= t2::tree<children2> * H2(children2)(3,4),
 H2(l1) ::= 
 l1::node<child2,sibling2> * child2::tree<children2> * H2(sibling2) * 
 H2(children2)
 or emp&l1=null
 (3,4),
 G2(l2) ::= 
 l2::node<child,sibling> * child::tree<children> * G2(sibling) * G2(children)
 or emp&l2=null
 (3,4)]
*************************************

!!! formula1: emp&(self!=null | self=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([], self=null),
([self], true)])
!!! formula1: emp&(self!=null | self=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([], self=null),
([self], true)])
!!! formula1: emp&self!=null&{FLOW,(1,28)=__flow}[]
!!! formula1_under: hfalse&false&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true)])
!!! formula1: emp&self!=null&{FLOW,(1,28)=__flow}[]
!!! formula1_under: hfalse&false&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true)])Stop Omega... 44 invocations 
0 false contexts at: ()

!!! log(small):(0.078596,558)
Total verification time: 0.405592 second(s)
	Time spent in main process: 0.37752 second(s)
	Time spent in child processes: 0.028072 second(s)

