
!!!Full processing file "paper/check-zip-eq.ss"
Parsing file "paper/check-zip-eq.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

!!! formula1: emp&(self=null | (self!=null & p!=null))&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([p,self], true),
([], self=null)])
!!! neqs:[]
Checking procedure check_zip_eq$node~node... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H,G]requires H(x,y)&true
 ensures G(x,y)&res{,(3,4)=__norm};

!!! >>>>>> HIP gather infer pre <<<<<<
!!!Inferred Heap: []
!!!Inferred Pure: [ (x!=0 | y<=0), (x!=0 | 0<=y)]
*************************************
*******relational assumptions ********
*************************************
[ // BIND
(2;0)H(x,y)&x!=null --> x::node<val2,next2> * HP_1276(next2,y@NI) * 
HP_1277(y,x@NI)&
true(3,4),
 // BIND
(2;0)HP_1277(y,x@NI)&true --> y::node<val1,next1> * HP_1284(next1,x@NI)&
true(3,4),
 // PRE_REC
(2;0)HP_1276(next2,y@NI) * HP_1284(next1,x@NI)&true --> H(next2,next1)&
true(3,4),
 // POST
(1;0)H(x,y)&y=null & x=null --> G(x,y)&
true(3,4),
 // POST
(2;0)x::node<val2,next2> * G(next2,next1) * y::node<val1,next1>&
true --> G(x,y)&
true(3,4)]

Procedure check_zip_eq$node~node SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H(x1,y1) ::=  [emp&x1=null & y1=null; x1::node<val4,next4> * H(next4,next3) * 
y1::node<val3,next3>],
 G(x2,y2) ::=  [emp&x2=null & y2=null; x2::node<val,next> * G(next,next1) * 
y2::node<val1,next1>]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H(x1,y1) ::= 
 x1::node<val4,next4> * H(next4,next3) * y1::node<val3,next3>
 or emp&x1=null & y1=null
 (3,4),
 G(x2,y2) ::= 
 x2::node<val,next> * G(next,next1) * y2::node<val1,next1>
 or emp&x2=null & y2=null
 (3,4)]
*************************************
Stop Omega... 19 invocations 
0 false contexts at: ()

!!! log(small):(0.072866,324)
Total verification time: 0.366547 second(s)
	Time spent in main process: 0.336926 second(s)
	Time spent in child processes: 0.029621 second(s)

