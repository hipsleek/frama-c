
!!!Full processing file "paper/check-cll.ss"
Parsing file "paper/check-cll.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

!!! formula1: emp&(self=p | (self!=p & self!=null))&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], (p<self | self<p)),
([], self=p)])
!!! neqs:[]
Checking procedure check_csll$node~node... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H1,G1]requires H1(l,p)&true
 ensures G1(l,p)&res{,(3,4)=__norm};

*************************************
*******relational assumptions ********
*************************************
[ // BIND
(2;0)H1(l,p)&l!=p --> l::node<val1,next1> * HP_1264(next1,p@NI) * 
HP_1265(p,l@NI)&
true(3,4),
 // PRE_REC
(2;0)HP_1264(next1,p@NI) * HP_1265(p,l@NI)&l!=p --> H1(next1,p)&
true(3,4),
 // POST
(1;0)H1(l,l)&true --> G1(l,p)&
true(3,4),
 // POST
(2;0)l::node<val1,next1> * G1(next1,p)&l!=p --> G1(l,p)&
true(3,4)]

Procedure check_csll$node~node SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H1(l1,p1) ::=  [emp&p1=l1; l1::node<val2,next2> * H1(next2,p1)&l1!=p1],
 G1(l2,p2) ::=  [emp&p2=l2; l2::node<val,next> * G1(next,p2)&l2!=p2]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H1(l1,p1) ::= 
 l1::node<val2,next2> * H1(next2,p1)&l1!=p1
 or emp&p1=l1
 (3,4),
 G1(l2,p2) ::= 
 l2::node<val,next> * G1(next,p2)&l2!=p2
 or emp&p2=l2
 (3,4)]
*************************************
Stop Omega... 12 invocations 
0 false contexts at: ()

!!! log(small):(0.053714,260)
Total verification time: 0.33345 second(s)
	Time spent in main process: 0.308926 second(s)
	Time spent in child processes: 0.024524 second(s)

