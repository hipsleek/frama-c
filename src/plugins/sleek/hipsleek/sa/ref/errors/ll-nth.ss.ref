
!!!Full processing file "errors/ll-nth.ss"
Parsing file "errors/ll-nth.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

!!! SCall neqs:[]
!!! neqs:[]
Checking procedure f_r_1201_while_17_2$node~int... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H1,G1]requires H1(x)&true
 ensures G1(x,x')&true{,(3,4)=__norm};

*************************************
*******relational assumptions ********
*************************************
[ // BIND
(1;1;0)H1(x)&x!=null --> x::node<val1,next1> * HP_1260(next1)&
true(3,4),
 // PRE_REC
(1;1;0)HP_1260(next1)&true --> H1(next1)&
true(3,4),
 // POST
(1;1;0)x::node<val1,next1> * G1(next1,x')&true --> G1(x,x')&
true(3,4),
 // POST
(2;1;0)H1(x)&x!=null --> G1(x,x')&
true(3,4),
 // POST
(2;0)H1(x)&x=null & x=null --> G1(x,x')&
true(3,4)]

Procedure f_r_1201_while_17_2$node~int SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H1(x1) ::=  [emp&x1=null; x1::node<val2,next2> * H1(next2); emp&x1=DP & x1!=null],
 G1(x2,x3) ::=  [emp&x2=null & x3=null; x2::node<val,next> * G1(next,x3); emp&x2!=null & 
x3=x2 & x2=DP]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H1(x1) ::= 
 x1::node<val2,next2> * H1(next2)
 or emp&x1=DP & x1!=null
 or emp&x1=null
 (3,4),
 G1(x2,x3) ::= 
 x2::node<val,next> * G1(next,x3)
 or emp&x2!=null & x3=x2 & x2=DP
 or emp&x2=null & x3=null
 (3,4)]
*************************************

!!! formula1: emp&(self!=null | self!=null | self=null)&{FLOW,(1,30)=__flow}[]
!!! formula1_under: emp&(1<=self | self<=(0-1) | self=null)&{FLOW,(1,30)=__flow}[]
!!! baga_over(unfolded):Some([([], true),
([self], true)])
!!! formula1: emp&(self!=null | (self!=null & x3=self) | (self=null & x3=null))&
{FLOW,(1,30)=__flow}[]
!!! formula1_under: emp&((self=x3 & 1<=x3) | (self=x3 & x3<=(0-1)) | (self=null & x3=null))&
{FLOW,(1,30)=__flow}[]
!!! baga_over(unfolded):Some([([], x_1324=self),
([self], true)])
Checking procedure nth$node~int... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H,G]requires H(x)&true
 ensures G(x,res)&true{,(3,4)=__norm};

*************************************
*******relational assumptions ********
*************************************
[ // PRE
(0)H(x)&true --> x::H1<>&
true(3,4),
 // POST
(0)x::G1<res>&true --> G(x,res)&
true(3,4)]

Procedure nth$node~int SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H(x4) ::=  [x4::H1<>],
 G(x5,res1) ::=  [x5::G1<res1>]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H(x4) ::= x4::H1<>(3,4),
 G(x5,res1) ::= x5::G1<res1>(3,4)]
*************************************
Stop Omega... 23 invocations 
1 false contexts at: ( (17,2) )

!!! log(small):(0.060215,357)
Total verification time: 0.381197 second(s)
	Time spent in main process: 0.346812 second(s)
	Time spent in child processes: 0.034385 second(s)

