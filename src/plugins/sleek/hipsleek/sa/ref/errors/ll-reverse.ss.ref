
!!!Full processing file "errors/ll-reverse.ss"
Parsing file "errors/ll-reverse.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

!!! SCall neqs:[(x,prev_38)]
!!! neqs:[(x,prev_38)]
Checking procedure f_r_1202_while_20_2$node~node... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H1,G1]requires H1(x)&true
 ensures G1(x,x')&true{,(3,4)=__norm};

*************************************
*******relational assumptions ********
*************************************
[ // BIND
(1;0)H1(x)&x!=null --> x::node<val1,next1> * HP_1247(next1)&
true(3,4),
 // PRE_REC
(1;0)HP_1247(next1)&true --> H1(next1)&
true(3,4),
 // POST
(1;0)x::node<val1,prev1> * G1(next1,x')&true --> G1(x,x')&
true(3,4),
 // POST
(2;0)H1(x)&x=null & x=null --> G1(x,x')&
true(3,4)]

Procedure f_r_1202_while_20_2$node~node SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H1(x1) ::=  [emp&x1=null; x1::node<val2,next2> * H1(next2)],
 G1(x3,x2) ::=  [emp&x3=null & x2=null; x3::node<val,prev1> * G1(next,x2)]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H1(x1) ::= 
 x1::node<val2,next2> * H1(next2)
 or emp&x1=null
 (3,4),
 G1(x3,x2) ::= 
 x3::node<val,prev1> * G1(next,x2)
 or emp&x3=null & x2=null
 (3,4)]
*************************************

!!! formula1: emp&(self!=null | self=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([], self=null),
([self], true)])
!!! formula1: emp&(x3!=null | (x3=null & self=null))&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self=null & x3=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([], x_1306=null & self=null),
([x_1306], true)])
Checking procedure get_last$node... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H,G]requires H(x)&true
 ensures G(x,res)&true{,(3,4)=__norm};

*************************************
*******relational assumptions ********
*************************************
[ // PRE
(0)H(x)&true --> x::H1<>&
true(3,4),
 // POST
(0)emp&true --> G(x,res)&
true(3,4)]

Procedure get_last$node SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H(x4) ::=  [x4::H1<>],
 G(x5,res1) ::=  [emp]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H(x4) ::= x4::H1<>(3,4),
 G(x5,res1) ::= emp(3,4)]
*************************************
Stop Omega... 12 invocations 
0 false contexts at: ()

!!! log(small):(0.048973,302)
Total verification time: 0.336454 second(s)
	Time spent in main process: 0.315875 second(s)
	Time spent in child processes: 0.020579 second(s)

