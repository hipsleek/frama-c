
!!!Full processing file "lemma/ll-insert-last.ss"
Parsing file "lemma/ll-insert-last.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

Checking procedure get_last$node... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H1,G1]requires H1(x)&true
 ensures G1(x,res)&true{,(3,4)=__norm};

*************************************
*******relational assumptions ********
*************************************
[ // BIND
(0)H1(x)&true --> x::node<val1,next1> * HP_1241(next1)&
true(3,4),
 // PRE_REC
(2;0)HP_1241(next1)&next1!=null --> H1(next1)&
true(3,4),
 // POST
(1;0)HP_1241(next1) * res::node<val1,next1>&next1=null --> G1(x,res)&
true(3,4),
 // POST
(2;0)x::node<val1,next1> * G1(next1,res)&next1!=null --> G1(x,res)&
true(3,4)]

Procedure get_last$node SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H1(x1) ::=  [x1::node<val,next> * HP_1241(next)&x1!=null],
 G1(x3,res1) ::=  [GP_1302(x3,x2) * x2::node<val,next>&next=null & x2=res1],
 GP_1302(x3,x2) ::=  [
  x3::node<val,next> * GP_1302(next,x2)&next!=null
  or emp&x3=x2
  ],
 HP_1241(next2) ::=  [emp&next2=null; next2::node<val,next> * HP_1241(next)]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H1(x1) ::= x1::node<val,next> * HP_1241(next)&x1!=null(3,4),
 G1(x3,res1) ::= GP_1302(x3,x2) * x2::node<val,next>&next=null & x2=res1(3,4),
 GP_1302(x3,x2) ::= 
 x3::node<val,next> * GP_1302(next,x2)&next!=null
 or emp&x3=x2
 (3,4),
 HP_1241(next2) ::= 
 next2::node<val,next> * HP_1241(next)
 or emp&next2=null
 (3,4)]
*************************************

!!! formula1: emp&(self!=null | self=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([], self=null),
([self], true)])
!!! formula1: emp&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([], true),
([self], true)])
!!! formula1: emp&self!=null&{FLOW,(1,28)=__flow}[]
!!! formula1_under: hfalse&false&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], (1<=self | self<=(0-1)))])
!!! formula1: emp&res1!=null&{FLOW,(1,28)=__flow}[]
!!! formula1_under: hfalse&false&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([res_1300,self], true),
([res_1300], true)])
Checking procedure insert$node~int... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H2,G2]requires H2(x)&true
 ensures G2(x,res)&true{,(3,4)=__norm};

*************************************
*******relational assumptions ********
*************************************
[ // PRE
(0)H2(x)&true --> x::node<val2,next3> * HP_1432(next3)&
true(3,4),
 // PRE
(0)HP_1432(next1)&true --> next1::HP_1241<>&
true(3,4),
 // POST
(0)res::GP_1302<x2> * v1::node<a',next1> * x2::node<val1,v1>&
next1=null --> G2(x,res)&
true(3,4)]

Procedure insert$node~int SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H2(x4) ::=  [x4::node<val3,next4> * next4::HP_1241<>],
 G2(x5,res2) ::=  [x5::GP_1302<x2> * x2::node<val,v> * v::node<a',next>&x5=res2 & next=null]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H2(x4) ::= x4::node<val3,next4> * next4::HP_1241<>(3,4),
 G2(x5,res2) ::= x5::GP_1302<x2> * x2::node<val,v> * v::node<a',next>&x5=res2 & next=null(3,4)]
*************************************
Stop Omega... 21 invocations 
0 false contexts at: ()

!!! log(small):(0.074601,416)
Total verification time: 0.370555 second(s)
	Time spent in main process: 0.348468 second(s)
	Time spent in child processes: 0.022087 second(s)

