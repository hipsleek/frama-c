
!!!Full processing file "bugs/sll-dll3.ss"
Parsing file "bugs/sll-dll3.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

!!! formula1: emp&(self=null | self!=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true),
([], self=null)])
!!! formula1: emp&(self=null | self!=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true),
([], self=null)])
!!! neqs:[]
Checking procedure paper_fix$node~node... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H1,G1]requires H1(c)&true
 ensures G1(c,p)&true{,(3,4)=__norm};

dprint: bugs/sll-dll3.ss:21: ctx:  List of Failesc Context: [FEC(0, 0, 1  [(,0 ); (,1 )])]

Successful States:
[
 Label: [(,0 ); (,1 )]
 State:HP_1278(prev1) * HP_1279(next1) * c::node<val1,p,next1>&c!=null & v1'&{FLOW,(3,4)=__norm}[]
       es_ho_vars_map: []HP_1278(prev) * HP_1279(next) * c::node<val,p,next>&v' & c!=null

 ]

dprint: bugs/sll-dll3.ss:23: ctx:  List of Failesc Context: [FEC(0, 0, 1  [(,0 ); (,1 )])]

Successful States:
[
 Label: [(,0 ); (,1 )]
 State:HP_1278(prev1) * HP_1279(next1) * c::node<val1,p,next1>&c!=null & v1'&{FLOW,(3,4)=__norm}[]
       es_ho_vars_map: []HP_1278(prev) * HP_1279(next) * c::node<val,p,next>&v' & c!=null

 ]

*************************************
*******relational assumptions ********
*************************************
[ // BIND
(1;0)H1(c)&c!=null --> c::node<val1,prev1,next1> * HP_1278(prev1) * 
HP_1279(next1)&
true(3,4),
 // PRE_REC
(1;0)HP_1279(d1')&true --> H1(d1')&
true(3,4),
 // POST
(1;0)c::node<val1,p,next1> * G1(next1,c)&true --> G1(c,p)&
true(3,4),
 // POST
(2;0)H1(c)&c=null --> G1(c,p)&
true(3,4)]

Procedure paper_fix$node~node SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H1(c1) ::=  [emp&c1=null; c1::node<val2,DP,next2> * H1(next2)],
 G1(c2,p1) ::=  [emp&c2=null; c2::node<val,p1,next> * G1(next,c2)]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H1(c1) ::= 
 c1::node<val2,DP,next2> * H1(next2)
 or emp&c1=null
 (3,4),
 G1(c2,p1) ::= 
 c2::node<val,p1,next> * G1(next,c2)
 or emp&c2=null
 (3,4)]
*************************************
Stop Omega... 10 invocations 
0 false contexts at: ()

!!! log(small):(0.044467,281)
Total verification time: 0.328729 second(s)
	Time spent in main process: 0.311284 second(s)
	Time spent in child processes: 0.017445 second(s)

