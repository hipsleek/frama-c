
!!!Full processing file "demo/dll-create.ss"
Parsing file "demo/dll-create.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

Checking procedure create_while$dllist... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H1,G1]requires H1(l)&true
 ensures G1(l')&true{,(3,4)=__norm};

*************************************
*******relational assumptions ********
*************************************
[ // BIND
(2;0)H1(l)&true --> l::dllist<val1,prev1,next1> * HP_1309(prev1) * 
HP_1310(next1)&
true(3,4),
 // PRE_REC
(2;0)l'::dllist<v2,v1,l1> * HP_1310(next1) * l1::dllist<val1,l',next1>&
v1=null --> H1(l')&
true(3,4),
 // POST
(1;0)H1(l')&true --> G1(l')&
true(3,4),
 // POST
(2;0)G1(l')&true --> G1(l')&
true(3,4)]

Procedure create_while$dllist SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H1(l2) ::=  [l2::dllist<val,DP1,DP>],
 G1(l3) ::=  [hfalse; l3::dllist<val,DP1,DP>]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H1(l2) ::= l2::dllist<val,DP1,DP>(3,4),
 G1(l3) ::= l3::dllist<val,DP1,DP>(3,4)]
*************************************

!!! formula1: emp&self!=null&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self>0&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true)])
!!! formula1: emp&self!=null&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self>0&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true)])
Checking procedure create$... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ G2]requires emp&true
 ensures G2(res)&true{,(3,4)=__norm};

*************************************
*******relational assumptions ********
*************************************
[ // POST
(1;0)emp&res=null --> G2(res)&
true(3,4),
 // POST
(2;0)res::dllist<val1,DP1,DP2>&DP1=null & DP2=null --> G2(res)&
true(3,4)]

Procedure create$ SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ G2(res1) ::=  [emp&res1=null; res1::dllist<val,DP1,DP>&DP=null & DP1=null]]
*************************************

*************************************
*******relational definition ********
*************************************
[ G2(res1) ::= 
 res1::dllist<val,DP1,DP>&DP=null & DP1=null
 or emp&res1=null
 (3,4)]
*************************************
Stop Omega... 14 invocations 
0 false contexts at: ()

!!! log(small):(0.089203,330)
Total verification time: 0.422538 second(s)
	Time spent in main process: 0.372334 second(s)
	Time spent in child processes: 0.050204 second(s)

