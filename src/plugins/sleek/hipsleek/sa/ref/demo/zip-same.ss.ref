
!!!Full processing file "demo/zip-same.ss"
Parsing file "demo/zip-same.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

!!! formula1: emp&((self=null & p=null) | (self!=null & p!=null))&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&p=null & self=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([p,self], true),
([], self=null & p=null)])
!!! SCall neqs:[]
!!! neqs:[(x,v_int_29_1233),(x,v_node_30_1242)]
Checking procedure zip$node~node... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H,G1]requires H(x,y)&true
 ensures G1(x,y,res)&true{,(3,4)=__norm};

*************************************
*******relational assumptions ********
*************************************
[ // BIND
(2;0)H(x,y)&x!=null --> x::node<val2,next2> * HP_1296(next2,y@NI) * 
HP_1297(y,x@NI)&
true(3,4),
 // BIND
(2;0)HP_1297(y,x@NI)&true --> y::node<val1,next1> * HP_1304(next1,x@NI)&
true(3,4),
 // PRE_REC
(2;0)HP_1296(next2,y@NI) * HP_1304(next1,x@NI)&true --> H(next2,next1)&
true(3,4),
 // POST
(2;1;0)H(res,y)&res=null & res=null & y=null --> G1(x,y,res)&
true(3,4),
 // POST
(2;0)y::node<val1,next1> * G1(next2,next1,v1) * res::node<v2,v1>&
true --> G1(x,y,res)&
true(3,4)]

Procedure zip$node~node SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H(x1,y1) ::=  [emp&y1=null & x1=null; x1::node<val4,next4> * H(next4,next3) * 
y1::node<val3,next3>],
 G1(x2,y2,res1) ::=  [emp&y2=null & res1=null & x2=null; x2::node<v,v1> * y2::node<val1,next1> * 
G1(next,next1,v1)&next=v1 & x2=res1]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H(x1,y1) ::= 
 x1::node<val4,next4> * H(next4,next3) * y1::node<val3,next3>
 or emp&y1=null & x1=null
 (3,4),
 G1(x2,y2,res1) ::= 
 x2::node<v,v1> * y2::node<val1,next1> * G1(next,next1,v1)&next=v1 & x2=res1
 or emp&y2=null & res1=null & x2=null
 (3,4)]
*************************************
Stop Omega... 17 invocations 
0 false contexts at: ()

!!! log(small):(0.083299,374)
Total verification time: 0.394799 second(s)
	Time spent in main process: 0.369447 second(s)
	Time spent in child processes: 0.025352 second(s)

