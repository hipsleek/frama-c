
!!!Full processing file "demo/ll-back-4.ss"
Parsing file "demo/ll-back-4.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

!!! formula1: emp&(self=p | self!=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true),
([], self=p)])
!!! formula1: emp&self!=null&{FLOW,(1,28)=__flow}[]
!!! formula1_under: hfalse&false&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true)])
!!! formula1: emp&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([], true),
([self], true)])
!!! formula1: emp&self!=null&{FLOW,(1,28)=__flow}[]
!!! formula1_under: hfalse&false&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true)])
!!! formula1: emp&(self=null | self!=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true),
([], self=null)])
!!! formula1: emp&(self!=null | self!=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: hfalse&false&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true)])
Checking procedure loop$node... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H1,G1]requires H1(ptr)&true
 ensures G1(ptr',ptr)&
true{,(3,4)=__norm};

*************************************
*******relational assumptions ********
*************************************
[ // PRE_REC
(2;0)ptr'::node<ptr> * H1(ptr)&true --> H1(ptr')&
true(3,4),
 // POST
(1;0)H1(ptr)&true --> G1(ptr',ptr)&
true(3,4),
 // POST
(2;0)G1(ptr',tmp1)&tmp1!=null --> G1(ptr',ptr)&
true(3,4)]

Procedure loop$node SUCCESS.

!!! shape inference for flow:(3,4)
!!! formula1: emp&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([], true),
([self], true)])
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H1(ptr') ::=  [
  ptr'::node<ptr> * H1(ptr)
  or emp&ptr'=DP'
  ],
 G1(ptr',ptr) ::=  [DP_1319(ptr')&ptr'=ptr],
 DP_1319(ptr2) ::=  [emp&ptr2=DP'; ptr2::node<ptr1> * H1(ptr1)]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H1(ptr') ::= 
 ptr'::node<ptr> * H1(ptr)
 or emp&ptr'=DP'
 (3,4),
 G1(ptr',ptr) ::= DP_1319(ptr')&ptr'=ptr(3,4),
 DP_1319(ptr2) ::= 
 ptr2::node<ptr1> * H1(ptr1)
 or emp&ptr2=DP'
 (3,4)]
*************************************
Stop Omega... 54 invocations 
0 false contexts at: ()

!!! log(small):(0.06196,481)
Total verification time: 0.368303 second(s)
	Time spent in main process: 0.337573 second(s)
	Time spent in child processes: 0.03073 second(s)

