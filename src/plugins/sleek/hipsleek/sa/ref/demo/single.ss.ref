
!!!Full processing file "demo/single.ss"
Parsing file "demo/single.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

!!! formula1: emp&((self=t & self!=null) | self!=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&t!=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true),
([], self=t & self!=null)])
!!! formula1: emp&((self=x & self!=null) | (x!=null & self!=null))&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self>0&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self,x], true),
([self], x=self)])
!!! formula1: emp&(self=null | self!=null)&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], true),
([], self=null)])
Checking procedure foo$node... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ H,G]requires H(x)&true
 ensures G(x,res)&true{,(3,4)=__norm};

*************************************
*******relational assumptions ********
*************************************
[ // BIND
(0)H(x)&true --> x::node<val2,next2> * HP_1295(next2)&
true(3,4),
 // PRE_REC
(2;0)HP_1295(next2)&next2!=null --> H(next2)&
true(3,4),
 // BIND
(2;0)G(next2,t1')&next2!=null --> t1'::node<val1,next1> * 
HP_1322(next1,next2@NI) * HP_1323(next2,t1'@NI)&
true(3,4),
 // POST
(1;0)HP_1295(next2) * res::node<val2,next2>&next2=null --> G(x,res)&
true(3,4),
 // POST
(2;0)x::node<val2,next2> * HP_1323(next2,res@NI) * res::node<val1,v1>&
v1=null & next2!=null --> G(x,res)&
true(3,4)]

Procedure foo$node SUCCESS.

!!! shape inference for flow:(3,4)
!!! formula1: emp&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([], true)])
!!! formula1: emp&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([], true)])
!!! formula1: emp&((x1!=null & self!=null) | (x1=self & self!=null))&
{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&x1>0&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], self=x_1382),
([self,x_1382], true)])
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ H(x2) ::=  [x2::node<val,next> * HP_1295(next)&x2!=null],
 G(x1,res1) ::=  [res1::node<val,next>&x1=res1 & next=null; x1::node<val3,next3> * 
HP_1323(next3,res1) * res1::node<val,next>&next3!=null & next=null],
 HP_1295(next4) ::=  [emp&next4=null; next4::node<val,next> * HP_1295(next)],
 HP_1323(next5,res2) ::=  [DP_1368(next,res)|#|x::node<val_43_1293,next_43_1294> * 
res::node<val_48_1320,v_null_type_48_1325>&v_null_type_48_1325=null & 
next_43_1294!=null]]
*************************************

*************************************
*******relational definition ********
*************************************
[ H(x2) ::= x2::node<val,next> * HP_1295(next)&x2!=null(3,4),
 G(x1,res1) ::= 
 x1::node<val3,next3> * HP_1323(next3,res1) * res1::node<val,next>&
 next3!=null & next=null
 or res1::node<val,next>&x1=res1 & next=null
 (3,4),
 HP_1295(next4) ::= 
 next4::node<val,next> * HP_1295(next)
 or emp&next4=null
 (3,4),
 HP_1323(next5,res2) |#| x::node<val_43_1293,next_43_1294> * 
  res::node<val_48_1320,v_null_type_48_1325>&v_null_type_48_1325=null & 
  next_43_1294!=null ::= DP_1368(next,res)(3,4)]
*************************************
Stop Omega... 42 invocations 
0 false contexts at: ()

!!! log(small):(0.567189,516)
Total verification time: 0.4066 second(s)
	Time spent in main process: 0.370952 second(s)
	Time spent in child processes: 0.035648 second(s)

