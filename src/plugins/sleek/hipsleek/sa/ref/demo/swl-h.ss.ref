
!!!Full processing file "demo/swl-h.ss"
Parsing file "demo/swl-h.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

!!! formula1: emp&(self=s | (self!=s & self=null) | (self!=s & self!=null))&
{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&(self=s | (self!=s & self=null))&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], (s<self | self<s)),
([], ((self=0 & s<=(0-1)) | (self=0 & 1<=s) | self=s))])
!!! formula1: emp&((self=null & self!=s) | (self!=s & self!=null))&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&self!=s & self=null&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], (s<self | self<s)),
([], self=null & self!=s)])
!!! formula1: emp&(self=p | (self!=p & self!=null))&{FLOW,(1,28)=__flow}[]
!!! formula1_under: emp&{FLOW,(1,28)=__flow}[]
!!! baga_over(unfolded):Some([([self], (p<self | self<p)),
([], self=p)])
!!! SCall neqs:[(cur,prev)]
!!! neqs:[(cur,prev)]
Checking procedure lscan$node~node~node... 


******************************
   ******* SPECIFICATION ********
******************************
 infer[ HP_1304,HP_1305,G1]requires HP_1304(cur,sent@NI) * 
HP_1305(prev,sent@NI)&true
 ensures G1(cur',prev',sent@NI)&
true{,(3,4)=__norm};

*************************************
*******relational assumptions ********
*************************************
[ // BIND
(0)HP_1304(cur,sent@NI)&true --> cur::node<val1,next1> * 
HP_1310(next1,sent@NI)&
true(3,4),
 // PRE_REC
(1;2;0)HP_1305(prev,sent@NI) * cur'::node<val1,prev>&
true --> HP_1304(cur',sent@NI)&
true(3,4),
 // PRE_REC
(1;2;0)HP_1310(next1,sent@NI)&next1=null & 
next1!=sent --> HP_1305(next1,sent@NI)&
true(3,4),
 // PRE_REC
(2;2;0)HP_1310(cur',sent@NI)&cur'!=null & 
cur'!=sent --> HP_1304(cur',sent@NI)&
true(3,4),
 // PRE_REC
(2;2;0)HP_1305(prev,sent@NI) * cur1::node<val1,prev>&
true --> HP_1305(cur1,sent@NI)&
true(3,4),
 // POST
(1;0)prev'::node<val1,prev> * HP_1305(prev,cur'@NI) * HP_1310(cur',cur'@NI)&
true --> G1(cur',prev',sent@NI)&
true(3,4),
 // POST
(1;2;0)G1(cur',prev',sent@NI)&true --> G1(cur',prev',sent@NI)&
true(3,4)]

Procedure lscan$node~node~node SUCCESS.

!!! shape inference for flow:(3,4)
*********************************************************
*******relational definition (flow= (3,4))********
*********************************************************
[ HP_1304(cur2,sent1) ::=  [cur2::node<val,next> * HP_1310(next,sent1)&cur2!=sent1 & cur2!=null],
 HP_1305(next,sent) ::=  [
  emp&next!=sent & next=null
  or next::node<val,next2> * HP_1310(next2,sent)&next!=sent
  ],
 G1(cur3,prev1,sent2) ::=  [hfalse; prev1::node<val,prev> * prev::node<val,next3> * 
HP_1310(next3,cur3)&prev!=cur3 & sent2=cur3; prev1::node<val,prev>&
prev=null & prev!=cur3 & sent2=cur3],
 HP_1310(cur4,sent3) ::=  [emp&cur4=null & cur4!=sent3; emp&sent3=cur4; cur4::node<val,next> * 
HP_1310(next,sent3)&cur4!=sent3]]
*************************************

*************************************
*******relational definition ********
*************************************
[ HP_1304(cur2,sent1) ::= cur2::node<val,next> * HP_1310(next,sent1)&cur2!=sent1 & cur2!=null(3,4),
 HP_1305(next,sent) ::= 
 emp&next!=sent & next=null
 or next::node<val,next2> * HP_1310(next2,sent)&next!=sent
 (3,4),
 G1(cur3,prev1,sent2) ::= 
 prev1::node<val,prev> * prev::node<val,next3> * HP_1310(next3,cur3)&
 prev!=cur3 & sent2=cur3
 or prev1::node<val,prev>&prev=null & prev!=cur3 & sent2=cur3
 (3,4),
 H1(cur,sent) ::= HP_1304(cur,sent),
 H2(prev,sent) ::= HP_1305(prev,sent),
 HP_1310(cur4,sent3) ::= 
 emp&sent3=cur4
 or cur4::node<val,next> * HP_1310(next,sent3)&cur4!=sent3
 or emp&cur4=null & cur4!=sent3
 (3,4)]
*************************************
Stop Omega... 28 invocations 
0 false contexts at: ()

!!! log(small):(0.118476,420)
Total verification time: 0.476142 second(s)
	Time spent in main process: 0.433612 second(s)
	Time spent in child processes: 0.04253 second(s)

