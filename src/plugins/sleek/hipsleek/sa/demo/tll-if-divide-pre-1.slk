// simpler tll working example

data node{
	node left;
	node right;
}.


HeapPred H(node a).
HeapPred H1(node a).
HeapPred H2(node a).
PostPred G(node a, node c).
HeapPred H_2(node a).
HeapPred H_3(node a).
HeapPred H_2a(node a).
HeapPred H_3a(node a).
HeapPred H_3b(node a).

Declare_Unknown (1;0) [H_2].

relAssume (0)
 H(x) --> x::node<left_25_800,right_25_801>@M * H_2(left_25_800) 
  * H_3(right_25_801).

relAssume (2;0)
 H(x) --> H2(x).

relAssume (2;0)
 H_3(x) --> H_3a(x).

relAssume (2;0)
 H_2(x) --> H_2a(x).

relAssume (2;0)
 H_3a(right_25_801)&right_25_801!=null --> H2(right_25_801).

relAssume (2;0)
 H_2a(left_25_800) --> H2(left_25_800).

relAssume (1;0)
 H_3(x) --> H_3b(x).
relAssume (1;0)
 H_3b(right_25_801)&right_25_801=null --> emp.


 shape_divide [H,H_2,H_3][].
//shape_divide [H][].

/*
# tll-if-divide-pre.slk

Above generates:

path: (2,0)
[HP_RELDEFN H_3:  H_3(right_25_34) ::=  H(right_25_34)&right_25_34!=null,
HP_RELDEFN H_2:  H_2(left_25_35) ::=  H(left_25_35),
HP_RELDEFN H:  H(x_36) ::=  x_36::node<left_25_800,right_25_801>@M * H(left_25_800) * H(right_25_801)&
right_25_801!=null]
UNKNOWN: []

path: (1,0)
[HP_RELDEFN H:  H(x_37) ::=  x_37::node<left_25_800,right_25_801>@M * H_2(left_25_800)&right_25_801=null,
HP_RELDEFN H_3:  H_3(right_25_38) ::=  emp&right_25_38=null]
UNKNOWN: [(H_2,[a])]

Can we make it consistent with the format of conquer
so that it is easier to do cut-paste.

relDefn (1;0)
 H_3(right_25_31) <->  right_25_31=null.
 H(x_27) <->  x_27::node<left_25_800,right_25_801>@M 
                * H_2(left_25_800)&right_25_801=null.
 H_2(x) <-> __UNKNOWN
relDefn (2;0)
 H_3(right_25_31) <->  H(right_25_31)&right_25_31!=null.
 H_2(left_25_32)  <->  H(left_25_32).
 H(x_33) <->  x_33::node<left_25_800,right_25_801>@M 
   * H(left_25_800) * H(right_25_801) & right_25_801!=null.

=======================



I thought the splitting is for relational assumptions only.
It seems you also perform shape_inference. Maybe it is OK too.

*************************************
*******relational definition ********
*************************************
path: (2,0)
[HP_RELDEFN H_3:  H_3(right_25_34) ::=  H(right_25_34)&right_25_34!=null,
HP_RELDEFN H_2:  H_2(left_25_35) ::=  H(left_25_35),
HP_RELDEFN H:  H(x_36) ::=  x_36::node<left_25_800,right_25_801>@M * H(left_25_800) * H(right_25_801)&
right_25_801!=null]
UNKNOWN: []
*************************************

*************************************
*******relational definition ********
*************************************
path: (1,0)
[HP_RELDEFN H:  H(x_37) ::=  x_37::node<left_25_800,right_25_801>@M * H_2(left_25_800)&right_25_801=null,
HP_RELDEFN H_3:  H_3(right_25_38) ::=  emp&right_25_38=null]
UNKNOWN: [(H_2,[a])]
*************************************

OUTPUT
======
relAssume (1.2)
 H(x) --> x::node<left_25_800,right_25_801>@M * H_2(left_25_800) 
  * H_3(right_25_801).
 H_3(right_25_801)&right_25_801!=null --> H(right_25_801).
 H_2(left_25_800) --> H(left_25_800).
 G(right_25_801,v_node_31_823) * G(left_25_800,v_node_32_833) * 
  x::node<v_node_32_833,v_node_31_823>@M&right_25_801!=null & 
  res=x --> G(x,res).

relAssume (1.1)
 H(x) --> x::node<left_25_800,right_25_801>@M * H_2(left_25_800) 
  * H_3(right_25_801).
 H_3(right_25_801)&right_25_801=null --> emp.
 H_2(x) ::= NONE
 H_2(left_25_800) * x::node<left_25_800,right_25_801>@M&res=x & 
  right_25_801=null --> G(x,res).

================




=========

 //(1)
 H(x) --> x::node<left_25_800,right_25_801>@M * H_2(left_25_800) 
  * H_3(right_25_801).
 //(2)
 H_3(right_25_801)&right_25_801!=null --> H(right_25_801).
 //(3)
 H_2(left_25_800) --> H(left_25_800).
 //(4)
 G(right_25_801,v_node_31_823) * G(left_25_800,v_node_32_833) * 
  x::node<v_node_32_833,v_node_31_823>@M&right_25_801!=null & 
  res=x --> G(x,res).
 //(5)
 H_3(right_25_801)&right_25_801=null --> emp.
 //(6)
 H_2(left_25_800) * x::node<left_25_800,right_25_801>@M&res=x & 
  right_25_801=null --> G(x,res).



*/
