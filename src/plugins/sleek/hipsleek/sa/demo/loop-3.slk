data node{
	node next;
}.

HeapPred P(node a).
HeapPred G(node a).
HeapPred H_2(node a).

relAssume
 P(x) --> x::node<next_1> * H_2(next_1).

relAssume
 x::node<next_1> * H_2(next_1)  --> P(x).

shape_infer [P,H_2][].

/*
loop-3.ss
=========

How should we handle pre-obligation of the form:
 x::node<next_1> * H_2(next_1)  --> P(x).

It has a complex LHS that has to be delayed until we have 
obtained a pre-pred defn for P. Hence, the steps are:

Step 1
======
Process P(..)
 P(x) --> x::node<next_1> * H_2(next_1).
Simplify and confirm as a defn:
 P(x) <-> x::node<next_1> * H_2(next_1).

Step 2
======
 x::node<next_1> * H_2(next_1)  --> P(x).
Use the Defn of P(..) & pass to sleek:
 x::node<next_1> * H_2(next_1)  |- P(x).
which succeds. Hence, no extra things have
been derived for H_2.

Thus, we simply have:
 P(x) --> x::node<next_1> * H_2(next_1).
where H_2 is dangling.


*/

