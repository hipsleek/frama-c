data node {
 int key;
 node left;
 node right;
}.


HeapPred H(node a).
HeapPred G(node a).
HeapPred HP_0(node a).
HeapPred HP_1(node a).
HeapPred HP_4(node a).
HeapPred HP_5(node a).

infer [H,G,HP_4,HP_5] 
HP_4(left_39_832) * HP_5(right_39_833) * 
x::node<key_39_831,left_39_832,right_39_833>@M
& left_39_832=null & v_bool_39_812' 
 |-  G(x). 
print residue.

infer [H,G,HP_4,HP_5] 
HP_4(left_39_832) * HP_5(right_39_833) * 
x::node<key_39_831,null,right_39_833>@M
& left_39_832=null & v_bool_39_812' 
 |-  G(x). 
print residue.

/*
# heap-bug-3.slk

Generated:
 <1>emp&left_39_832=null & v_bool_39_812' & left_39_832=null & v_bool_39_812'&{FLOW,(19,20)=__norm}[]
 inferred hprel: [HP_4(left_39_832) * HP_5(right_39_833) * 
                   x::node<key_39_831,left_39_832,right_39_833>@M&
                   left_39_832=null --> G(x)&true]

Why a spurious:

 HP_4(left_39_832)&left_39_832=null --> emp&true]

for hip --en-sleek-logging-txt heapify.ss? Is it due to
split? If so, we need to refine split.

=========

 id: 112; caller: []; line: 28; classic: false; kind: POST; hec_num: 5; evars: []; infer_vars: [H,G,HP_834,HP_835]; c_heap: emp
 checkentail 
HP_4(left_39_832) * HP_5(right_39_833) * 
x::node<key_39_831,left_39_832,right_39_833>@M[Orig]&left_39_832=null & 
v_bool_39_812' & left_39_832=null & v_bool_39_812'&{FLOW,(22,23)=__norm}[]
 |-  G(x)&true&{FLOW,(22,23)=__norm}[]. 
hprel_ass: [ HP_5(right_39_833) * x::node<key_39_831,left_39_832,right_39_833>@M&
  left_39_832=null --> G(x)&true,
 HP_4(left_39_832)&left_39_832=null --> emp&true]

res:  [
  emp&v_bool_39_812' & v_bool_39_812'&{FLOW,(22,23)=__norm}[]
  ]


*/