data node{
	int val;
	node next;
}.

HeapPred H_3(node prev, node@NI cur, node@NI sent).
HeapPred H_2(node next_1, node@NI prev, node@NI sent).
HeapPred G(node a, node ra, node b, node rb, node@NI c).

pred H<prev,sent> ==
  self::node<_,n1> * H_2(n1,prev,sent) * H_3(prev,self,sent)
inv self!=null.

relAssume
   H_2(next_1,prev,sent)&next_1!=sent & 
       next_1!=null --> next_1::node<Anon_36,n1_37>@M * 
       H_2(n1_37,_,sent).

relAssume
   H_2(cur',prev,sent) & cur'=sent --> emp.

shape_infer [H_2][].

/*
relAssume
   H_3(prev,cur,sent) * cur::node<Anon_11,prev>@M&
       next_1!=sent & next_1!=null --> H_3(cur,next_1,sent).

relAssume
   H_3(prev,cur,sent) --> H_2(prev,null,sent).

relAssume
   emp&prev'=null --> H_3(prev',cur_30,sent_31).
*/


/*
Outcome from pre-obligations:

 <1>emp&next_1!=sent & next_1!=null & Anon_12=Anon_36 & n1=n1_37 & n1=n1_37&{FLOW,(19,20)=__norm}[]
 inferred hprel: [

   H_2(next_1,prev,sent)&next_1!=sent & 
       next_1!=null --> next_1::node<Anon_36,n1_37>@M * 
       HP_38(n1_37,prev,sent).

   HP_38(n1_37,prev,sent)&
       |#| cur::node<Anon_11,prev>@M --> H_2(n1_37,cur,sent).

   H_3(prev,cur,sent) * cur::node<Anon_11,prev>@M&
       next_1!=sent & next_1!=null --> H_3(cur,next_1,sent).

---
   H_3(prev,cur,sent)&
         prev'=null --> H_2(prev,prev',sent).

   emp&prev'=null --> H_3(prev',cur_30,sent_31).

-----

   H_2(cur',prev,sent) & cur'=sent --> emp.

Confirm:
========
   HP_38(n1_37,prev,sent)&
       |#| cur::node<Anon_11,prev>@M --> H_2(n1_37,cur,sent).

unfold HP_38:

   H_2(next_1,prev,sent)&next_1!=sent & 
       next_1!=null --> next_1::node<Anon_36,n1_37>@M * 
       H_2(n1_37,_,sent).


*/



