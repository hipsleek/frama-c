data tree {
  node children;
}.

data node {
  tree child;
  node sibling;
}.

/*
ptree<> ==
  self::tree<c>*c::sll<>;

sll<> ==
  self=null
or  self::node<c,n>*c::ptree<> * n::sll<>;
*/

HeapPred H(tree a).
PostPred G(tree a).
HeapPred H2(node a).
PostPred G2(node a).
HeapPred H_7(tree a).
HeapPred H_8(node a).
HeapPred H_9(node a).

Declare_Unknown [H_9].

relAssume
 H(t)&t!=null --> t::tree<children_30_986>@M * H_9(children_30_986).

relAssume
 H(t) --> emp&t!=null. // this is just pre-obligation

shape_infer [H,H_9][].


/*
# multi-tree-2b.slk

GOT:
===

[ H(t_29) ::= 
 t_29::tree<children_30_986>@M * H_9(children_30_986)
 or emp&t_29!=null,
 H_9(a) ::= NONE]

BUT this is UNSOUND
===================

ALGO
====

 H(t)&t!=null --> t::tree<children_30_986>@M * H_9(children_30_986).

 H(t)& true--> emp&t!=null. 


Generate:

H(t)&t!=null & false --> t::tree<children_30_986>@M * H_9(children_30_986).
H(t)&true & not(t!=null) --> t!=null
H(t)& t!=null --> t::tree<children_30_986>@M * H_9(children_30_986)/\t!=null.

Simplify:

H(t) & t=null --> t!=null 
H(t)& t!=null --> t::tree<children_30_986>@M * H_9(children_30_986) & t!=null

Combine into disjunct
=====================
H(t) --> false \/ t::tree<children_30_986>@M * H_9(children_30_986) & t!=null
  -->  t::tree<children_30_986>@M * H_9(children_30_986) & t!=null


Comfirm equality
================
H(t) <-> t::tree<children_30_986>@M * H_9(children_30_986) & t!=null



*/


