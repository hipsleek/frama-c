data node{
	node next;
	node prev;
}.


PostPred G(node a,node b).
HeapPred H(node a,node b).
HeapPred HP_9(node a,node@NI b).
HeapPred HP_0(node a,node@NI b).
HeapPred HP_1(node a,node@NI b).
HeapPred HP_2(node a,node@NI b).
HeapPred HP_3(node a,node@NI b).

Declare_Unknown [HP_2].

Declare_Unknown [HP_3].
Declare_Unknown [HP_0].

relAssume 
  H(x,y)&true --> x::node<next_15_797,prev_15_798>@M * 
  HP_9(next_15_797,y) * HP_0(prev_15_798,y) * HP_1(y,x).

relAssume 
 HP_9(next_15_797,y) * HP_1(y,x)&
  next_15_797!=null --> H(next_15_797,y).

relAssume 
 HP_9(next_15_797,y) & next_15_797=null --> emp.

relAssume 
 HP_1(y,x) --> y::node<next_21_820,prev_21_821>@M * 
  HP_2(next_21_820,x) * HP_3(prev_21_821,x).

shape_infer [H,HP_1,HP_9][].

/*
# dll-pap-1.slk

PROBLEM
=======
The processing message of H_1, then H1 
are preinted.

How come the processing message for H_9 is
not printed??

!!! >>>>>> step 1: find dangling ptrs, link pre and post-preds dangling preds<<<<<<
!!! >>>>>> step 2: split constraints based on pre and post-preds<<<<<<
!!! *** NO SPLITTING DONE ***
!!! >>>>>> step 3: apply transitive implication<<<<<<
!!! >>>>>> step 3a: simplification <<<<<<
!!!  synthesize: [HP_1]
!!! >>>>>> step 3b: do apply_transitive_imp <<<<<<
!!! >>>>>> step 3a: simplification <<<<<<
!!!  synthesize: [H]
!!! >>>>>> step 3b: do apply_transitive_imp <<<<<<
!!! >>>>>> pre-predicates<<<<<<
!!! >>>>>> step pre-4: remove unused predicates<<<<<<
!!! >>>>>> pre-predicates: step pre-5: group & simpl impl<<<<<<
!!! >>>>>> pre-predicates: step pre-6: combine<<<<<<
!!! >>>>>> pre-predicates: step pre-7: remove redundant x!=null<<<<<<
!!! >>>>>> pre-predicates: step pre-8: strengthen<<<<<<
!!! >>>>>> step 6: generalization <<<<<<
!!! >>>>>> post-predicates<<<<<<
!!! >>>>>> step post-4: step remove unused predicates<<<<<<
!!! >>>>>> post-predicates: step post-5: remove redundant x!=null : not implemented yet<<<<<<
!!! >>>>>> post-predicates: step post-61: weaken<<<<<<




Correct order for processing : HP_1; H; HP_9

GOT
===
 H(x_59,y_60) ::= x_59::node<next_15_797,prev_15_798>@M 
   * HP_9(next_15_797,y_60) * HP_0(prev_15_798,y_60) * HP_1(y_60,x_59),
 HP_1(y_61,x_62) ::= y_61::node<next_21_820,prev_21_821>@M 
    * HP_2(next_21_820,x_62) * HP_3(prev_21_821,x_62),
 HP_9(next_15_63,y_64) ::= emp&next_15_63=null,
 HP_2(a,b) ::= NONE,

SEE ALGO BELOW on how to transform complex LHS for
H_9 by ridding HP_1.

NOTE : H, HP_1 should be confirmed before H_9.
 When processing H_9, we may use defns of H,HP_1 to 
 help us simplify


GOT which is incorrect
===
H(x_85,y_86) ::=  
   y_86::node<next_21_820,prev_21_821>@M * HP_2(next_21_820,x_85) * 
   HP_3(prev_21_821,x_85) * x_85::node<next_15_66,prev_15_67>@M * 
   HP_0(prev_15_67,y_86)&next_15_66=null,
  // need to refrain from unrolling HP_9 & HP_1 unless strictly needed

HP_1(y_87,x_88) ::=  y_87::node<next_21_820,prev_21_821>@M * 
   HP_2(next_21_820,x_88) * HP_3(prev_21_821,x_88),
HP_9(next_15_89,y_90) ::=  emp&next_15_89=null,
  // defn for HP_9 is incorrect


POSSIBLE ALGORITM
=================

Confirm Equality first:
  H(x,y)&true <--> x::node<next_15_797,prev_15_798>@M * 
      HP_9(next_15_797,y) * HP_0(prev_15_798,y) * HP_1(y,x).
  HP_1(y,x) <--> y::node<next_21_820,prev_21_821>@M * 
     HP_2(next_21_820,x) * HP_3(prev_21_821,x).

Trasform HP_9 with complex LHS
  HP_9(n,y) * HP_1(y,x)&
    n!=null --> H(n,y).
  //replace H(..)
  HP_9(n,y) * HP_1(y,x) & n!=null --> 
     n::node<next_15_797,prev_15_798>@M * 
      HP_9(next_15_797,y) * HP_0(prev_15_798,y) * HP_1(y,n).
  Drop HP_1(y,_) on both sides assummig that parameter is useless on x.
  //abstract commom HP_1(..)
  // this can be confirmed by the definition of HP_1 itself
  // where x is not accessed
  HP_9(n,y) & n!=null --> 
     n::node<nexts_15_797,prev_15_798>@M * 
      HP_9(next_15_797,y) * HP_0(prev_15_798,y).
  // add missing base-case (missed by post-cond proving)
  HP_9(n,y) & n=null --> emp
  // Can now transform HP_9 into ll list.

When to unfold? Only if it helps make it self-recursive
and during the transformation of implication:
  H(..) = ...G(..)..

If we have implication:
  G(..) & pure --> ..H(..)...

To make it recursive, we unfold:
  G(..) & pure --> ..[..G(..)..]...



*/
