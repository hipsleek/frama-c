data node{
	node next;
	node prev;
}.


HeapPred H(node a,node b).
HeapPred H_0(node a,node@NI b).
HeapPred H_1(node a,node@NI b).
HeapPred H_2(node a,node@NI b).
HeapPred H_3(node a,node@NI b).
HeapPred H_9(node a,node@NI b).
HeapPred G(node a,node b).

infer_exact [H,G,H_9,H_0,H_1,H_2,H_3]
H_9(next_15_797,y) * H_0(prev_15_798,y) * 
x::node<y,prev_15_798>@M * H_2(next_21_820,x) * 
H_3(prev_21_821,x) * y::node<next_21_820,x>
&next_15_797=null 
//& !(v_bool_15_778') & next_15_797=null & !(v_bool_15_778') 
& next_15_797=next_20_817 & prev_21_821=prev_21_824
 |-  G(x,y).
print residue.

/*
# class-dll-app.slk
# hip dll-append_paper.ss --en-sleek-logging --classic

GOOD
====
 <1>emp&next_15_797=null & next_15_797=next_20_817 & prev_21_821=prev_21_824&{FLOW,(19,20)=__norm}[]
 inferred hprel: [H_0(prev_15_798,y@NI) * x::node<y,prev_15_798>@M * 
                   H_2(next_21_820,x@NI) * 
                   y::node<next_21_820,x>@M --> G(x,y); 
                  H_9(next_15_797,y@NI)&next_15_797=null --> emp; 
                  H_3(prev_21_821,x@NI) --> emp]

=============================
hip dll-append_paper.ss --en-sleek-logging --classic

id: 23; caller: []; line: 12; classic: true; kind: POST; hec_num: 5; evars: []; 
infer [H,G,H_9,H_0,H_1,H_2,H_3]
H_9(next_15_797,y) * H_0(prev_15_798,y) * 
x::node<y,prev_15_798>@M * H_2(next_21_820,x) * 
H_3(prev_21_821,x) * y::node<next_21_820,x>
&next_15_797=null & 
!(v_bool_15_778') & next_15_797=null & !(v_bool_15_778') & 
next_15_797=next_20_817 & prev_21_821=prev_21_824
 |-  G(x,y).
 hprel_ass: [ H_0(prev_15_798,y) * x::node<y,prev_15_798>@M * H_2(next_21_820,x) * 
  y::node<next_21_820,x>@M --> G(x,y)]
res:  [
  emp&next_15_797=null & !(v_bool_15_778') & next_15_797=null & !(v_bool_15_778') & next_15_797=next_20_817 & prev_21_821=prev_21_824&{FLOW,(22,23)=__norm}[]
  ]


*/