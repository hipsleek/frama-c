# tll-if-divide-pre.slk

We need to mark relational assumptions based on
the conditional branches, as follows:

 relAssume (1)
  H(x) --> x::node<left_25_800,right_25_801>@M * H_2(left_25_800) 
   * H_3(right_25_801).
 relAssume (1.2)
  H_3(right_25_801)&right_25_801!=null --> H(right_25_801).
 relAssume (1.2)
  H_2(left_25_800) --> H(left_25_800).
 relAssume (1.1)
  H_3(right_25_801)&right_25_801=null --> emp.

The command shape_divide [H,H_2,H_3][] will divide
the assumptions into several specialised branches:


OUTPUT
======
relAssume (1.2)
 H(x) --> x::node<left_25_800,right_25_801>@M * H_2(left_25_800) 
  * H_3(right_25_801).
 H_3(right_25_801)&right_25_801!=null --> H(right_25_801).
 H_2(left_25_800) --> H(left_25_800).

relAssume (1.1)
 H(x) --> x::node<left_25_800,right_25_801>@M * H_2(left_25_800) 
  * H_3(right_25_801).
 H_3(right_25_801)&right_25_801=null --> emp.
 H_2(x) ::= NONE // special for UNKNOWN

which are relational assumptions under the different branches.

# tll-if-conquer-pre.slk

Later, when we may obtain solutions for different
branches, as follows:

relDefn (1.2)
 H_3(right_25_31) ::=  H(right_25_31)&right_25_31!=null.

relDefn (1.2)
 H_2(left_25_32)  ::=  H(left_25_32).

relDefn (1.2)
 H(x_33) ::=  x_33::node<left_25_800,right_25_801>@M 
   * H(left_25_800) * H(right_25_801) & right_25_801!=null.

relDefn (1.1)
 H(x_27) ::=  x_27::node<left_25_800,right_25_801>@M 
                 * H_2(left_25_800)&right_25_801=null.
relDefn (1.1)
 H_2(a) ::= NONE.


We can combine their answers together in a single definition,
using the command:

 shape_conquer [1.1,1.2].

This should result in:

 H(x_27) ::=  x_27::node<left_25_800,right_25_801>@M 
            * H_2{1.1}(left_25_800)&right_25_801=null
      or x_33::node<left_25_800,right_25_801>@M 
       * H(left_25_800) * H(right_25_801) & right_25_801!=null
 H_2{1.1}(a) ::= NONE
 H_2{1.2}(a) ::= H(a)
 H_3(right_25_31) ::=  H(right_25_31)&right_25_31!=null
    or right_25_31=null

If we filter out the unused predicate using --eup, we 
should obtain:

 H(x_27) ::=  x_27::node<left_25_800,right_25_801>@M 
            * H_2{1.1}(left_25_800)&right_25_801=null
      or x_33::node<left_25_800,right_25_801>@M 
       * H(left_25_800) * H(right_25_801) & right_25_801!=null
 H_2{1.1}(a) ::= NONE

