data tree {
    int val; 
    node children;
    }.
    
data node {
    tree child; 
    node prev; 
    node next; 
    tree parent;
    }.

HeapPred H1(tree a).
PostPred G1(tree a).
HeapPred H2(node a,node@NI c,tree@NI b).
HeapPred H_1(tree a,node@NI c,tree@NI b).
HeapPred H_2(node a,node@NI c,tree@NI b).
HeapPred H_3(node a,node@NI c,tree@NI b).
HeapPred H_4(tree a,node@NI c,tree@NI b).
HeapPred H_5(tree a).
PostPred G2(node a,node@NI c,tree@NI b).
Declare_Unknown [H_2,H_4].


relAssume
 H2(l,prv,par)& l!=null --> l::node<child_07,prev_08,next_09,parent_10>@M * 
  H_1(child_07,prv,par) * H_2(prev_08,prv,par) * H_3(next_09,prv,par) * H_4(parent_10,prv,par).

relAssume
 H2(l,prv,par)&l=null --> emp.

relAssume
 H_3(next_09,prv,par)&par=par' & 
  prev_08=prv --> H2(next_09,l,par). // what should l be?

relAssume
 H_1(child_07,prv,par)&par=par' & prev_08=prv --> H1(child_07).

relAssume
 H1(t) --> t::tree<val_83,children_84>@M * H_5(children_84).

relAssume
 H_5(children_84)&
  children_84!=null --> H2(children_84,n_38',t).
// what are n_39' and t?

relAssume
 H_5(children_84) &
  children_84=null --> emp.


shape_infer [H1,H2,H_1,H_2,H_3,H_4,H_5][].

/*
relAssume
 H_2(prev_08,prv,par) --> emp&
  forall(parent_10:((par!=parent_10 | prv>=prev_08)) & 
  ((par!=parent_10 | prev_08>=prv))).

relAssume
 H_2(prev_08,prv,par) --> emp&
  forall(parent_10:((prev_08!=prv | par>=parent_10)) & 
  ((prev_08!=prv | parent_10>=par))).

relAssume
 H_2(prev_08,prv,par) --> emp&
  forall(parent_10:((par>=parent_10 | prv>=prev_08)) & 
  ((parent_10>=par | prv>=prev_08)) & ((par>=parent_10 | 
  prev_08>=prv)) & ((parent_10>=par | prev_08>=prv))).

 H2(l,prv,par)&l=null --> G2(l,prv,par).

 H_5(children_84) * t::tree<val_83,children_84>@M&
  children_84=null --> G1(t).

 H_2(prev_08,prv,par) * 
  H_4(parent_10,prv,par) * 
  l::node<child_07,prev_08,next_09,parent_10>@M * 
  G2(next_09,l,par) * G1(child_07)&par=parent_10 & 
  prev_08=prv --> G2(l,prv,par).

 t::tree<val_83,children_84>@M * 
  G2(children_84,n_1105,t)&children_84!=null & 
  n_1105=null --> G1(t).

*/

/*
# mcf-1.slk

ERROR: at mcf-1.slk_66:47_66:58 
Message: gather_type_info_var : unexpected exceptionInvalid_argument("[ocamlgraph] iter_succ")
 Fatal error: exception Failure("gather_type_info_var : unexpected exceptionInvalid_argument("[ocamlgraph] iter_succ")")

Not sure if this is due to wrong type declaration of heap predicate.
I wonder if we can do a dump of unknown heap predicate defined
and generated at the start of shape inference (in hip) which we could 
later cut for sleek. This would reduce tedium for preparing sleek file.

HeapPred H1(tree a).
PostPred G1(tree a).
HeapPred H2(node a,node@NI c,tree@NI b).
HeapPred H_1(tree a,node@NI c,tree@NI b).
HeapPred H_2(node a,node@NI c,tree@NI b).
HeapPred H_3(node a,node@NI c,tree@NI b).
HeapPred H_4(tree a,node@NI c,tree@NI b).
HeapPred H_5(tree a).
PostPred G2(node a,node@NI c,tree@NI b).

Also, after we have have analysed the unknowns, can we
also output the statement (in hip)

Declare_Unknown [H_2,H_4].

*/
