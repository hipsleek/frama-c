data node{
 int val;
 node prev;
 node next;
}.


HeapPred H(node a,node b).
HeapPred HP_1(node a,node b).
HeapPred HP_2(node a,node b).
HeapPred G(node a, node a).

relAssume  H // (1)
 H(x,y) --> x::node<_,prev, next> * HP_2(next,y).
relAssume  HP_2 // (2)
  HP_2(next,y) & next!=null --> H(next,y).
relAssume  HP_2 // (3)
  HP_2(next,y) & next=null --> emp.

shape_infer [H,HP_2][].

/*
Two problems above
  (i) no dangling predicate used but
      we still have two XPURE(..) below
 (ii) why did we have a new HP_68 pred?
      Can we not use just re-use HP_2 itself.

[ H(x_64,y_65) ::= x_64::node<Anon_11,prev,next>@M * (HP_2(next,y_65))
    & XPURE(H(y_65)),
      ^^^^^^^^^^^^^^
 HP_2(next_66,y_67) ::= HP_68(next_66,y_67)& XPURE(H(y_67)),
                                             ^^^^^^^^^^^^^^
 HP_68(next_66,y_67) ::= 
 emp&next_66=null
 or next_66::node<Anon_11,prev,next>@M * (HP_68(next,y_67))&true
 ]

Solution for reusing HP_2 itself
================================
  H(x,y) --> x::node<_,prev, next> * HP_2(next,y).  (1)
  HP_2(next,y) & next!=null --> H(next,y).          (2)
  HP_2(next,y) & next=null --> emp.                 (3)
From (2), unfold H
  HP_2(next,y) & next!=null --> next::node<_,prev, nn> * HP_2(nn,y) (2a)
From (2a,3), derive below:
  HP_2(next,y) --> next=null -> emp.                 (3a)
  HP_2(next,y) --> next!=null -> next::node<_,prev, nn> * HP_2(nn,y) (2b)
From (3a,2b,3), derive below:
  HP_2(next,y) --> next=null -> emp.                 
           /\ next!=null -> next::node<_,prev, nn> * HP_2(nn,y) (2c)
  HP_2(next,y) --> next=null & emp.                 
           \/ next::node<_,prev, nn> * HP_2(nn,y) & next!=null (2d)
  HP_2(next,y) <-> next=null & emp.                 
           \/ next::node<_,prev, nn> * HP_2(nn,y) & next!=null (2d)
*/