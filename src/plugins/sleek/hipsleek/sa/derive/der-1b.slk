
data node {
	int val@VAL;
	node next@REC;
}.

data node2 {
	int val@VAL; 
	node2 prev@REC; 
	node2 next@REC; 
}.

pred ll<> == self=null
  or self::node<_,p> * p::ll<>
inv true.

pred llne<> == self::node<_,null>
  or self::node<_,p> * p::llne<>
inv self!=null.

pred tree<> == self=null
  or self::node2<_,p,q> * p::tree<> * q::tree<>
inv true.

pred_extn size[R]<n> ==
      n=0 // base case
   or R::size<m> & n=1+m 
   inv n>=0.

pred_extn pos_sum[R,V]<s> ==
      s=0 // base case
   or R::pos_sum<s2> & s=V+s2 & V>=0 
   inv s>=0.

pred llN<n> == extends ll<> with size[REC]<n> .

pred llNne<n> == extends llne<> with size[REC]<n> .

pred treeN<n> == extends tree<> with size[REC]<n> .

pred llNPSum<n,s> == extends llN<n> with pos_sum[VAL,REC]<s> .











