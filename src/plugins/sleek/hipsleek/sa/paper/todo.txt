==================================================================
# tll-guard.slk: FIXED
  (from tll.ss)

infer [H,G,H_4,H_5,H_6]
 H_4(left_1,t) * H_6(next_3,t) *  x::node<left_1,right_2,next_3>@M * 
 G(right_2,l_47',t')&x=x' & t=t' 
  & right_2!=null & !(v_bool_2') 
  //& right_2!=null & !(v_bool_2') & right_2=right_2 
  & t=t' & left_1=v_node_0'
  |-  H(v_node_0',l_47').

print residue.

 inferred hprel: [
  H_4(v_node_0',t'@NI) |#| x::node<v_node_0',right_2,next_3>@M 
    --> H(v_node_0',l_47'@NI)]

PROBLEM
=======
Heap guard here is useless, as it does not serve
to instantiate l_47'. We should drop such useless
heap guards.

ALGO
====
Given U1(vs) |#| G --> U2(ws)

A guard is selected if:
  vars(G) /\ vs != []

A guard is useful if
  vars(G) /\ (ws-vs) != []
==================================================================
# check-mcf-4.ss: FIXED

We have:
 H1(t) --> t::tree<children_42_1079>@M * HP_1080(children_42_1079),
 HP_1080(children_42_1079)&
  children_42_1079!=null |#| t::tree<children_42_1079>@M --> H2(children_42_1079,n_37'@NI,t@NI)

It seems that H1 is processed before HP_1080:

!!!  synthesize: [HP_1009,H1]
!!! >>>>>> step 3b: do apply_transitive_imp <<<<<<
!!! >>>>>> step 3a: simplification <<<<<<
!!!  synthesize: [HP_1007]
!!! >>>>>> step 3b: do apply_transitive_imp <<<<<<
!!! >>>>>> step 3a: simplification <<<<<<
!!! >>>>>> step 3b: do apply_transitive_imp <<<<<<
!!!  synthesize: [H2,HP_1008,HP_1080]

PROBLEM
=======
HP_1080 cannot be unfolded since H1 was confirmed earlier.
Can you change the order so that guarded assumptions
are processed before those like H1.
That means the following priorities:

   1. H(..) --> H2(..)
   2. H(..) | G --> H2(..)
   3. H(..) * D --> H2(..)
   4. H(..)  --> D*H2(..)

==================================================================
# last-obl3.slk:

infer [G_1]
  next_3::node<val_20_59,next_20_60>@M *
  G_1(next_62,next_20_60)&next_0=next_62 & next_62=null & 
         next_0=null  |- G_1(next_0,next_3).
print residue.

infer [G_1]
  next_3::node<val_20_59,next_20_60>@M *
  G_1(null,next_20_60)&next_0=null & 
         next_0=null  |- G_1(next_0,next_3).
print residue.

ISSUE
=====
The first example gave a longer answer because we were traversing
NULL ptr. Can we avoid traversing null when we perform folding
against unknowns? This may cause some base-case split to be automatically
done, but --classic will pick them up.

Entail (1) : Valid. 

 <1>next_3::node<val_20_59,next_20_60>@M[Orig]&next_0=next_62 & next_62=null & next_0=null&{FLOW,(19,20)=__norm}[]
 inferred hprel: [G_1(next_62,next_20_60@NI)&next_0=next_62 & next_62=null & 
                   next_0=null |#| next_3::node<val_20_59,next_20_60>@M --> G_1(next_0,next_3@NI)]


Entail (2) : Valid. 

 <1>EXISTS(flted_20_38: next_3::node<val_20_59,next_20_60>@M[Orig] * G_1(flted_20_38,next_20_60)&flted_20_38=null & next_0=null & next_0=null&{FLOW,(19,20)=__norm})[]
 inferred hprel: [emp&next_0=null --> G_1(next_0,next_3@NI)]
==================================================================
# check-dll.ss: FIXED

We generated:
[ H1(l,prv@NI)&l!=null --> l::node<prev_19_892,next_19_893>@M * 
  HP_894(prev_19_892,prv@NI) * HP_895(next_19_893,prv@NI),
 HP_895(next_19_893,prv@NI) |#| l::node<prev_19_892,next_19_893>@M --> H1(next_19_893,l@NI),
 H1(l,prv@NI)&l=null --> G1(l,prv@NI),
 HP_894(prev_19_892,prv@NI) * l::node<prev_19_892,next_19_893>@M * 
  G1(next_19_893,l@NI)&prev_19_892=prv --> G1(l,prv@NI),
 HP_894(prev_19_892,prv@NI) --> emp&prev_19_892=prv]

where:
 HP_894(prev_19_892,prv@NI) --> emp&prev_19_892=prv]

Currently, it is marked as NONE, as shown below:

[ H1(l_930,prv_931) ::= 
 H1(next_19_926,l_930) * l_930::node<prev_19_927,next_19_926>@M&
 prev_19_927=prv_931
 or emp&l_930=null
 ,
 G1(l_934,prv_935) ::= 
 HP_894(prev_19_892,prv_935) * l_934::node<prev_19_892,next_19_893>@M * 
 G1(next_19_893,l_934)&prev_19_892=prv_935
 or emp&l_934=null
 ,
 HP_894(prev_19_892,prv) ::= NONE]

Though this may be a dangling predicate, it did provide
a equality relation that we may want to use. Perhaps, we can
have an option to utilize this information; so that we
can have a simpler outcome, namely:

 G1(l_934,prv_935) ::= 
 l_934::node<prev_19_892,next_19_893>@M * 
 G1(next_19_893,l_934)&prev_19_892=prv_935 & prev_19_892=prv_935
 or emp&l_934=null,

I guess this is useful for conciseness, and to support
code reuse later.
==================================================================
#  check-cdll.ss
 - wrong apply transitive for H1: FIXED
 - pre-oblg: exception
 - post-oblg: TYPE ERROR 1 : Found node but expecting NUM:
  omega simplification


==================================================================
# paper/check-sorted.ss --sa-en-pure-field: FIXED.
 comment: now, all confirmation needs ranking

Why isn't HP_885 unfolded?

[ H(x_911,v_912) ::= 
 x_911::node<val_21_907,next_21_908>@M * HP_885(next_21_908,v_912)&
 v_912<=val_21_907
 or emp&x_911=null
 ,
 G(x_917,v_918) ::= 
 emp&x_917=null
 or x_917::node<val_21_882,next_21_883>@M * G(next_21_883,val_21_882)&
    v_918<=val_21_882
 ,
 HP_885(next_21_913,v_914) |#| x::node<val_21_882,next_21_913>@M ::= H(next_21_913,val_21_882)&v_914<=val_21_882]

You were processing it in the right order though,
so the problem is with unfolding guarded defn.

!!! >>>>>> step 3a: simplification <<<<<<
!!!  synthesize: [HP_885,HP_884]
!!! >>>>>> step 3b: do apply_transitive_imp <<<<<<
!!! >>>>>> step 3a: simplification <<<<<<
!!! >>>>>> step 3b: do apply_transitive_imp <<<<<<
!!!  synthesize: [H]
==================================================================
# check-mcf-4.ss

Guarded defns must be eliminated. Hence, they should be
placed a higher priority, as follows:

 1. H(..) -> H2(..)
 2. H(..) & pure | D -> H2(..) // non-recursive
 3. H(..) * D ==> H(..)

(2) is expected to be non-recursive, but may 
include those with disjunctive form. 
They are unfolded where possible  including
disj unfolding.

!!! >>>>>> step 3: apply transitive implication<<<<<<
!!! >>>>>> step 3a: simplification <<<<<<
!!!  synthesize: [HP_973,HP_974,H1]
!!! >>>>>> step 3b: do apply_transitive_imp <<<<<<
!!! >>>>>> step 3a: simplification <<<<<<
!!!  synthesize: [HP_971]
!!! >>>>>> step 3b: do apply_transitive_imp <<<<<<
!!! >>>>>> step 3a: simplification <<<<<<
 !!! >>>>>> step 3b: do apply_transitive_imp <<<<<<
!!!  synthesize: [H2,HP_972,HP_1044]
!!! >>>>>> pre-predicates<<<<<<
!!! >>>>>> step pre-4: remove unused predicates<<<<<<
!!! >>>>>> pre-predicates: step pre-5: group & simpl impl<<<<<<
!!! >>>>>> pre-predicates: step pre-6: combine<<<<<<
!!! >>>>>> pre-predicates: step pre-7: remove redundant x!=null<<<<<<
!!! >>>>>> pre-predicates: step pre-8: strengthen<<<<<<
!!! >>>>>> step 6: generalization <<<<<<
!!! >>>>>> post-predicates<<<<<<
!!! >>>>>> step post-4: step remove unused predicates<<<<<<
!!! >>>>>> post-predicates: step post-5: remove redundant x!=null : not implemented yet<<<<<<
!!! >>>>>> post-predicates: step post-61: weaken<<<<<<
!!!  synthesize: [G2,G1]

For outcome below:;

[ H2(l_1254,prv_1255,par_1256) ::= 
 child_52_1166::tree<children_42_1043>@M * HP_1044(children_42_1043) * 

 H2(next_52_1167,l_1254,par_1256) * 
 l_1254::node<child_52_1166,prev_52_1168,next_52_1167,parent_52_1169>@M * 
 HP_972(prev_52_1168,prv_1255,par_1256)&par_1256=parent_52_1169
 or emp&l_1254=null,

 H1(t_1263) ::= t_1263::tree<children_42_1043>@M * HP_1044(children_42_1043,
 
 G2(l_1265,prv_1266,par_1267) ::= 
 HP_972(prev_52_968,prv_1266,par_1267) * 
 HP_974(parent_52_970,prv_1266,par_1267) * 
 l_1265::node<child_52_967,prev_52_968,next_52_969,parent_52_970>@M * 
 G2(next_52_969,l_1265,par_1267) * G1(child_52_967)&par_1267=parent_52_970 & 
 prev_52_968=prv_1266
 or emp&l_1265=null,

 G1(t_1268) ::= 
 t_1268::tree<children_42_1043>@M&children_42_1043=null
 or t_1268::tree<children_42_1043>@M * G2(children_42_1043,n_1064,t_1268)&
    children_42_1043!=null & n_1064=null,

 HP_1044(children_42_1264) |#| t::tree<children_42_1264>@M ::= 
 H2(children_42_1264,n_37',t)&children_42_1264!=null
 or emp&children_42_1264=null,

 HP_972(prev_52_968,prv,par) ::= NONE,
 HP_974(parent_52_970,prv,par) ::= NONE]
==========

(0)
 HP_972(prev_52_968,prv@NI,par@NI) --> emp&prev_52_968=prv,
 HP_974(parent_52_970,prv@NI,par@NI) --> emp&par=parent_52_970,
 HP_972(prev_52_968,prv@NI,par@NI) --> emp&prev_52_968=prv]

(1)
 HP_971(child_52_967,prv@NI,par@NI)&par=par' & 
  prev_52_968=prv --> H1(child_52_967),

(2)
 HP_973(next_52_969,prv@NI,par@NI)&par=par' & 
  prev_52_968=prv |#| l::node<child_52_967,prev_52_968,next_52_969,par'>@M --> H2(next_52_969,l@NI,par@NI),

(3)
 HP_1044(children_42_1043)&
  children_42_1043!=null |#| t::tree<children_42_1043>@M --> H2(children_42_1043,n_37'@NI,t@NI),
 HP_1044(children_42_1043) * t::tree<children_42_1043>@M&
  children_42_1043=null --> G1(t),
 
(4)
[ H1(t) --> t::tree<children_42_1043>@M * HP_1044(children_42_1043),

(5)
  H2(l,prv@NI,par@NI)&
  l!=null --> l::node<child_52_967,prev_52_968,next_52_969,parent_52_970>@M * 

Post-Pred
=========
  HP_971(child_52_967,prv@NI,par@NI) * HP_972(prev_52_968,prv@NI,par@NI) * 
  HP_973(next_52_969,prv@NI,par@NI) * HP_974(parent_52_970,prv@NI,par@NI),H2(l,prv@NI,par@NI)&l=null --> G2(l,prv@NI,par@NI),


 HP_972(prev_52_968,prv@NI,par@NI) * HP_974(parent_52_970,prv@NI,par@NI) * 
  l::node<child_52_967,prev_52_968,next_52_969,parent_52_970>@M * 
  G2(next_52_969,l@NI,par@NI) * G1(child_52_967)&par=parent_52_970 & 
  prev_52_968=prv --> G2(l,prv@NI,par@NI),


 t::tree<children_42_1043>@M * G2(children_42_1043,n_1064@NI,t@NI)&
  children_42_1043!=null & n_1064=null --> G1(t)]
==================================================================
# tree.ss --sa-dnc

Please sort by pred names prior to printing.

Further simplification seems important after --sa-dnc

  H(x_929) ::= 
       x_929::node<key_31_887,left_31_888,right_31_889>@M 
          * HP_890(left_31_888) * HP_891(right_31_889)
   \/  x_929::node<key_31_887,left_31_888,right_31_889>@M 
          * HP_890(left_31_888) * HP_891(right_31_889)
   \/  x_929::node<key_31_887,left_31_888,right_31_889>@M 
          * HP_890(left_31_888) * HP_891(right_31_889),

For above perform unify-disjuncts to give:

  H(x_929) ::= 
       x_929::node<key_31_887,left_31_888,right_31_889>@M 
          * HP_890(left_31_888) * HP_891(right_31_889)


GOT:

[ HP_891(right_31_930) 
   ::= right_31_930::node<key_31_887,left_31_888,right_31_889>@M 
         * HP_890(left_31_888) * HP_891(right_31_889)
   \/  emp&right_31_930=null,
 
H(x_929) ::= 
       x_929::node<key_31_887,left_31_888,right_31_889>@M 
          * HP_890(left_31_888) * HP_891(right_31_889)
   \/  x_929::node<key_31_887,left_31_888,right_31_889>@M 
          * HP_890(left_31_888) * HP_891(right_31_889)
   \/  x_929::node<key_31_887,left_31_888,right_31_889>@M 
          * HP_890(left_31_888) * HP_891(right_31_889),

G(x_931) ::=
   x_931::node<key_31_887,left_31_888,right_31_889>@M 
          * G(left_31_888) * G(right_31_889)&left_31_888!=null 
            & right_31_889!=null
   \/  HP_890(left_31_888) * x_931::node<key_31_887,left_31_888,right_31_889>@M& left_31_888!=null & right_31_889=null
   \/  HP_891(right_31_889) * x_931::node<key_31_887,left_31_888,right_31_889>@M& left_31_888=null,

HP_890(left_31_918) ::= H(left_31_918)&left_31_918!=null
   \/  emp&left_31_918=null]
==================================================================
# tree.ss --pred-en-equiv

ISSUE: Why isn't equivalence of HP_890 and HP_891 detected.
Maybe it is time to use lemma-proving for equivalence detection.

 HP_890(left_31_929) ::= 
 left_31_929::node<key_31_887,left_31_888,right_31_889>@M
      * HP_890(left_31_888) * HP_891(right_31_889)
 or emp&left_31_929=null
 ,
 HP_891(right_31_930) ::= 
 right_31_930::node<key_31_887,left_31_888,right_31_889>@M 
      * HP_890(left_31_888) * HP_891(right_31_889)
 or emp&right_31_930=null

GOT:
 H(x_918) ::= x_918::node<key_31_887,left_31_888,right_31_889>@M * HP_890(left_31_888) * 
HP_891(right_31_889),

 G(x_931) ::= 
    HP_890(left_31_888) * x_931::node<key_31_887,left_31_888,right_31_889>@M
    & left_31_888!=null & right_31_889=null
 or HP_891(right_31_889) * x_931::node<key_31_887,left_31_888,right_31_889>@M
    &left_31_888=null
 or x_931::node<key_31_887,left_31_888,right_31_889>@M * G(left_31_888) * 
    G(right_31_889)&left_31_888!=null & right_31_889!=null,

 HP_890(left_31_929) ::= 
 left_31_929::node<key_31_887,left_31_888,right_31_889>@M
      * HP_890(left_31_888) * HP_891(right_31_889)
 or emp&left_31_929=null
 ,
 HP_891(right_31_930) ::= 
 right_31_930::node<key_31_887,left_31_888,right_31_889>@M 
      * HP_890(left_31_888) * HP_891(right_31_889)
 or emp&right_31_930=null
 ]
==================================================================
# check-cll.ss: FIXED

[ H1(l_904,p_905) ::=  H1(next_20_901,p_905) 
   * l_904::node<val_20_900,next_20_901>@M&l_904!=p_905
   or emp&l_904=p_905, 
  G1(l_906,p_907) ::= 
 emp&l_906=p_907
 or l_906::node<val_20_889,next_20_890>@M 
    * G1(next_20_890,p_907)& l_906!=p_907]

--sa-dnc

Why is sa-dnc missing on a base-case equation?

[ H1(l_904,p_905) ::= H1(next_20_901,p_905) 
      * l_904::node<val_20_900,next_20_901>@M&l_904!=p_905,
 G1(l_906,p_907) ::= l_906::node<val_20_889,next_20_890>@M 
      * G1(next_20_890,p_907)&l_906!=p_907
   \/  H1(l_906,l_906)&l_906=p_907]

==================================================================
to support:
 - # glib/glist.ss
https://git.gnome.org/browse/glib/tree/glib/gslist.c
https://git.gnome.org/browse/glib/tree/glib/gslist.c
https://git.gnome.org/browse/glib/tree/glib/gqsort.c
https://git.gnome.org/browse/glib/tree/glib/gqueue.c
https://git.gnome.org/browse/glib/tree/glib/gqsort.c
 - xisa:
    dll-create.ss
    dll-copy.ss
    dll-findnback.ss
    dll-rev.ss
 - linux
   - pci_driver (2532)
   - t1394Diag.c (CancelIrp.c, CancelIrpFix.c, PnpRemoveDevice.c,
     BusResetRoutine.c, GetAddressData,  GetAddressDataFix,
     IsochDetachCompletionRoutine, SetAddressData,  SetAddressDataFix)
   - scull.c (1010)
   - class.c (1983)
   - ll_rw_blk (5469)
   - cdrom (6218)
   - md (6653)
 -slayer
   - fw (attach_buffer_insert_head_list.c, callback_remove_entry_list.c,
     cleanup_isochresourcedata.c, cleanup_isochresourcedata_unsafe.c,
     cromdata_add_remove, is_on_list_flat, is_on_list_via_devext)
   - sll (append.c, copy, copy_unsafe, create.c, create_kernel.c, destroy.c,
    filter.c, find.c, reverse.c, traverse.c)
 - slayer + refine

==================================================================
# check-mcf

   --sa-dnc causes
!! rem_constr:
[]
ExceptionNot_foundOccurred!

--pred-en-equiv 
   (base case null lost?)
   G2(..) := G2(...)

[ G1(t_1186) ::=
               t_1186::tree<val_42_1076,children_42_1077>@M&
               children_42_1077=null
               or t_1186::tree<val_42_1076,children_42_1077>@M * 
                  children_42_1077::G2<n_1099,t_1186>@M&
                  children_42_1077!=null
               ,
 G2(l_1183,prv_1184,par_1185) ::=l_1183::G2<prv_1184,par_1185>@M,
 H1(t_1161) ::= 
 t_1161::tree<val_42_1076,children_42_1077>@M * 
 H2(children_42_1077,n_38',t_1161)&children_42_1077!=null
 or t_1161::tree<val_42_1076,children_42_1077>@M&children_42_1077=null


--pred-disj-unify
  same as without

==================================================================
# check-mcf-2a.ss

  dll4 is similar to inferred result but it cannot be re-verified!

==================================================================
check-mcf.ss --pred-en-equiv

Why are post-conditions printed before precondition?
Where is the definition of G2? Why is it circular?
Why aren't G1 & H1 made equal. 

[ G1(t_1189) ::=children_48_1077::G2<n_1099,t_1189>@M * 
  t_1189::tree<val_48_1076,children_48_1077>@M&n_1099=null,
 G2(l_1186,prv_1187,par_1188) ::=l_1186::G2<prv_1187,par_1188>@M,
 H1(t_1161) ::=t_1161::tree<val_48_1076,children_48_1077>@M * 
  children_48_1077::G2<n_38',t_1161>@M&n_38'=null,
 H2(l_1183,prv_1184,par_1185) ::=l_1183::G2<prv_1184,par_1185>@M]
==================================================================
# zip_paper_eq.ss --pred-en-split

This split is unsound since it considered only -->,
rather than <-->. In case of -->, you can only apply to
pre-condition. We should also match with existing predicates.

You should print pre-pred before post-pred.
You should also re-use predicate by default.

What are the 2 other kinds of split below:

  ("--sa-en-sp-split", Arg.Set Globals.sa_sp_split_base, "enable special base case split at entailment");
  ("--sa-dis-sp-split", Arg.Clear Globals.sa_sp_split_base, "disable special base case split at entailment");
  ("--sa-en-split", Arg.Set Globals.sa_infer_split_base, "enable base case splitting of relational assumption at shape infer");
  ("--sa-dis-split", Arg.Clear Globals.sa_infer_split_base, "disable base case splitting of relational assumption at shape infer");

[ G(x_1035,y_1036,res_1037) ::= HP_1040(x_1035) * HP_1041(y_1036) * HP_1042(res_1037),
 H(x_1033,y_1034) ::= HP_1038(x_1033) * HP_1039(y_1034),
 HP_1038(x_1033) ::= 
 emp&x_1033=null
 or HP_1038(next_30_1020) * x_1033::node<val_30_1019,next_30_1020>@M
 ,
 HP_1039(y_1034) ::= 
 emp&y_1034=null
 or HP_1039(next_30_1018) * y_1034::node<val_30_1017,next_30_1018>@M
 ,
 HP_1040(x_1035) ::= 
 emp&x_1035=null
 or x_1035::node<val_30_959,next_30_960>@M * HP_1040(next_30_960)
 ,
 HP_1041(y_1036) ::= 
 emp&y_1036=null
 or y_1036::node<val_30_967,next_30_968>@M * HP_1041(next_30_968)
 ,
 HP_1042(res_1037) ::= 
 emp&res_1037=null
 or HP_1042(v_node_30_994) * res_1037::node<v_int_30_993,v_node_30_994>@M
 ]


==================================================================
# rose-sll-1.ss 

[ H1(t) ::= 
 t::tree<val,children>@M * H2(children,t)&children!=null
 or t::tree<val,children>@M&children=null
 ,
 H2(l,par) ::= 
 l::node<child,next,parent>@M * child::tree<val,children>@M * H2(next,par)&
 par=parent & children=null
 or l::node<child,next,parent>@M * child::tree<val,children>@M * 
    H2(next,par) * H2(children,child)&par=parent & children!=null
 or emp&l=null
 ,
 G1(t) ::= t::tree<val,children>@M * G2(children,t),
 G2(l,par) ::= 
 l::node<child,next,par>@M * G2(next,par)
 or emp&l=null

C program online:

[ H1(t) ::= t::tree<val,children>@M&children=null, 
G1(t) ::= 
DP_1086(children,t)&children!=null & t!=null 
or t::tree<val,children>@M&children=null 
, 
G2(l,par) ::= 
l::node<child,next,par>@M * G2(next,par) 
or emp&l=null 
] 
==================================================================
# sa/papers/check-cdll.ss --pred-en-equiv (FIXED)

Why isn't en-equiv working?

cdll<prev, p> ==  self= p
  or self::node<prev,n>* n::cdll<self, p> & self!=p;

[ H1(l,prv,p) ::= 
 l::node<prev,next>@M * H1(next,l,p)&l!=p & prev=prv
 or emp&l=p
 ,
 G1(l,prv,p) ::= 
 l::node<prv,next>@M * G1(next,l,p)&l!=p
 or emp&l=p
 ]
*/
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================

