data node { int val ; node next }.

HeapPred H(node a).
HeapPred H1(node a).
HeapPred G(node a, node b).
HeapPred H2(node a, node b).

pred ll<n> == self = null & n=0  
 or self::node<_, q> * q::ll<n-1>
 inv n>=0.

//1. for x.next

infer [] x::ll<n> & n>5 |- x::node<_,q>*q::node<_,r>.
print residue.

infer [y] x>0 |- x+y>0.
infer [y] x>0 & y<0 |- x=0.

infer [y] x>0 |- x+y>0.



print residue.
//compare residue [H,b]: H2(b,x) * x::node<a,b>.


//2.
infer [H] H(x) |- x::node<a,b>.
print residue.
//compare residue [H,b]: H2(b,x).

/*
//3. for x.next
infer [H] H(x) |- (exists a: x::node<a,b>@L) .
print residue.

//4. for x.next
infer [H] H(x) |- x::node<_,_>@L .
print residue.


//5. 
infer [H] H(x)* x::node<a,b>  |- x::node<a,b>@L.
print residue.

//6. 
infer [H] H(x)* x::node<a,b>  |- x::node<c,d>@L.
print residue.

//7. 
infer [H] H(x)* x::node<a,b> & d!=b  |- x::node<c,d>@L.
print residue.

//8.
infer [H] H(x) & x1=x  |- x1::node<a,b>@L.
print residue.

//9.
infer [H] H(x)  |- x1::node<a,b>@L.
print residue.

//10.
infer [G] G(x,y)  |- x::node<a,b>@L.
print residue.
/*
  What happen to y? should be HP_95(b,x,y)
 <1>HP_95(b,x) * x::node<a,b>@M[Orig]&true&{FLOW,(19,20)=__norm}[]
*/

//10.
infer [G] G(y,x)  |- x::node<a,b>@L * y::node<c,d>@L.
print residue.

//11.
infer [G] G(y,x)* y::node<c,d>  |- x::node<a,b>@L * y::node<c,d>@L.
print residue.




*/
//infer [] x::node<u,v>  |- x::node<a,b>@L.
//print residue.
/*
infer [] x::node<u,v>  |- x::node<a,b>.
print residue.
*/
/*
  --> [H,G,H1] x::node<a,b>*H1(x,b)
   with H(x) -> x::node<a,b>*H1(b,x)
*/

/*
//function call on x!=null
 [H,G,H1] x::node<a,q>*H1(x,q) |- true --* b & q!=null \/ !(b) & x=null
  -->  x::node<a,x'>*H1(x,x') &  b & q!=null
       or x::node<a,x'>*H1(x,x') &  !b & q!=null
*/

/*
//state after then branch
 [H,G,H1] x::node<a,x'>*H1(x,x') &  b & x'!=null
*/

/*
//recursive function call
 [H,G,H1] x::node<a,x'>*H1(x,x') &  b & x'!=null
    |- H(x') --* G(x',x")
  --> [H,G,H1] x::node<a,x0> * G(x0,x') & x0!=null
   with x0!=null & H1(x0) -> H(x0)
*/
//2.
//infer [H,H1] x::node<a,x0>*H1(x0) &  b & x0!=null  |- H(x0).

/*
 //Postcondition for then branch
  [H,G,H1] x::node<a,x0> * G(x0,x') & b & x0!=null

     |- G(x,x')
  with x::node<a,x0> * G(x0,x') & x0!=null -> G(x,x')
*/
//3.
//infer [G] x::node<a,x0> * G(x0,x1) & b & x0!=null  |- G(x,x1).

/*
 state after else branch
 [H,G,H1] x::node<a,x'>*H1(x,x') &  !b & x'=null
*/

/*
 //Postcondition for else branch
  [H,G,H1] x::node<a,x'> * H1(x,x') & b & x'=null
     |- G(x,x')
  with x::node<a,x'> * H1(x,x') & x'=null -> G(x,x')
*/
//4.
//infer [G,H1] x::node<a,x0> * H1(x0) & b & x0=null  |- G(x,x0).
