data node{
     int val;
     node next;
}.

pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.

pred ll<n> ==
  self=null & n=0 
 or self::node<_,p>*p::ll<n1> & n=n1+1 
 inv n>=0.


lemma_safe self::ll<n> & n=0 -> self=null.
print residue.


/*
lemma_safe "V21" self::lseg<n, p> & n = a + b & a,b >=0 <- self::lseg<a, r> * r::lseg<b, p>.
print residue.
*/

/*
lemma "V11" self::lseg<n, p> & n = a + b & a,b >=0 -> self::lseg<a, r> * r::lseg<b, p>.
*/

/*
lemma "V12" self::lseg<a, r> * r::lseg<b, p> <- self::lseg<n, p> & n = a + b & a,b >=0.
*/
//checkentail self::ll<n> & n=0 |- self=null.

