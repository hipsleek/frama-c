in sleekdata node {
	int val;
	node next
}.

HeapPred H(node a).
HeapPred G(node a, node b).

HeapPred HP_526(node a).

/*
 infer[H,G,HP_526] HP_526(next_21_534) * x'::node<val_20_533,next_21_514'>
  &x=x' & next_21_514'=null & next_21_534=v_node_22_515' 
  & res=v_node_22_515'
 |-  G(x',res). 

ERROR: at get-next.slk_14_5 
Message: should not have prime vars

*/

// Hip generates the following entailment:

 infer[G,HP_526] HP_526(next_21_534) * xp::node<val_20_533,next_21_514>
  &x=xp & next_21_514=null & next_21_534=v_node_22_515 
  & res2=v_node_22_515
  |- G(xp,res2). 

/* 
 Using sleek, we derive:
  HP_526(res2) * xp::node<val_20_533,next_21_514>&
  next_21_514=null --> G(xp,res2)

This is good because the original names like xp,res2,x are
being kept where possible for the unknown predicates HP_526 and G.

However, your inference below:
id: 6; caller: []; line: 18; kind: POST; hec_num: 5; evars: []; c_heap: emp
 checkentail HP_526(next_21_534) * x'::node<val_20_533,next_21_514'>@M[Orig]&x=x' & 
next_21_514'=null & next_21_534=v_node_22_515' & res=v_node_22_515'&
{FLOW,(22,23)=__norm}[]
 |-  G(x',res)&true&{FLOW,(22,23)=__norm}[]. 

derives:
ass hprel: [ HP_526(next_21_534) * x'::node<val_20_533,next_21_514'>&
  next_21_514'=null --> G(x',next_21_534)&true]

I wonder why we did not obtain this instead:

  HP_526(res) * xp::node<val_20_533,next_21_514>&
  next_21_514=null --> G(xp,res)

I think you need to give priorities to xp,res
over variables such as next_21_534.
 
*/

