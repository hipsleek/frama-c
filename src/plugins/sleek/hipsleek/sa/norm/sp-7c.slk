data node{
	int val;
	node next;
}.

//useless parameters
HeapPred P1(node a).
HeapPred P2(node a).

pred ls<y> == self=y
   or self::node<_,p>*p::ls<y>
inv true.

pred ll<> == self=null
   or self::node<_,p>*p::ll<>
inv true.

//lemma_safe self::ll<> -> self::ls<q>*q::ll<>.
//lemma_unsafe  self::ll<> -> self::ls<q>*P1(q).
//lemma_unsafe  self::ll<> -> self::ls<q>*P1(self).

//lemma_infer [P1] self::ll<> -> self::ls<q>*P1(q).
//print residue.

/*
infer_exact [P1]
self=null
   or self::node<_,pp>*pp::ll<>
|- [y] P1(y) & self=y
or self::node<_,p>*p::ls<y> * P1(y)
.

infer_exact [P1] self=null
|- [y] P1(y) & self=y.
print residue.

infer_exact [P1]
   self::node<_,p>*p::ll<>
|- self::node<_,p2>*p2::ls<y> * P1(y).
print residue.

infer_exact [P1]
   self::node<_,pp>*pp::ls<yy> * P1(yy)
|- self::node<_,p2>*p2::ls<y> * P1(y).
print residue.
*/
/*
infer_exact [P1]
self=null
   or self::node<_,pp>*pp::ls<yy> * P1(yy)
|- [y] P1(y) & self=y
or self::node<_,p>*p::ls<y> * P1(y)
.
*/


/*
infer_exact [P1]
   self::node<_,p>*p::ll<>
|- self::node<_,p2>*p2::ls<y> * P1(y).
print residue.

infer [P1]
   P1(x)
|- P1(y).
print residue.


infer_exact [P1]
   self::node<_,ppp>*ppp::ll<>
|- self::node<_,p2>*p2::ls<y> * P1(y).
print residue.
*/

/*
infer_exact [P1]
   ppp::ls<yy> *P1(ppp)
|- ppp::ls<y> * P1(y).
print residue.

infer_exact [P1]
   P1(ppp) & y=yy
|- P1(y).
print residue.


infer_exact [P1]
   P1(ppp) 
|- P1(y).
print residue.

infer_exact [P1]
  P1(yy)
|- [y] P1(y) & y=yy
.
print residue.

infer_exact [P1]
self::node<_,pp>*pp::ls<yy> * P1(yy)
|- [y] self::node<_,p>*p::ls<y> * P1(y)
.

*/


infer_exact [P1]
p::ls<yy> * P1(yy) //& pp=p
|- [y] p::ls<y> * P1(y)
.
print residue.


infer_exact [P1]
P1(yy) //& pp=p
|- [y] P1(y) & y=yy
.
print residue.

/*
# sp-7c.slk

Expecting same outcome from above two examples
but it seems the first one is less accurate!
However, I could not track the cause of this problem.

 <1>emp&y=yy&{FLOW,(19,20)=__norm}[]
 inferred hprel: [emp --> P1(y_32); P1(yy) --> emp]

Why is there a mismatch ptr?

@1! >>>>>> infer_hp_rel <<<<<<
@1!   es_heap:  p::ls<yy>@M
@1!   lhs:  P1(yy)&{FLOW,(19,20)=__norm}[]
@1!   rhs_rest:  emp
@1!   unmatch:  P1(y_32)
@1!   classic: true
@1! >>>>>> mismatch ptr is not a selective variable <<<<<<
infer_collect_hp_rel#1@1
infer_collect_hp_rel#1 inp1 : P1(yy)&{FLOW,(19,20)=__norm}[]
infer_collect_hp_rel#1 inp2 : P1(y)&y=yy&{FLOW,(19,20)=__norm}[]
infer_collect_hp_rel#1@1 EXIT:(true, es_formula: P1(yy)&{FLOW,(19,20)=__norm}[]
 es_infer_vars_hp_rel: [P1]
 es_infer_hp_rel: [RELASS [P1][] unknown svl: [];  unknown hps: [];  predefined: []; emp --> P1(y_32)], P1(y),None)


<1>emp&y=yy&{FLOW,(19,20)=__norm}[]
 inferred hprel: [P1(yy) --> P1(yy)]

How come y=yy not in the conseq below?
  infer_collect_hp_rel#1 inp2 : P1(y)&{FLOW,(19,20)=__norm}[]

@5! >>>>>> infer_hp_rel <<<<<<
@5!   es_heap:  emp
@5!   lhs:  P1(yy)&{FLOW,(19,20)=__norm}[]
@5!   rhs_rest:  emp
@5!   unmatch:  P1(y_38)
@5!   classic: true
@5! svl: :[yy]
@5! f: : true
@5! svl f: :[]
@5! svl: :[yy]
@5! f: : true
@5! svl f: :[]
@5! svl: :[P1,yy]
@5! f: : true
@5! svl f: :[]
@5!   hp_rels: [ RELASS [P1][] unknown svl: [];  unknown hps: [];  predefined: []; P1(yy) --> P1(yy)]
@5!   hp_rel_list: [ RELASS [P1][] unknown svl: [];  unknown hps: [];  predefined: []; P1(yy) --> P1(yy)]
@5!   keep_hps: []
@5!   residue before matching:  emp&{FLOW,(19,20)=__norm}[]
infer_collect_hp_rel#1@5
infer_collect_hp_rel#1 inp1 : P1(yy)&{FLOW,(19,20)=__norm}[]
infer_collect_hp_rel#1 inp2 : P1(y)&{FLOW,(19,20)=__norm}[]
infer_collect_hp_rel#1@5 EXIT:(true, es_formula: emp&{FLOW,(19,20)=__norm}[]
 es_infer_hp_rel: [RELASS [P1][] unknown svl: [];  unknown hps: [];  predefined: []; P1(yy) --> P1(yy)], P1(yy),Some( P1(yy)))

*/