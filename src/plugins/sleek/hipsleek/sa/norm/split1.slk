data node{
     int val;
     node next;
}.


pred zip<y,r> ==
  self=null & y=null & r=null
or self::node<_,p>*y::node<_,q>*p::zip<q, v> & v=p & r=self.


pred zipM<n> ==
  self=null & n=0 
 or self::node<_,p>*p::zipM<n1> & n=n1+1 
 inv n>=0.

pred ll<> ==
  self=null 
 or self::node<_,p>*p::ll<>
 inv true.

relation P3(int a, int b).
HeapPred P2(node a).
HeapPred P1(node a).
relation P4(node a, node b).

/*
lemma_infer_pred [P1,P2,P4] "one3" self::zip<y,r>  ->  P1(self) * P2(y) & P4(r,self) .
print residue.
*/
/*
lemma_safe "one3b" self::zip<y,r>  <-  self::ll<> * y::ll<> & r=self.
*/

lemma_infer_pred [P3] "one3" self::zip<y,r>  <-  self::zipM<n> * y::zipM<m> & r=self & P3(m,n) .
print residue.

