data node{
	int val;
	node next;
}.

pred zip<y> ==
  self=null & y=null
or self::node<_,p>*y::node<_,q>*p::zip<q>
inv true.

HeapPred P1(node a).
HeapPred P2(node a).
HeapPred H1(node a).
HeapPred H2(node a).

//lemma_infer [H2] self::zip<y> -> H2(self) * H2(y).
lemma_unsafe self::zip<y> -> H2(self) * H2(y).
//print residue.
/*
 <1>emp&{FLOW,(1,22)=__flow}[]
 inferred hprel: [// Verify_Lemma
emp&self_lem_13=null --> H2(self_lem_13); 
// Verify_Lemma
emp&y=null --> H2(y); 
// Verify_Lemma
H2(p_57) * self_lem_13::node<Anon_55,p_57>@M --> H2(self_lem_13) * 
HP_65(q_58); 
// Verify_Lemma
H2(q_58) * y::node<Anon_56,q_58>@M * 
HP_65(q_58) --> H2(y)]
*/

infer [H2] self=null & y=null |- H2(self) * H2(y).
print residue.

infer [H2] self::node<_,p>*y::node<_,q>*p::zip<q>
 |- H2(self) * H2(y). 
print residue.

infer [H2] self::node<_,p>*y::node<_,q>*H2(p)*H2(q)
 |- H2(self) * H2(y). 
print residue.

//infer [] P1(x)*P2(y) |- x::zip<y>.
//print residue.

/*
# sp-2b.slk

# How come the print lemmas operation are scheduled
entirely after the two lemma_unsafe??

Updated store with unsafe repo.

Updated store with unsafe repo.
Left Lemmas:[Lemma "lem_14":  self::zip<y>@M&{FLOW,(1,22)=__flow}[]==>]
Right Lemmas:[Lemma "lem_13":  self::zip<y>@M&{FLOW,(1,22)=__flow}[]<==]

Left Lemmas:[Lemma "lem_14":  self::zip<y>@M&{FLOW,(1,22)=__flow}[]==>]
Right Lemmas:[Lemma "lem_13":  self::zip<y>@M&{FLOW,(1,22)=__flow}[]<==]

*/

