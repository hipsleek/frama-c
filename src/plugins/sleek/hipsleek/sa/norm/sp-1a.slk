data node{
	int val;
	node next;
}.

pred zip<y> ==
  self=null & y=null
or self::node<_,p>*y::node<_,q>*p::zip<q>
inv true.

HeapPred P1(node a).
HeapPred P2(node a).



lemma_infer [P1,P2] self::zip<y> -> P1(self) * P2(y).


/*
(i) to infer P1,P2 via lemma synthesis
(ii) push lemma into store
(iii) unfold known pred, and infer P1,P2
(iv) pop lemma from store
*/
/*
# sp-1a.slk

Need to trigger zip lemma to yield
uninterpreted predicate.

Make sure lemma is proven and synthesized
under classic setting.

====================

Lemma over uninterpreted predicate..

Why is there an exception/error?

Starting Omega...oc
P1 is defined.
P2 is defined.
Fatal error: exception Failure("get_node_var: invalid argument")

This must be in the lemma checking section?

*/