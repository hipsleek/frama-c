data node{
	int val;
	node next;
}.

//useless parameters
HeapPred P1(node a).
HeapPred P2(node a).

pred ls<y> == self=y
   or self::node<_,p>*p::ls<y>
inv true.

pred ll<> == self=null
   or self::node<_,p>*p::ll<>
inv true.

//lemma_safe self::ll<> -> self::ls<q>*q::ll<>.
//lemma_unsafe  self::ll<> -> self::ls<q>*P1(q).
//lemma_unsafe  self::ll<> -> self::ls<q>*P1(self).

lemma_infer [P1] self::ll<> -> self::ls<q>*P1(q).
print residue.

/*
infer_exact [P1]
self=null
   or self::node<_,pp>*pp::ll<>
|- [y] P1(y) & self=y
or self::node<_,p>*p::ls<y> * P1(y)
.

infer_exact [P1] self=null
|- [y] P1(y) & self=y.
print residue.

infer_exact [P1]
   self::node<_,p>*p::ll<>
|- self::node<_,p2>*p2::ls<y> * P1(y).
print residue.

infer_exact [P1]
   self::node<_,pp>*pp::ls<yy> * P1(yy)
|- self::node<_,p2>*p2::ls<y> * P1(y).
print residue.

infer_exact [P1]
self=null
   or self::node<_,pp>*pp::ls<yy> * P1(yy)
|- [y] P1(y) & self=y
or self::node<_,p>*p::ls<y> * P1(y)
.
print residue.

infer_exact [P1]
self=null
   or self::node<_,pp>*pp::ll<>
|- [y] P1(y) & self=y
or self::node<_,p>*p::ls<y> * P1(y)
.
print residue.
*/



/*
infer_exact [P1]
   self::node<_,p>*p::ll<>
|- self::node<_,p2>*p2::ls<y> * P1(y).
print residue.

infer [P1]
   P1(x)
|- P1(y).
print residue.


infer_exact [P1]
   self::node<_,ppp>*ppp::ll<>
|- self::node<_,p2>*p2::ls<y> * P1(y).
print residue.
*/

/*
infer_exact [P1]
   ppp::ls<yy> *P1(ppp)
|- ppp::ls<y> * P1(y).
print residue.

infer_exact [P1]
   P1(ppp) & y=yy
|- P1(y).
print residue.


infer_exact [P1]
   P1(ppp) 
|- P1(y).
print residue.
*/