data node{
	int val;
	node next;
}.


HeapPred P1(node a).
HeapPred P2(node a).

pred ls<p> == self=p
   or self::node<_,q>*q::ls<p>
inv true.

pred ll<> == self=null
   or self::node<_,p>*p::ll<>
inv true.


lemma self::ll<> -> self::ls<p> * P1(p).

/*
// this is for independent paramters, just like zip.
 (a) add lemma
 (b) unfold LHS and for infer_cmd
 (c) collect result from
*/

/*
infer_exact [P1] 
   self=null
or self::node<_,p>*p::ll<>
|- self::ls<p> * P1(p).
print residue.
*/

//(1)
infer_exact [P1] 
   self=null
or self::node<_,p1>*p1::ll<>
|- P1(p) & self=p
   or self::node<_,q>*q::ls<p> * P1(p).
print residue.

//(2)
infer_exact [P1] 
   self=null
or self::node<_,p1>*p1::ls<pp> * P1(pp)
|- P1(p) & self=p
   or self::node<_,q>*q::ls<p> * P1(p).
print residue.


//(3)
infer_exact [P1] 
   self=null
|- P1(p) & self=p.
print residue.
