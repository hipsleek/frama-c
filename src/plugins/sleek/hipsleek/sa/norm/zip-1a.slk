data node{
     int val;
     node next#REC;
}.

/*
pred_extn size[R]<k> ==
   k=0 // base case
   or R::size<i> & k=1+i // recursive case
   inv k>=0.
*/
// infer/sort/der-2.slk
//pred llN<n> == extend ll<> with size[REC]<n> .

HeapPred zip(node@RO a, node b).
HeapPred zipN(node@RO a, node b, int n).
HeapPred zipNM(node@RO a, node b, int n, int m).

relDefn zip(x,y) <->
  x=null & y=null
or x::node<_,p>*y::node<_,q>*zip(p,q).

relDefn zipN(a,b,n) <-> extends zip(a,b) at 0 with size[REC]<n> .

relDefn zipNM(a,b,n,m) <-> extends zipN(a,b,n) at 1 with size[REC]<m> .


/*
pred_split [zipNM].


print residue.
*/