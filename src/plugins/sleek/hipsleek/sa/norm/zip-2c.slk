data node{
     int val;
     node next;
}.

pred zipNM<y> ==
  self=null & y=null 
or self::node<_,p>*y::node<_,q>*p::zipNM<q>.

pred zipN<n> ==
  self=null & n=0 
 or self::node<_,p>*p::zipN<n1> & n=n1+1 
 inv n>=0.


pred zip<> ==
  self=null  
 or self::node<_,p>*p::zip<>  
 inv true.

lemma_test "both2" self::zipNM<y>  <-> self::zip<> * y::zip<> .

lemma_test "one" self::zipNM<y>  <- self::zipN<n> * y::zipN<m> & n=m .

/* complex LHS not handled properly
lemma_test "one" self::zipN<n> * y::zipN<m> & n=m
                     -> self::zipNM<y> .
*/

HeapPred H(node x).

lemma_infer[H] self::zipNM<y>  -> H(self) * H(y).
print residue.

/*
 inferred hprel: [emp&self_lem_15=null --> H(self_lem_15); 
                  H(p_341) * self_lem_15::node<_,p_341>@M --> H(self_lem_15); 
                  H(q_338) * y::node<_,q_338>@M --> H(y)]

Can ll predicate be directly synthesized by lemma_infer?

*/

relation R(int a, int b).

lemma_infer[R] self::zipNM<y> <- self::zipN<n> * y::zipN<m> & R(n,m).

/*
Why error below?

 Temp Lemma(s) inferred as valid in current context.
Omega Error Exp:Globals.Illegal_Prover_Format("Omega.omega_of_exp: RelForm")
 Formula: exists(m_433:exists(n_432:R(n_432,m_433) & (((1<=n_432 & p_378>0) | 
(n_432=0 & p_378=0)))) & (((1<=m_433 & q_408>0) | (m_433=0 & q_408=0))))

*/

lemma_infer[n,m] self::zipNM<y> <- self::zipN<n> * y::zipN<m> .
print residue.
/*
why failure?

ntailing lemma lem_17: Fail. (may) cause:OrR[ y=null |-  y!=null. LOCS:[11;8] (must-bug),valid]

Failed to inferred for lem_17:<== ==> invalid lemma encountered.
*/



/*
checkentail self_lem_15::node<_,p_113>@M * p_113::zipN<n1_114>@M * y::zipN<m>@M&n=1+
n1_114 & m=n
 |-  (exists q_115: self_lem_15::node<_,p_89>@M * y::node<_,q_90>@M * 
p_89::zipNM<q_115,n1_91,m1_92>@M).

print residue.
*/
