data node {
	int val;
	node next;
}.


pred lseg2<p, n> == self=p & n=0
	or self::node<_, r> * r::lseg2<p, n-1>
	inv n>=0. 

pred ll_tail2<tx, n> == self::node<_, null> & tx=self & n=1
	or self::node<_, r> * r::ll_tail2<tx, n-1> & r!=null
	inv self!=null & tx!=null & n>=1.

lemma "lseg2" self::lseg2<p, n> 
<- self::lseg2<q, n1> * q::lseg2<p, n2> & n=n1+n2.
//lemma "ll_tail2" self::ll_tail2<t, n> <-> self::lseg2<t, n-1> * t::node<_, null>.

checkentail self::node<_,p> |- self::lseg2<p,n> .
print residue.


// application of lemma
checkentail x::lseg2<q, n1> * q::lseg2<p, n2> & n=n1+n2
|- x::lseg2<p, n>.

// proof of lemma after main predicate of LHS is unfolded once
checkentail 
    x::lseg2<p, n2> & n=n1+n2 & n1=0
 or x::node<_, r> * r::lseg2<q, n1-1> * q::lseg2<p, n2> & n=n1+n2
|- x::lseg2<p, n>.

print residue.
