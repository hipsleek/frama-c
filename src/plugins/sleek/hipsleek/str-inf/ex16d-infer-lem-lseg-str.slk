data char_star {
  int val;
  char_star next;
}.

pred WSS<p> ==
  self::WFSeg<q>*q::char_star<0,p> 
  inv self!=null.

pred WFSeg<p> ==
  self=p 
  or self::char_star<v,q>*q::WFSeg<p> & v!=0
  inv true.

pred WFG<p> ==
  self::char_star<0,p>
  or self::char_star<v,q>*q::WFG<p> & v!=0
  inv self!=null.

  //lemma_safe self::WFG<p> -> self::WFSeg<q>*q::char_star<0,p>.
  //lemma_safe self::WFG<p> <- self::WFSeg<q>*q::char_star<0,p>.

  HeapPred U(char_star x,char_star y).
  HeapPred U2(char_star x,char_star y).

 lemma_infer [U,@pure_field,@classic] self::WFG<p> 
      -> U(self,q)*q::char_star<0,p>.
 print residue.

/*
# ex16d.slk

 lemma_infer [U,@pure_field,@classic] self::WFG<p> 
      -> U(self,q)*q::char_star<0,p>.

# generated:

 [emp&self_lem_12=q_145 |#|3  --> U(self_lem_12,q_145)&true; 
  U(q_153,q_156)&true |#| q_156::char_star<flted_26_162,p>@M&
     flted_26_162=0 --> GP_157(q_153,q_156,self_lem_12@NI)&true; 
  self_lem_12::char_star<v_152,q_153>@M * 
       GP_157(q_153,q_156,self_lem_12@NI)&
       v_152!=0 |#|3  --> U(self_lem_12,q_156)&true]

[[ InferFold  ==>  COND ==>  Match(self_lem_12,self_lem_12) 
  ==>  SEARCH ==>  (Lemma ==> lem_12(UNK)) ==> (left: lem_12) 
  ==>  InferUnfold  ==>  Match(q_163,q_156) ==> 
||OR|| ==>  SEARCH ==>  BaseCaseFold ==>  Match(self_lem_12,q_145)]]

-------------------------------------------------------------------
 emp&self_lem_12=q_145 |#|3  --> U(self_lem_12,q_145)&true; 
  
 U(q_153,q_156)&true |#| q_156::char_star<flted_26_162,p>@M&
     flted_26_162=0 --> GP_157(q_153,q_156,self_lem_12@NI)&true; 

 self_lem_12::char_star<v_152,q_153>@M * 
       GP_157(q_153,q_156,self_lem_12@NI)&
       v_152!=0 |#|3  --> U(self_lem_12,q_156)&true]

-----
 self_lem_12::char_star<v_152,q_153>@M * 
       GP_157(q_153,q_156,self_lem_12@NI)&
       v_152!=0 |#|3  --> U(self_lem_12,q_156)&true]

 self_lem_12::char_star<v_152,q_153>@M * 
       U(q_153,q_156) & v_152!=0 |#|3  
       --> U(self_lem_12,q_156)&true]

-----
 emp&self_lem_12=q_145 |#|3  
       --> U(self_lem_12,q_145)&true; 

---------------------------
U(self_lem_12,q_145) <-- self_lem_12=q_145
   or  self_lem_12::char_star<v_152,q_153>@M * 
       U(q_153,q_156) & v_152!=0  

U(self_lem_12,q_145) == self_lem_12=q_145
   or  self_lem_12::char_star<v_152,q_153>@M * 
       U(q_153,q_156) & v_152!=0 

------------------------------------------

 Upost(...) <- K  (Upost can be as strong as K)

      U(...) <- (K1 \/ K2)
 --------------------------------
  U(...) <- K1  /\ U(...) <- K2


 Upre(...) -> K   (Upre must be at least K)

      U(...) -> K1 /\ K2
 --------------------------------
   U(...) -> K1  /\ U(...) -> K2

      U(...) -> K1 \/ K2
 --------------------------------
   U(...) -> K1  \/ U(...) -> K2

*/
