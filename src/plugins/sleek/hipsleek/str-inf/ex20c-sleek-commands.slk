data node {
	int val; 
	node next;	
}.


HeapPred U(node x).
HeapPred  GP_154(node x,node@NI b).


relAssume //(1)
emp&flted_22_139=null --> U(flted_22_139).


relAssume //(1)
q_147::node<Anon_152,q_153>@M * GP_154(q_153,q_147)&
  q_147!=null --> U(q_147).

relAssume //(1)
U(q_153)&q_147!=null --> GP_154(q_153,q_147).

print relAssumes. // To add hprel type

//shape_add_dangling [U,GP_154].

//print relAssumes.

shape_simplify [U,GP_154].

print relAssumes.

//shape_unfold [U].
//shape_unfold [GP_154].
shape_unfold [U,GP_154].

print relAssumes.

shape_merge [U,GP_154].

print relAssumes.

shape_simplify [U,GP_154].

print relAssumes.

/*
# ex20c.slk

========================
 Performing Simplifying
========================

# How simplification does not reduce redundant 
  and duplicated expressions?
 
  [fold emp&flted_22_139=null
        or flted_22_139::node<Anon_31,q_32>@M * U(q_153)&
           flted_22_139!=null & flted_22_139!=null & q_32=q_153 & 
           flted_22_139!=null
         |#|  --> U(flted_22_139); 
   fold U(q_153)&q_147!=null |#|  --> GP_154(q_153,q_147)]


# Expects:

  [fold emp&flted_22_139=null
        or flted_22_139::node<Anon_31,q_32>@M * U(q_153)&
      & q_32=q_153 & flted_22_139!=null --> U(flted_22_139); 
   fold U(q_153)&q_147!=null |#|  --> GP_154(q_153,q_147)]


*/

