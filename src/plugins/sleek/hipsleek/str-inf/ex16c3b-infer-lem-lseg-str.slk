data char_star {
  int val;
  char_star next;
}.

pred WSS<p> ==
  self::WFSeg<q>*q::char_star<0,p> 
  inv self!=null.

pred WFSeg<p> ==
  self=p 
  or self::char_star<v,q>*q::WFSeg<p> & v!=0
  inv true.

pred WFG<p> ==
  self::char_star<0,p>
  or self::char_star<v,q>*q::WFG<p> & v!=0
  inv self!=null.


  HeapPred U(char_star x,char_star y).
  HeapPred U2(char_star x,char_star y).
 HeapPred D(char_star x).

//lemma_unsafe self::WFG<p> <- U(self,q2)*q2::char_star<0,p>.

infer [U2,@classic,@pure_field] U2(q3,q)  |- U(q3,q).
print residue.
// inferred hprel: [U2(q3,q)&true |#|3  --> U(q3,q)&true]

infer [U2,@classic,@pure_field] U2(q3,q) * D(q)  |- U(q3,qq) * D(qq).
expect Valid.

//infer [U2,@classic,@pure_field] U2(q3,q)   |- U(q3,qq) .

//infer [U2,@pure_field] U2(q3,q) * q::char_star<_,_>  |- U(q3,qq) .

//infer [U2,@pure_field] U2(q3,q) * q::char_star<0,p>  |- U(q3,qq) *qq::char_star<n,p>.

infer [U2,@pure_field] U2(q3,q) * q::char_star<0,p> & q!=qq  |- U(q3,qq) *qq::char_star<n,p>.
expect Fail.

infer [U2,@pure_field] U2(q3,q) * q::char_star<0,p>  |- U(q3,qq) *qq::char_star<n,p>.
expect Valid.

//infer [U2] U2(q3,q)*q::char_star<_,p>   |- U(q3,qq)*qq::char_star<_,p> .
print residue.
// fail
// can we support InferUnfold with instantiation?
//     U2(q3,q) --> U(q3,qq) & qq=q
//  D(p) & qq=q |- D(qq)

/*
# ex16c3b.slk

infer [U2,@classic,@pure_field] U2(q3,q) & D(p)  |- U(q3,qq) & D(qq).
print residue.
// fail
// can we support InferUnfold with instantiation?
//     U2(q3,q) --> U(q3,qq) & qq=q
//  D(p) & qq=q |- D(qq)

# Why did an InferUnfold fail?

!!! **astsimp.ml#8930:impl_var:[]
Entail (2) : Fail.(may) cause:**solver.ml#13222:infer_collect_hp_rel

Residue:

 MaybeErr Context: 
   fe_kind: MAY
   fe_name: separation entailment
   fe_locs: {
     fc_message: infer_heap_node
     fc_current_lhs_flow: {FLOW,(20,21)=__norm#E}
   }
 [[ InferUnfold ]]
 CEX:true



*/
