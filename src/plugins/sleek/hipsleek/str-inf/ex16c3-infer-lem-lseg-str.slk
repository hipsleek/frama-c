data char_star {
  int val;
  char_star next;
}.

pred WSS<p> ==
  self::WFSeg<q>*q::char_star<0,p> 
  inv self!=null.

pred WFSeg<p> ==
  self=p 
  or self::char_star<v,q>*q::WFSeg<p> & v!=0
  inv true.

pred WFG<p> ==
  self::char_star<0,p>
  or self::char_star<v,q>*q::WFG<p> & v!=0
  inv self!=null.

  //lemma_safe self::WFG<p> -> self::WFSeg<q>*q::char_star<0,p>.
  //lemma_safe self::WFG<p> <- self::WFSeg<q>*q::char_star<0,p>.

  HeapPred U(char_star x,char_star y).
  HeapPred U2(char_star x,char_star y).

// lemma_unsafe self::WFG<p> <- U(self,q)*q::char_star<0,p>.

infer [U2,U,@classic,@pure_field] U2(q3,q)*q::char_star<0,p>  |- q3::WFG<p> .
print residue.

 //infer [@classic,@pure_field] U(x,q)*q::char_star<0,p>  |- x::WFG<p>.
 //[[ SEARCH ==>  (Lemma <== lem_12(UNK)) ==>  Match(UNK) ==>  SEARCH ==>  Match(q,q)]]

 /*
 infer [U,@classic,@pure_field] U(x,q)*q::char_star<0,p>  |- 
     x::char_star<v,q2>*q2::WFG<p> & v!=0.
*/


/*
infer [U,U2,@classic,@pure_field] x::char_star<w,q3>*U2(q3,q)*q::char_star<0,p> & w!=0 |- 
     x::char_star<v,q2>*q2::WFG<p> & v!=0.
<1>emp&w=v & q3=q2 & v!=0&{FLOW,(20,21)=__norm#E}[]
 inferred hprel: [HP_154(p,q@NI)&true |#|3  --> emp&true; 
                  HP_155(q,q3@NI)&true |#|3  --> emp&true; 
                  U2(q2,q) * q::char_star<flted_37_132,p>@M&
                   flted_37_132=0 |#|3  --> q2::WFG<p>@M * HP_154(p,q@NI) * 
                                            HP_155(q,q2@NI)&

*/

//infer [U,U2,@classic,@pure_field] U(q3,q)*q::char_star<0,p>  |- q3::WFG<p> .

//infer [U2,@classic,@pure_field] U2(q3,q)*q::char_star<0,p>  |- U(q3,q)*q::char_star<0,p> .

// lemma_unsafe self::WFG<p> <- U(self,q)*q::char_star<0,p>.



/*
infer [U2,U,@classic,@pure_field] U2(q3,q)*q::char_star<0,p>  
      |- U(q3,q4)*q4::char_star<0,p>.
print residue.
*/
/*

# ex16c3.slk

infer [U,U2,@classic,@pure_field] U(q3,q)*q::char_star<0,p>  |- q3::WFG<p> .

# This schedules an InferUnfold:

!!! **context.ml#2876:compute_action (steps) :
 ### RHS Cand :[ q3::WFG<p_145>@M]
 ### action :
 InferUnfold =>
   LHS: U2(q3,q)
   RHS: q3::WFG<p_145>@M

# Since U2 is inferable, can we also schedule a
  Lemma in the same way as this example:

infer [U,U2,@classic,@pure_field] U(q3,q)*q::char_star<0,p>  |- q3::WFG<p> .

!!! **context.ml#2876:compute_action (steps) :
 ### RHS Cand :[ q3::WFG<p_145>@M]
 ### action :
 SEARCH =>[
  Prio:2
  InferUnfold =>
    LHS: U(q3,q)
    RHS: q3::WFG<p_145>@M;
  Prio:3
  (Lemma <== lem_12) =>
    LHS: U(q3,q)
    RHS: q3::WFG<p_145>@M
  ]

=============================================================


 infer [U,@classic,@pure_field] U(x,q)*q::char_star<0,p>  |- x::WFG<p>.

# Can we trigger lemma, just like ex16c2.slk?

  <1>emp&{FLOW,(20,21)=__norm#E}[]
 inferred hprel: [HP_155(p,q@NI)&true |#|3  --> emp&true; 
                  HP_156(q,x@NI)&true |#|3  --> emp&true; 
                  U(x,q) * q::char_star<flted_31_132,p>@M&
                   flted_31_132=0 |#|3  --> x::WFG<p>@M * HP_155(p,q@NI) * 
                                            HP_156(q,x@NI)&
                   true]
[[ SEARCH ==>  InferUnfold ]]

# ex16c2.slk

  infer [@classic,@pure_field] U(x,q)*q::char_star<0,p> 
         |- x::WFG<p>.

[[ SEARCH ==>  (Lemma <== lem_12(UNK)) ==>  Match(UNK) ==>  SEARCH ==>  Match(q,q)]]

*/
