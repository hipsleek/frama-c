data char_star {
  int val;
  char_star next;
}.

pred WSS<p> ==
  self::WFSeg<q>*q::char_star<0,p> 
  inv self!=null.

pred WFSeg<p> ==
  self=p 
  or self::char_star<v,q>*q::WFSeg<p> & v!=0
  inv true.

pred WFG<p> ==
  self::char_star<0,p>
  or self::char_star<v,q>*q::WFG<p> & v!=0
  inv self!=null.

  //lemma_safe self::WFG<p> -> self::WFSeg<q>*q::char_star<0,p>.
  //lemma_safe self::WFG<p> <- self::WFSeg<q>*q::char_star<0,p>.

  HeapPred U(char_star x,char_star y).

/*
  lemma_infer [U,@classic,@pure_field] 
     self::WFG<p> -> U(self,q)*q::char_star<0,p>.
*/

//infer [U,@classic,@pure_field] self::char_star<0,p> |- U(self,q)*q::char_star<0,p> .
  infer [U,@classic,@pure_field] self::char_star<0,p> |- U(self,p) .

  print residue.

/*
# ex14b4b.slk --dd-steps

  infer [U,@classic,@pure_field] self::char_star<0,p> 
    |- U(self,q)*q::char_star<0,p>

# extra base-case-fold relass. is it spurious?

<1>emp&{FLOW,(20,21)=__norm#E}[]
 inferred hprel: [self::char_star<flted_31_104,p>@M&
                   flted_31_104=0 |#|3  --> U(self,p)&true; 
                  emp&self=p |#|3  --> U(self,p)&true]
[[ SEARCH ==>  InferHeap]]

# -dd-steps did not trace process_action..

!!! **solver.ml#11463:HPRelInferred:[ emp&self=p |#|  --> U(self,p)]
(==solver.ml#13429==)
process_action#4@2@1
process_action#4 inp1 : BaseCaseFold =>
   LHS: self::char_star<flted_31_104,p>@M
   RHS: U(self,p)
process_action#4 inp2 :estate:  self::char_star<flted_31_104,p>@M&flted_31_104=0&{FLOW,(20,21)=__norm#E}[]
 es_infer_obj: [@pure_field,@leak]
 es_trace:  SEARCH
 es_infer_vars_hp_rel: [U]
process_action#4 inp3 :conseq: U(self,p)&{FLOW,(20,21)=__norm#E}[]
process_action#4 inp4 :lhs_b: self::char_star<flted_31_104,p>@M&flted_31_104=0&{FLOW,(20,21)=__norm#E}[]
process_action#4 inp5 :rhs_b: U(self,p)&{FLOW,(20,21)=__norm#E}[]
process_action#4@2 EXIT:
ctx length:0 
 Context: MaybeErr Context: 
   fe_kind: MAY
   fe_name: 
   fe_locs: {
     fc_message: memory leak
     fc_current_lhs_flow: {FLOW,(20,21)=__norm#E}
   }
 [[ SEARCH ==>  BaseCaseFold]]
 CEX:true

-------------------------------------
# Below was from a prior step..
  
 es_infer_hp_rel: [emp&self=p |#|  --> U(self,p)]

(==solver.ml#13429==)
process_action#4@3@1
process_action#4 inp1 : InferHeap => ( U(self,p), emp)
  
process_action#4 inp2 :estate:  self::char_star<flted_31_104,p>@M&flted_31_104=0&{FLOW,(20,21)=__norm#E}[]
 es_infer_hp_rel: [emp&self=p |#|  --> U(self,p)]
 es_infer_obj: [@pure_field,@leak]
 es_trace:  SEARCH
 es_infer_vars_hp_rel: [U]
 es_infer_hp_rel: [emp&self=p |#|  --> U(self,p)]
process_action#4 inp3 :conseq: U(self,p)&{FLOW,(20,21)=__norm#E}[]
process_action#4 inp4 :lhs_b: self::char_star<flted_31_104,p>@M&flted_31_104=0&{FLOW,(20,21)=__norm#E}[]
process_action#4 inp5 :rhs_b: U(self,p)&{FLOW,(20,21)=__norm#E}[]
process_action#4@3 EXIT:


*/
