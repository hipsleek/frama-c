data char_star {
  int val;
  char_star next;
}.

pred WSS<p> ==
  self::WFSeg<q>*q::char_star<0,p> 
  inv self!=null.

pred WFSeg<p> ==
  self=p 
  or self::char_star<v,q>*q::WFSeg<p> & v!=0
  inv true.

pred WFG<p> ==
  self::char_star<0,p>
  or self::char_star<v,q>*q::WFG<p> & v!=0
  inv self!=null.


  HeapPred U(char_star x,char_star y).
  HeapPred U2(char_star x,char_star y).

lemma_unsafe self::WFG<p> <- U(self,q2)*q2::char_star<0,p>.

infer [U2,@classic,@pure_field] U2(q3,q)*q::char_star<0,p>  |- q3::WFG<p> .
print residue.

/*

# ex16c3a.slk

infer [U2,@classic,@pure_field] U(q3,q)*q::char_star<0,p>  |- q3::WFG<p> .

# Why did an InferUnfold fail?

(==solver.ml#11190==)
process_action#1@6@4@3
process_action#1 inp1 : InferUnfold =>
   LHS: U2(q3,q)
   RHS: U(q3,q2_151)
process_action#1 inp2 :estate:
  U2(q3,q) * q::char_star<flted_26_132,p>@M&flted_26_132=0&
{FLOW,(20,21)=__norm#E}[]
 es_evars: [flted_24_150; q2_151; p_145]
 es_gen_impl_vars(E): []
 es_infer_obj: [@pure_field,@leak]
 es_evars: [flted_24_150; q2_151; p_145]
 es_rhs_eqset: [p_145:p]
 es_trace:  SEARCH ==>  (Lemma <== lem_12(UNK))
 es_infer_vars_hp_rel: [U2]
process_action#1 inp3 :conseq: U(q3,q2_151) * q2_151::char_star<flted_24_150,p_145>@M&flted_24_150=0&
{FLOW,(20,21)=__norm#E}[]
process_action#1 inp4 :lhs_b:
 U2(q3,q) * q::char_star<flted_26_132,p>@M&flted_26_132=0&
{FLOW,(20,21)=__norm#E}[]
process_action#1 inp5 :rhs_b: U(q3,q2_151) * q2_151::char_star<flted_24_150,p_145>@M&flted_24_150=0&
{FLOW,(20,21)=__norm#E}[]
process_action#1@6 EXIT:
ctx length:0 
 Context: MaybeErr Context: 
   fe_kind: MAY
   fe_name: separation entailment
   fe_locs: {
     fc_message: infer_heap_node
     fc_current_lhs_flow: {FLOW,(20,21)=__norm#E}
   }
 [[ SEARCH ==>  (Lemma <== lem_12(UNK)) ==>  InferUnfold ]]
 CEX:true


*/
