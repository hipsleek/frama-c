data char_star {
  int val;
  char_star next;
}.

HeapPred U(char_star x,char_star@NI p).
//HeapPred QQ(char_star x,char_star y,char_star z).

pred QQ<sp,p> ==
     self::char_star<0,p> & self=sp
  or self::char_star<v,q>*q::QQ<sp,p> & v!=0
inv self!=null & sp!=null .

pred WFSeg<p> ==
  self=p 
  or self::char_star<v,q>*q::WFSeg<p> & v!=0
  inv true.

/*
// both valid
lemma_safe
   self::QQ<sp,p> <- self::WFSeg<sp>*sp::char_star<0,p>.

lemma_safe
   self::QQ<sp,p> -> self::WFSeg<sp>*sp::char_star<0,p>.
*/

lemma_infer [U,@classic,@pure_field] 
   self::QQ<sp,p> <- U(self,sp)*sp::char_star<0,p>.

print residue.

/*


 Temp Lemma(s) inferred is valid in current context.
Residue:

 <1>emp&{FLOW,(20,21)=__norm#E}[]
 inferred hprel: [U(self_lem_12,sp@NI)&
                   true |#| sp::char_star<flted_29_140,p>@M&
                   flted_29_140=0 --> emp&self_lem_12=sp]
[[ SEARCH ==>  BaseCaseUnfold ==>  Match(sp,self_lem_12)]]

<2>emp&{FLOW,(20,21)=__norm#E}[]
inferred hprel: [
  HP_166(v_164@NI,sp@NI,self_lem_12@NI)&true |#|3  --> emp&v_164!=0; 
  HP_167(q_120,sp@NI,self_lem_12@NI)&true |#|3  
    --> U(q_120,sp@NI)&true; 
  U(self_lem_12,sp@NI)&true |#|3  
    --> self_lem_12::char_star<v_164,q_165>@M * 
        HP_166(v_164@NI,sp@NI,self_lem_12@NI) * 
        HP_167(q_165,sp@NI,self_lem_12@NI)&
                  true]

[[ SEARCH ==>  InferUnfold  ==>  SEARCH ==>  (Lemma <== lem_12(UNK)) ==>  Match(sp,sp_157) ==>  InferUnfold ]]

  U(self_lem_12,sp@NI)&true |#|3  
    --> self_lem_12::char_star<v_164,q_165>@M * 
        HP_166(v_164@NI,sp@NI,self_lem_12@NI) * 
        HP_167(q_165,sp@NI,self_lem_12@NI)

 // unfold HP_166
  U(self_lem_12,sp@NI)&true |#|3  
    --> self_lem_12::char_star<v_164,q_165>@M * 
        HP_167(q_165,sp@NI,self_lem_12@NI)& v_164!=0

 // unfold HP_167
  U(self_lem_12,sp@NI)&true |#|3  
    --> self_lem_12::char_star<v_164,q_165>@M * 
        U(q_165,sp@NI)& v_164!=0


 inferred hprel: 
  U(self_lem_12,sp@NI)&true |#| sp::char_star<flted_29_140,p>@M&
      flted_29_140=0 --> emp&self_lem_12=sp]
  // drop guard
  U(self_lem_12,sp@NI) --> emp&self_lem_12=sp]

  Hence:

  U(self_lem_12,sp@NI)&true |#|3  
    --> self_lem_12::char_star<v_164,q_165>@M *  U(q_165,sp@NI)& v_164!=0
     or emp&self_lem_12=sp

*/