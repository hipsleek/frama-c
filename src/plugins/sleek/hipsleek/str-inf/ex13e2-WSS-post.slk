
data char_star {
  int val;
  char_star next;
}.

HeapPred Q(char_star x,char_star y,char_star z).

infer[Q,@classic,@pure_field]
 s::char_star<v_1631,q_1632>@M * Q(q,s',p_1648)&
q_1616!=null & q=q_1632 & Anon_18=v_1631 & v!=0 & Anon_19=q_1632 & 
v=v_1631 & v_1631!=0 & p_1630=q_1616 & s_1647=s & p_1614=p & 
flted_10_1615=0 & v_bool_37_1602' & q_1651=p_1630 & p_1614=p_1648 
 |-  Q(s,s',p).
print residue.

/*
# ex13e2.slk

infer[Q,@classic,@pure_field]
 s::char_star<v_1631,q_1632>@M * Q(q,s',p_1648)&
q_1616!=null & q=q_1632 & Anon_18=v_1631 & v!=0 & Anon_19=q_1632 & 
v=v_1631 & v_1631!=0 & p_1630=q_1616 & s_1647=s & p_1614=p & 
flted_10_1615=0 & v_bool_37_1602' & q_1651=p_1630 & p_1614=p_1648 
 |-  Q(s,s',p).

# (1) fold may be done in two steps
# (2) Where did spurious relational assumption in ex13e.ss came from?
   (1;0)emp&s=s' & s=p & s'=p |#|  --> Q(s,s',p)]


Starting Omega.../usr/local/bin/oc
 <1>emp&p_1614=p_1648 & p=p_1648 & s=s_1647 & p_1630=q_1651 & Anon_18=v & 
        v_1631=v & q=Anon_19 & q_1632=Anon_19 & q_1616=q_1651 & 
        v_bool_37_1602' & q_1651!=null & v!=0&{FLOW,(20,21)=__norm#E}[]
 inferred hprel: [s::char_star<v_1631,q>@M * Q(q,s',p)&
                   v_1631!=0 |#|3  --> Q(s,s',p)&true]
[[ SEARCH ==>  COND ==>  SEARCH ==>  InferFold ]]


id: 18; caller: []; line: 30; classic: true; kind: POST; hec_num: 1; evars: []; impl_vars: []; infer_vars: [ Q]; c_heap: emp; others:  es_infer_obj: [@leak,@pure_field] globals: [@flow,@ver_post,@leak]
 checkentail s::char_star<v_1631,q_1632>@M * Q(q,s',p_1648)&
q_1616!=null & q=q_1632 & Anon_18=v_1631 & v!=0 & Anon_19=q_1632 & 
v=v_1631 & v_1631!=0 & p_1630=q_1616 & s_1647=s & p_1614=p & 
flted_10_1615=0 & v_bool_37_1602' & q_1651=p_1630 & p_1614=p_1648 & MayLoop[]&
{FLOW,(4,5)=__norm#E}[]
 |-  Q(s,s',p)&{FLOW,(4,5)=__norm#E}[]. 
hprel_ass: [ (1;0)s::char_star<v_1631,q>@M * Q(q,s',p)&v_1631!=0 |#|  --> Q(s,s',p),
 (1;0)emp&s=s' & s=p & s'=p |#|  --> Q(s,s',p)]
ho_vars: nothing?
res:  1[
    emp&
q_1616!=null & q=q_1632 & Anon_18=v_1631 & v!=0 & Anon_19=q_1632 & 
v=v_1631 & v_1631!=0 & p_1630=q_1616 & s_1647=s & p_1614=p & 
flted_10_1615=0 & v_bool_37_1602' & q_1651=p_1630 & p_1614=p_1648&
{FLOW,(4,5)=__norm#E}[]
   es_infer_hp_rel: [(1;0)s::char_star<v_1631,q>@M * Q(q,s',p)&
                      v_1631!=0 |#|  --> Q(s,s',p)]
   es_gen_impl_vars(E): []
   ]
*/