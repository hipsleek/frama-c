data char_star {
  int val;
  char_star next;
}.

pred PP<p:char_star> ==
   self::char_star<v,q> * q::PP<p> & v!=0
   or self::char_star<v,p> & v=0.

HeapPred P(char_star x).
HeapPred HP_1620(char_star x).

relAssume //(1)
P(s) --> s::char_star<v_1618,Anon_1619>@M * HP_1620(Anon_1619).

relAssume //(2)
HP_1620(Anon_1619) |#| s::char_star<v_1618,Anon_1619>@M&v_1618!=0
 & Anon_1619=z --> P(Anon_1619).

relAssume //(3)
HP_1620(Anon_1619) |#| s::char_star<v_1618,Anon_1619>@M&v_1618=0 --> emp.

print relAssumes.

//shape_simplify [P,HP_1620].

//print relAssumes.

shape_add_dangling [P,HP_1620].

print relAssumes.

shape_add_dangling [P,HP_1620].

print relAssumes.


shape_simplify [P,HP_1620].

print relAssumes.

shape_merge [P,HP_1620].
print relAssumes.


//shape_unfold [P].
//shape_unfold [P].
//shape_unfold [HP_1620].
shape_unfold [P,HP_1620].
shape_unfold [P,HP_1620].

//shape_merge [P,HP_1620].

print relAssumes.

shape_param_dangling [P,HP_1620].
shape_param_dangling [P,HP_1620].

print relAssumes.


shape_trans_to_view [P,HP_1620].

shape_trans_to_view [P,HP_1620].

/*
# ex20.slk --pcp 

# why isn't views printed in detail?
  Is it in view_decls field?

# Can we make sure that trans_to_view is done
  only once and would be idempotent?

  shape_trans_to_view [P,HP_1620].
*/
print relAssumes.

/*
# ex20.slk

  [unfold P(s,Anon_37) |#|  --> s::char_star<v_1618,Anon_1619>@M * 
                                P(Anon_1619,Anon_37)&v_1618!=0
                                or s::char_star<v_1618,Anon_37>@M&v_1618=0
                                ; 

# transform to view lacks the dangling parameter derived for P.
  similarly for HP_1620 

  [unfold P(s,Anon_37) |#|  --> s::char_star<v_1618,Anon_1619>@M * 
                                P(Anon_1619,Anon_37)&v_1618!=0
                                or s::char_star<v_1618,Anon_37>@M&v_1618=0
                                ; 
   unfold HP_1620(Anon_1619,Anon_38) |#| s::char_star<v_1618,Anon_1619>@M --> 
    P(Anon_1619,Anon_37)&v_1618!=0
    or emp&v_1618=0
    ]

 view P<>= 
  EBase 
    self::char_star<v_1618,Anon_1619>@M * Anon_1619::P<Anon_37>NOANN&
    v_1618!=0&{FLOW,(20,21)=__norm#E}[]
    or self::char_star<v_1618,Anon_37>@M&v_1618=0&{FLOW,(20,21)=__norm#E}[]

 view HP_1620<>= 
  EBase 
    self::P<Anon_37>NOANN&v_1618!=0&{FLOW,(20,21)=__norm#E}[]
    or emp&v_1618=0&{FLOW,(20,21)=__norm#E}[]

========================

shape_trans_to_view [P,HP_1620].

# current method to transform is below:

# Loc: can we use an older method to perform the
  translation as it may be more complete the the
  correct normalization

let process_shape_trans_to_view hps = 
  let f hps =
    let trans_views = Syn.trans_hprel_to_view !cprog hps in
    hps 
  in
  process_sleek_hprel_assumes "Transforming to View" hps f

 view P<>= 
  EBase 
    self::char_star<v_1618,Anon_1619>@M * Anon_1619::P<Anon_33>NOANN&
    v_1618!=0&{FLOW,(20,21)=__norm#E}[]
    or self::char_star<v_1618,Anon_33>@M&v_1618=0&{FLOW,(20,21)=__norm#E}[]
    
!!! **cprinter.ml#4410:view_labels:[]
!!! **cprinter.ml#4412:v.view_params_orig:[]
!!! **syn.ml#671:View Decl of HP_1620:
 view HP_1620<>= 
  EBase 
    self::P<Anon_33>NOANN&v_1618!=0&{FLOW,(20,21)=__norm#E}[]
    or emp&v_1618=0&{FLOW,(20,21)=__norm#E}[]
================================================    
# where was Anon_1619=Anon_1619 introduced and why?

 [P(s) |#|  --> s::char_star<v_1618,Anon_1619>@M * HP_1620(Anon_1619); 
   HP_1620(Anon_1619) |#| s::char_star<v_1618,Anon_1619>@M&
    v_1618!=0 & Anon_1619=Anon_1619 --> P(Anon_1619); 
   HP_1620(Anon_1619) |#| s::char_star<v_1618,Anon_1619>@M&
    v_1618=0 & Anon_1619=Anon_1619 --> emp]
-------------------------------------

*/
