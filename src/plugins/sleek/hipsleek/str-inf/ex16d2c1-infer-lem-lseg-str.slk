data char_star {
  int val;
  char_star next;
}.

pred WSS<p> ==
  self::WFSeg<q>*q::char_star<0,p> 
  inv self!=null.

pred WFSeg<p> ==
  self=p 
  or self::char_star<v,q>*q::WFSeg<p> & v!=0
  inv true.

pred WFG<p> ==
  self::char_star<0,p>
  or self::char_star<v,q>*q::WFG<p> & v!=0
  inv self!=null.

  //lemma_safe self::WFG<p> -> self::WFSeg<q>*q::char_star<0,p>.
  //lemma_safe self::WFG<p> <- self::WFSeg<q>*q::char_star<0,p>.

  HeapPred U(char_star x,char_star y).
  HeapPred U2(char_star x,char_star y).
  HeapPred U3(char_star x,char_star y,char_star@NI z).

 lemma_unsafe self::WFG<p> -> U(self,q)*q::char_star<0,p>.


 //infer [@pure_field,@classic] q2::WFG<p> & v!=0 & q2=q3  |-  U(q3,q)*q::char_star<0,p>.
 //infer [U2,@pure_field,@classic] q2::WFG<p> & v!=0 & q2=q3  |-  U2(q3,q)*q::char_star<0,p>.

 infer [U2,@classic] U(q2,q_155) & q2=q3  |-  U2(q3,q).
 expect Valid.

//(2)
 infer [U2,@classic] U(q2,q_155)  |-  U2(q3,q).
 expect Fail.

 infer [U2,@classic] U(q2,q_155)  & q2=q3  |-  U2(q3,q_155).
 expect Valid.

//(4)
 infer [U2,@classic] U(q2,q_155)  & q2=q3 & q!=null  |-  U2(q3,q).
 expect Fail.

//(5)
infer [U2,@classic] U(q2,q_155)  & q2=q3 & q_155=q  |-  U2(q3,q).
 expect Valid.
// expects U(q2,q_155) --> U2(q2,q_155)

infer [U2,@classic] U(q2,q_155)  & q2=q3 & q_155!=null  |-  U2(q3,q).
 expect Valid.
//  inferred hprel: [U(q2,q)&q!=null |#|3  --> U2(q2,q)&true]

//(7)
infer [U2,@classic] U(q2,q_155)  & q2=q3 & q_155=null  |-  U2(q3,q).
 expect Valid.
//  inferred hprel: [U(q2,q)&q=null |#|3  --> U2(q2,q)&true]

//(8)
infer [U2,@classic] U3(q2,q_155,q)  & q2=q3 & q_155=null  |-  U2(q3,q).
 expect Valid.

//(9)
infer [U2,@classic] U3(q2,q_155,q1)  & q2=q3 & q_155=null  |-  U2(q3,q).
 expect Valid.
print residue.
// inferred hprel: [U3(q2,q_155,q1@NI)&q_155=null |#|3  --> U2(q2,q)&true]

//(10 | less)
infer [U2,@classic] U(q2,q1)  & q2=q3 & q_155=null  |-  U2(q3,q).
 expect Valid.
// inferred hprel: [U(q2,q)&true |#|3  --> U2(q2,q)&true]

print residue.
/*
# ex16d2c1.slk 

# why cannot prove below?

//(5)
infer [U2,@classic] U(q2,q_155)  & q2=q3 & q_155=q  |-  U2(q3,q).
 expect Valid.
// expects U(q2,q_155) --> U2(q2,q_155)


# why instantiate (10) but not (9)
  Do we need to instantiate?

//(9)
infer [U2,@classic] U3(q2,q_155,q1)  & q2=q3 & q_155=null  |-  U2(q3,q).
 expect Valid.
print residue.
// inferred hprel: [U3(q2,q_155,q1@NI)&q_155=null |#|3  --> U2(q2,q)&true]

//(10 | less)
infer [U2,@classic] U(q2,q1)  & q2=q3 & q_155=null  |-  U2(q3,q).
 expect Valid.
// inferred hprel: [U(q2,q)&true |#|3  --> U2(q2,q)&true]

------------------------

 infer [U2,@classic] U(q2,q_155) & q2=q3  |-  U2(q3,q).

# Why infer_fold fail?

  EXPECTS:  U2(q2,q) <-- U(q2,q)

  Do we represent FOLD as U(..) <-- RHS

!!! **solver.ml#12425:process_action (steps) :
 ### action :
 InferFold =>
   Type: Root
   LHS: U(q2,q_155)
   RHS: U2(q3,q)
   lhs_rest: emp
   rhs_rest: emp
   rhs_inst: []
 ### estate :
 ex_formula : U(q2,q_155)&q2=q3&{FLOW,(20,21)=__norm#E}[]
 es_heap:emp
 ### conseq : U2(q3,q)&{FLOW,(20,21)=__norm#E}[]

!!! **lemma.ml#259:
Updated lemma store with unsafe repo::[lem_12]
(==solver.ml#13337==)
infer_collect_hp_rel#1@1
infer_collect_hp_rel#1 inp1 :lhs_node: U(q2,q_155)
infer_collect_hp_rel#1 inp2 :rhs_node: U2(q3,q)
infer_collect_hp_rel#1 inp3 :lhs: U(q2,q_155)&q2=q3&{FLOW,(20,21)=__norm#E}[]
infer_collect_hp_rel#1 inp4 :rhs: U2(q3,q)&{FLOW,(20,21)=__norm#E}[]
infer_collect_hp_rel#1 inp5 :es: U(q2,q_155)&q2=q3
infer_collect_hp_rel#1@1 EXIT:(true,2: es_formula: 
 U(q2,q_155)&q2=q3&{FLOW,(20,21)=__norm#E}[]
 es_infer_vars_hp_rel: [U2]
 es_infer_hp_rel: [emp |#|  --> U2(q2,q)],3:abd heap: U2(q2,q),4:Some( emp),5:None)

(==solver.ml#8329==)
infer_collect_hp_rel_empty_rhs#1@2
infer_collect_hp_rel_empty_rhs#1 inp1 : es_formula: 
 U(q2,q_155)&q2=q3&{FLOW,(20,21)=__norm#E}[]
 es_infer_vars_hp_rel: [U2]
 es_infer_hp_rel: [emp |#|  --> U2(q2,q)]
infer_collect_hp_rel_empty_rhs#1 inp2 : true
infer_collect_hp_rel_empty_rhs#1@2 EXIT:(Res:false,Sel HP:
 es_formula: 
 U(q2,q_155)&q2=q3&{FLOW,(20,21)=__norm#E}[]
 es_infer_vars_hp_rel: [U2]
 es_infer_hp_rel: [emp |#|  --> U2(q2,q)],Inferred Relations:[],lhs base: U(q2,q_155)&q2=q3&{FLOW,(20,21)=__norm#E}[])

Entail (1) : Fail.(may) cause:**solver.ml#8362:

Residue:

 MaybeErr Context: 
   fe_kind: MAY
   fe_name: separation entailment
   fe_locs: {
     fc_message: memory leak
     fc_current_lhs_flow: {FLOW,(20,21)=__norm#E}
   }
 [[ InferFold ]]
 CEX:true

----------------------

 infer [U,U2,@classic] U(q2,q_155) & q2=q3  |-  U2(q3,q).
 inferred hprel: [U(q2,q)&true |#|3  --> U2(q2,q)&true]

 infer [U,@classic] U(q2,q_155) & q2=q3  |-  U2(q3,q).
 inferred hprel: [U(q2,q)&true |#|3  --> U2(q2,q)&true]

push_list(es_infer_hp_rel):[ emp |#| q_155::char_star<flted_27_154,p>@M&flted_27_154=0 --> U2(q2,q)]



*/
