data char_star {
  int val;
  char_star next;
}.

pred WSS<p> ==
  self::WFSeg<q>*q::char_star<0,p> 
  inv self!=null.

pred WFSeg<p> ==
  self=p 
  or self::char_star<v,q>*q::WFSeg<p> & v!=0
  inv true.

pred WFG<p> ==
  self::char_star<0,p>
  or self::char_star<v,q>*q::WFG<p> & v!=0
  inv self!=null.

  //lemma_safe self::WFG<p> -> self::WFSeg<q>*q::char_star<0,p>.
  //lemma_safe self::WFG<p> <- self::WFSeg<q>*q::char_star<0,p>.

  HeapPred U(char_star x,char_star y).

  lemma_unsafe self::WFG<p> <- U(self,q)*q::char_star<0,p>.


  infer [U,@classic,@pure_field] U(self,q)*q::char_star<0,p> |- self::char_star<0,p>.

  //infer[U,@classic] U(self,q)*q::char_star<0,p> |- self::WFG<p>.
  print residue.

/*
# ex14b5a.slk 

  infer [U,@classic,@pure_field] U(self,q)*q::char_star<0,p> |- self::char_star<0,p>.

Entail (1) : Fail.(may) cause: emp&flted_28_130=0&{FLOW,(20,21)=__norm#E}[]: possible memory leak failure : residue is forbidden.

!!! **context.ml#2840:compute_action (steps) :
 ### RHS Cand :[ self::char_star<flted_28_149,p_148>@M]
 ### action :
 SEARCH =>[
  Prio:2
  BaseCaseUnfold =>
    LHS: U(self,q)
    RHS: self::char_star<flted_28_149,p_148>@M;
  Prio:2
  InferHeap => ( self::char_star<flted_28_149,p_148>@M, emp)
   
  ]

# I think we may need to schedule two possibilities

  (i)  BaseCaseFold with U(self,q) --> self=q

  (ii) Unfold for Unknown, where:
           U(self,q) --> self::char_star<_,q1>*H(q1,q,self@NI)

I think the notion of InferHeap is too general, and would
need to be dissipated into our more structured commands that
we have already introduced to support verification.

=============================================================


# Need to schedule a base_case_unfold ..

!!! **context.ml#2465:process_matches (steps) :
 ### LHS : U(self,q) * q::char_star<flted_28_130,p>@M
 ### RHS : self::char_star<flted_28_149,p_148>@M
 ### matches :
[ Type: Root
 LHS: U(self,q)
 RHS: self::char_star<flted_28_149,p_148>@M
 lhs_rest: q::char_star<flted_28_130,p>@M
 rhs_rest: emp]

!!! **context.ml#2833:compute_action (steps) :
 ### RHS Cand :[ self::char_star<flted_28_149,p_148>@M]
 ### action :
 InferHeap => ( self::char_star<flted_28_149,p_148>@M, emp)

*/
