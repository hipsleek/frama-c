        data char_star {
  int val;
  char_star next;
}.

pred WSS<p> ==
  self::WFSeg<q>*q::char_star<0,p> 
  inv self!=null.

pred WFSeg<p> ==
  self=p 
  or self::char_star<v,q>*q::WFSeg<p> & v!=0
  inv true.

pred WFG<p> ==
  self::char_star<0,p>
  or self::char_star<v,q>*q::WFG<p> & v!=0
  inv self!=null.


  HeapPred U(char_star x,char_star y).
  HeapPred U2(char_star x,char_star y).
 HeapPred D(char_star x).



infer [U2,@pure_field] U2(q3,q) *q::char_star<0,p>  |- U(q3,qq)*qq::char_star<0,qqq> .
print residue.
expect Valid.


infer [U2,@pure_field] U2(q3,q) *q::char_star<0,p>  |- U(q3,qq)*qq::char_star<0,p> .
print residue.
expect Valid.

infer [U2,@pure_field] U2(q3,q) *q::char_star<0,p>  |- U(q3,qq)*qq::char_star<n,p> .
print residue.
expect Valid.


/*
# ex16c3c.slk

infer [U2,@pure_field] U2(q3,q) *q::char_star<0,p>  |- U(q3,qq)*qq::char_star<n,p> .

 <1>emp&qq=q & n=0&{FLOW,(20,21)=__norm#E}[]
 inferred hprel: [U2(q3,q)&true |#|3  --> U(q3,q)&true]

# Please add the heap guard:

    U2(q3,q)&true |#| q::char<0,_>  --> U(q3,q)&true]

*/
