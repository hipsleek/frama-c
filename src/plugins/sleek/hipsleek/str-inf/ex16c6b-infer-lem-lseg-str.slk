data char_star {
  int val;
  char_star next;
}.

pred WSS<p> ==
  self::WFSeg<q>*q::char_star<0,p> 
  inv self!=null.

pred WFSeg<p> ==
  self=p 
  or self::char_star<v,q>*q::WFSeg<p> & v!=0
  inv true.

pred WFG<p> ==
  self::char_star<0,p>
  or self::char_star<v,q>*q::WFG<p> & v!=0
  inv self!=null.

  //lemma_safe self::WFG<p> -> self::WFSeg<q>*q::char_star<0,p>.
  //lemma_safe self::WFG<p> <- self::WFSeg<q>*q::char_star<0,p>.

  HeapPred U(char_star x,char_star y).
  HeapPred U2(char_star x,char_star y).
  HeapPred U2a(char_star x,char_star y).
  HeapPred U3(char_star x,char_star y,char_star z).

HeapPred U3a(char_star x,char_star@NI y,char_star@NI z).

 lemma_unsafe self::WFG<p> <- U(self,q)*q::char_star<0,p>.

 infer [U,@pure_field,classic] U3a(q2,qqq,_)*qqq::char_star<0,p>  |- q2::WFG<p> & v!=0.
 print residue.

/*
//(3).
 infer [U,@pure_field,classic] U(self,qqq)*qqq::char_star<0,p>  |- self::char_star<v,q2>*q2::WFG<p> & v!=0.
 print residue.
 expect Valid.
*/

 //infer [U,@pure_field] U(self,qqq)*qqq::char_star<0,p>  |- self::char_star<v,q2>*q2::WFG<p> & v!=0.

/*

infer [U,@pure_field] U(self,qqq)*qqq::char_star<0,p>  |- self::char_star<v,p> & v!=0.
 print residue.
 expect Valid.
*/

/*
 infer [U,@pure_field] U(self,qqq)*qqq::char_star<0,p>  |- self::char_star<v,q2> & v!=0.
 print residue.
 expect Valid.
*/
/*
# ex16c6b.slk -show-push-list "es_infer_hp_rel"

U(self,qqq) |#| qqq::char_star<flted_32_137,_>@M& flted_32_137=0   
   --> self::char_star<v_155,q2_156>@M * 
       HP_157(v_155,qqq@NI,self@NI) * HP_158(q2_156,qqq@NI,self@NI)]

# Please avoid complex LHS (@ 2nd InferUnfold):

!!! **infer.ml#3837:mis-matched:(false,false,false)
push_list(es_infer_hp_rel):[ U(self,qqq) * qqq::char_star<flted_32_137,p>@M&
  flted_32_137=0 |#|  --> self::char_star<v_155,q2_156>@M * 
                          HP_157(v_155,self) * HP_158(q2_156,self)]

(==solver.ml#13282==)
infer_collect_hp_rel#1@4@3@2
infer_collect_hp_rel#1 inp1 :lhs_node: U(self,qqq)
infer_collect_hp_rel#1 inp2 :rhs_node: self::char_star<v,q2>@M
infer_collect_hp_rel#1 inp3 :lhs: U(self,qqq) * qqq::char_star<flted_32_137,p>@M&flted_32_137=0&
{FLOW,(20,21)=__norm#E}[]
infer_collect_hp_rel#1 inp4 :rhs:
 self::char_star<v,q2>@M * q2::WFG<p_154>@M&v!=0 & p_154=p&
{FLOW,(20,21)=__norm#E}[]
infer_collect_hp_rel#1 inp5 :es: U(self,qqq) * qqq::char_star<flted_32_137,p>@M&flted_32_137=0
infer_collect_hp_rel#1@4 EXIT:(true,2: es_formula: 
 HP_157(v_155,self) * HP_158(q2_156,self)&flted_32_137=0&
 {FLOW,(20,21)=__norm#E}[]
 es_infer_vars_hp_rel: [U; HP_157; HP_158]
 es_infer_hp_rel: [U(self,qqq) * qqq::char_star<flted_32_137,p>@M&
                    flted_32_137=0 |#|  --> self::char_star<v_155,q2_156>@M * 
                                            HP_157(v_155,self) * 
                                            HP_158(q2_156,self)],3:abd heap: self::char_star<v_155,q2_156>@M,4:None,5:None)

------

  U(self,qqq) * qqq::char_star<flted_32_137,p>@M&
         flted_32_137=0 |#|3  --> self::char_star<v_155,q2_156>@M * 


 <1>emp&v!=0&{FLOW,(20,21)=__norm#E}[]
 inferred hprel: [HP_157(v_155@NI,self@NI)&true |#|3  --> emp&v_155!=0; 
                  HP_158(q2,p@NI)&true |#|3  --> q2::WFG<p>@M&true; 
                  U(self,qqq) * qqq::char_star<flted_32_137,p>@M&
                   flted_32_137=0 |#|3  --> self::char_star<v_155,q2_156>@M * 
                                            HP_157(v_155@NI,self@NI) * 
                                            HP_158(q2_156,self@NI)&
                   true]
[[ SEARCH ==>  InferUnfold  ==>  SEARCH ==>  InferUnfold ]]
*/

