data char_star {
  int val;
  char_star next;
}.


HeapPred HP3(int x,char_star y).
HeapPred HP4(char_star x,char_star y).

infer [HP3,HP4,@classic,@pure_field] 
 HP3(v_1601,s) * HP4(Anon_1602,s) * s::char_star<v_1601,Anon_1602>@M&
!(v_bool_37_1598') & s'=s & v=v_1601 & Anon_19=Anon_1602 & v=0 
 |-  htrue.
print residue.


/*
# ex13c5b2.slk

infer [HP3,HP4,@classic,@pure_field] 
 HP3(v_1601,s) * HP4(Anon_1602,s) * s::char_star<v_1601,Anon_1602>@M&
!(v_bool_37_1598') & s'=s & v=v_1601 & Anon_19=Anon_1602 & v=0 
 |-  htrue.

<1>emp&v=0 & Anon_19=Anon_1602 & v=v_1601 & s'=s & !(v_bool_37_1598')&{FLOW,(20,21)=__norm#E}[]
 inferred hprel: [HP3(v_1601@NI,s)&
                   Anon_19=Anon_1602 & v=v_1601 & s'=s & v=0 |#|3  --> emp&
                   true; 
                  HP4(Anon_1602,s)&
                   Anon_19=Anon_1602 & v=v_1601 & s'=s & v=0 |#|3  --> emp&
                   true]

#  Why is guard outcome diff from --esl from ex13c5b.ss --esl
   Did we remove the node before unknown predicate?
   Why is there no trace?

id: 12; caller: []; line: 30; classic: true; kind: POST; hec_num: 1; evars: []; impl_vars: []; infer_vars: [ P,HP_1603,HP_1604]; c_heap: emp; others:  es_infer_obj: [@leak,@pure_field] globals: [@flow,@ver_post,@leak]
 checkentail HP_1603(v_1601,s) * HP_1604(Anon_1602,s) * s::char_star<v_1601,Anon_1602>@M&
!(v_bool_37_1598') & s'=s & v=v_1601 & Anon_19=Anon_1602 & v=0 & MayLoop[]&
{FLOW,(4,5)=__norm#E}[]
 |-  htrue&{FLOW,(4,5)=__norm#E}[]. 
hprel_ass: [ (2;0)HP_1603(v_1601,s)&
  s'=s & v=v_1601 & v=0 |#| s::char_star<v_1601,Anon_1602>@M&
  Anon_19=Anon_1602 --> emp,
 (2;0)HP_1604(Anon_1602,s)&
  s'=s & Anon_19=Anon_1602 |#| s::char_star<v_1601,Anon_1602>@M&
  (v=0 | v=v_1601) --> emp]
ho_vars: nothing?
res:  1[
    emp&!(v_bool_37_1598') & s'=s & v=v_1601 & Anon_19=Anon_1602 & v=0&
{FLOW,(4,5)=__norm#E}[]
   es_gen_impl_vars(E): []
   ]
*/
