data char_star {
  int val;
  char_star next;
}.

HeapPred P(char_star x).
HeapPred HP_1620(char_star x).

//checkentail P(x) |- P(x).

relAssume //(1)
P(s) --> s::char_star<v_1618,Anon_1619>@M * HP_1620(Anon_1619).

relAssume //(2)
HP_1620(Anon_1619) |#| s::char_star<v_1618,Anon_1619>@M&v_1618!=0 --> P(Anon_1619).

relAssume //(3)
HP_1620(Anon_1619) |#| s::char_star<v_1618,Anon_1619>@M&v_1618=0 --> emp.

print relAssumes.

shape_add_dangling [P,HP_1620].

print relAssumes.

shape_merge [P,HP_1620].

print relAssumes.

shape_unfold [P].
//shape_unfold [HP_1620].
//shape_unfold [P,HP_1620].

print relAssumes.

shape_param_dangling [P,HP_1620].

print relAssumes.

shape_trans_to_view [P,HP_1620].

/*

!!! **sleekengine.ml#1613:Current list of heap relational assumptions:
 
  [P(s) |#|  --> s::char_star<v_1618,Anon_1619>@M * P(Anon_1619)&
    v_1618!=0 & Anon_1619=Anon_1619; 
   P(s) |#|  --> s::char_star<v_1618,Anon_1619>@M * Anon_1619::Dangling<>@M&
    v_1618=0 & Anon_1619=Anon_1619; 
   HP_1620(Anon_1619) |#| s::char_star<v_1618,Anon_1619>@M&
    v_1618!=0 & Anon_1619=Anon_1619 --> P(Anon_1619); 
   HP_1620(Anon_1619) |#| s::char_star<v_1618,Anon_1619>@M&
    v_1618=0 & Anon_1619=Anon_1619 --> Anon_1619::Dangling<>@M]

# merging HP_1628 (with guard)

   HP_1620(Anon_1619) |#| s::char_star<v_1618,Anon_1619>@M& --> 
    P(Anon_1619) & v_1618!=0 \/
    Anon_1619::Dangling<>@M & v_1618=0 

# merging P

  P(s) |#|  --> s::char_star<v_1618,Anon_1619>@M * P(Anon_1619)&
       v_1618!=0 & Anon_1619=Anon_1619
   \/  s::char_star<v_1618,Anon_1619>@M * Anon_1619::Dangling<>@M&
       v_1618=0 & Anon_1619=Anon_1619; 


     P -> A \/ B
  ------------------
   P -> A \/ P -> B


      P -> A & a \/ B & !a- 
 --------------------------------
   P -> (a-> A) /\ P -> (!a-> B) 
 --------------------------------
    P -> A & a  /\ P -> B & !a


*/

