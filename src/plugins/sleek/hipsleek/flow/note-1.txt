1 int max( i n t x, i n t y)
2  where { @x = @return, @y = @return } {
3  if (x = y) 
        {x = y;}
4  return x;
5 }

Can S(x) <: S(res) be captured as x <s: res.
This may be OK if x is related as x::<value,security>

requires true
ensures  x <s: res /\  y <s: res

// 
    {D o_{C} C'=C+V & C=f} e1 {D2}
    {D o_{C} C'=C+V & C=f} e2 {D3}
---------------------------------------------
{D} if test(V) e1 else e2 {(D2\/D3) o_{C} C'=f}

----------------------------------------------------

      {D,C} e0 {D0}
      V = var_tested(e0)
      {D0,C+V} e1 {D1}
      {D0,C+V} e2 {D2}
 --------------------------------------- 
   {D,C} if (e0) e1 else e2 {D1\/D2}

           {D,C} e {D1} 
 -----------------------------------------------
  {D,C} v = e  {D1 o_{v} (v'=res & C<:v')}
 
           {D,C} e {D1} 
 ------------------------------------------
  {D,C} v = e  {D1 o_{v} (v'=res & C<:v')}



           {D,C} 5 {D & res=5} 
 ------------------------------------------
  {D,C} v = 5  {(ex res: D & res=5 o_{v} (v'=res & C<:v'))}
  {D,C} v = 5  {D & v'=5 & C<:v'}



     if (H=0) () else ()


  max(x,y)
   requires true,C
   ensures  x<:res & y<:res 




           {D,C} e {D1}
 -------------------------------------
  {D,C} log.f = e  {C<:f & log<:f}


  maxMsg(log,x,y)
   requires log<:L,C
   ensures  x<:res & y<:res & C<:L;

  maxMsg(log,x,y)
   requires true,C
   ensures  x<:res & y<:res & C<:L & log<:L;



  update(ref v) 
    requires true,C
    ensures  C<:v' & v'=5;
  {
       v = 5
  }


  just5 () 
    requires true,C
    ensures  res=5;
  {
       ret 5
  }

   {D,C}
    v = just5()
   {(ex res: (D/\res=5) o_{v} v'=res & C<:v')}
   {D & v'=5 & C<:v'}

  {D,C} update(v) {D o_{v} v'=5 & C<:v'}



  {D,C} mn(...)


 if F(x,y,z) then
  // Context' = Context + {x,y,z}
  v = ...
  // {x,y,z} <: v & Context<:v & State = State+{v'}
 else ..
 // Context'=Context

if F(v) then
   // Context'=Context+{v'}
   w = ..
   // Context'=Context+{v'} & v <: w & Context<:w & State = State+{w'}

// Context'=Context

method(...,Context, ref State)

if F(x) {
  //Context'=Context+{x}
  print(1);
  // L<:L & Context+{x}<:L
  // Context<:L & x<:L

}

print(v)
 requires true
 ensures  v<:L & Context<:L;



foo(int v} 
  requires true
  ensures  exists(v': L<:v' & Context<:v' & State'=State+{v'};
  ensures  exists(v':  Context<:v' & & State'=State+{v'})
  ensures  true ;
{
  // Context'=Context
  v = 5
  // print(v) # how to model? 
  // L<:v' & Context<:v' & State = State+{v'}
}

foo(ref int v} 
  requires true
  ensures  Context<:v' & State' = State+{v'};
{
  // Context'=Context
  v = 5
  // L<:v' & Context<:v' & State = State+{v'}
}

foo(ref Log v} 
  requires true
  ensures  Context<:L & State' = State+{L};
  ensures  Context<:L & State' = State+{L};
{
  // Context'=Context
  v.low = 5
  // L<:L & Context<:L & State' = State+{L}
}


S(constant) = L


6 class Log { String buffer[LOW]; ... }
7 int maxWithMessage(Log log, int x, int y)
8   where { @x = @return
9   , @y = @return
10   , @log = LOW
11   } and { LOW }
   {
12 if (x = y) { x = y; }
13 log.buffer = "max was called";
14 return x;
15 }

requires
ensures   x<:res & y<:res & qstate'=qstate+{L};


context = {....}
