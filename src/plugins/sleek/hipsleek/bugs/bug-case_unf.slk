data node {
	int val; 
	node prev;	
	node next;	
}.


pred dll_r5<p,t,n> == 
  self=n & p=t
  or self::node<_,p,q> * q::dll_r5<self,t,n> & self!=n
  inv true.

lemma "dll_r5_tail" self::dll_r5<p,t,n> & self!=n <-> 
      self::dll_r5<p,q,t> * t::node<_,q,n>.

checkentail 
   self::node<_,p,q3> * q3::dll_r5<self,t,n> & self!=n
     |- t::node<_,q,n> * self::dll_r5<p,q,t>.

// case q3=n
checkentail 
   self::node<_,p,q3> & q3=n & self=t & self!=n
     |- t::node<_,q,n> * self::dll_r5<p,q,t>.

checkentail 
   self::node<_,p,q3> 
  * q3::node<_,self,q4> * q4::dll_r5<q3,t,n> & q3!=n & self!=n
     |- t::node<_,q,n> * self::dll_r5<p,q,t>.

// case q3!=n, followed by left coercion; then fold.
checkentail 
   self::node<_,p,q3> * 
   q3::dll_r5<self,q4,t> * t::node<_,q4,n> & self!=n & q3!=n
     |- t::node<_,q,n> * self::dll_r5<p,q,t>.


checkentail 
   self::node<_,p,q3> * q3::dll_r5<self,t,n> & self!=n & q3=n
     |- t::node<_,q,n> * self::dll_r5<p,q,t>.

