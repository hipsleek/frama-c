

data node {
	int val; 
	node next;	
}.

data node2 {
	int val;
	node2 left;
	node2 right; 
}.


pred tree<m, n> == self = null & m = 0 & n = 0 
	or self::node2<_, p, q> * p::tree<m1, n1> * q::tree<m2, n2> & m = 1 + m1 + m2 & n = 1 + max(n1, n2)
	inv m >= 0 & n >= 0.

pred dll<p, n> == self = null & n = 0 
	or self::node2<_, p, q> * q::dll<self, n1> & n = n1+1
	inv n >= 0.

checkentail x::tree<m,n> & x=null |- (exists q : x::dll<q, m> & q=null).

checkentail x::tree<m,n> |- (exists q : x::dll<q, m> & q=null).
