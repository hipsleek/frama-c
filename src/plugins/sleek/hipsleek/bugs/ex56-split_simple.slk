data node { int val ; node next }.

data cell { int val}.

pred cellp<v> == self::cell<v>
     inv true.

pred ll<n> == self = null & n = 0
     or self::node<next = r> * r::ll<n - 1>
     inv n>=0.

pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.

pred ll_tail<tx, n> == self::node<_, null> & tx=self & n=1
	or self::node<_, r> * r::ll_tail<tx, n-1> & r!=null
	inv n>=1.
	 

lemma "tail2lseg" self::ll_tail<t, n> <-> self::lseg<n-1, t> * t::node<_, null>.


//lemma "split1" self::cellp(f)<v> & 0<f<=1 & f=f1+f2 & f1>0 & f2>0  -> self::cellp(f1)<v> * self::cellp(f2)<v>.
lemma "split2" self::cellp(f)<v> & f=f1+f2 &f1>0.0 & f2>0.0 -> self::cellp(f1)<v> * self::cellp(f2)<v>.
//lemma "split3" self::cellp(f)<v> & f=f1+f2 & 1.0>f1>0.0 & 1.0>f2>0.0 -> self::cellp(f1)<v> * self::cellp(f2)<v>.

//lemma "R2L" self::lseg<n, p> & n = a + b & a,b >=0 <- self::lseg<a, r> * r::lseg<b, p>.

lemma "L2R" self::lseg<n, p> & n = a + b & a,b >=0 <-> self::lseg<a, r> * r::lseg<b, p>.

// more precise lemmas to keep the invariant with the entailment.
//lemma "split1" self::cellp(f)<v> & f=f1+f2 & f1>0.0 & f2>0.0  -> self::cellp(f1)<v> * self::cellp(f2)<v> & 0.0<f<=1.0 .
//lemma "L2R" self::lseg<n, p> & n = a + b & a,b >=0 <-> self::lseg<a, r> * r::lseg<b, p> & n>=0.
//lemma "split3" self::cellp(f)<v> & f=f1+f2 & 1.0>f1>0.0 & 1.0>f2>0.0 -> self::cellp(f1)<v> * self::cellp(f2)<v> & 0.0<f<=1.0.

//(1)
checkentail x::cellp(1.0)<v1> |-  x::cellp(0.5)<v1>.
//print residue. //valid & residue is correct after adding instatiating ivars

/*
# ex56.slk --en-para -perm fperm -tp redlog --old-norm-w-coerc --old-lemma-settings --new-lemma-unfold

# unfolding affected normalization of some permissions lemma ..

!!! **WARNING****solver.ml#9915:impl_inst and to_conseq not properly built
!!! **cvutil.ml#893:h_formula_2_mem: [Begin] check fractional variable  perm_38_282 is full_perm

Entail 1: Fail.(may) cause:base case unfold failed

!!!:0: 0: **lemma.ml#230:ldef:
=>coerc split2
	 head: (emp ; (emp ; (self::cellp{}(f)<v>[HeapNode1]))) * ([] & (f = f1+f2) & ((f1 > 0.) & (f2 > 0.)))( FLOW __norm)
	 body:(emp ; (emp ; ((self::cellp{}(f1)<v>[HeapNode1]) * (self::cellp{}(f2)<v>[HeapNode1])))) * ([] & true)( FLOW __norm)lemmas(to be proved and saved)

!!!:0: 0: **lemma.ml#231:res_ldef:
=>coerc split2
	 head: (emp ; (emp ; (self::cellp{}(f)<v>[HeapNode1]))) * ([] & (f = f1+f2) & ((f1 > 0.) & (f2 > 0.)))( FLOW __norm)
	 body:(EX v_192 v_191 . (emp ; (emp ; ((self::cell{}()<v_191,>@M[HeapNode1]) * (self::cell{}()<v_192,>@M[HeapNode1]))))*([] & (((v_192:int)) = ((v:int))) & (((v_191:int)) = ((v:int))))( FLOW __norm))lemmas(to be proved and saved)

*/