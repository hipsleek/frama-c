data node {
	int val; 
	node next;	
}.

/*
pred ll<n> == self = null & n = 0 
	or self::node<_, q> * q::ll<n-1> 
  inv n >= 0.
*/

HeapPred H1(node x).
HeapPred H2(node x, int n).

// (1)
infer [H1] H1(y) |- y::node<a,b>.
print residue.
expect Valid.

/*
# ex55j.slk -dd-steps

!!! **context.ml#2803:compute_action (steps) :
 ### RHS Cand :[ y::node<a,b>@M]
 ### action :
 NothingToDo => 
    Type: Root
 LHS: H1(y)
 RHS: y::node<a,b>@M
 lhs_rest: emp
 rhs_rest: emp

--old-infer-heap

!!! **context.ml#2803:compute_action (steps) :
 ### RHS Cand :[ y::node<a,b>@M]
 ### action :
 COND =>[
  Prio:2
  InferHeap => ( y::node<a,b>@M, emp)
   ;
  Prio:4
  UnmatchedRHSData =>  y::node<a,b>@M
  ]
===============================================
// (3)
infer [H1]  H1(y) |- y::node<a,b> * b::node<c,d>.
print residue.
expect Valid.

// (4)
infer [H1]  H1(y) |- y::node<a,b> * b::ll<m>.
print residue.
expect Valid.
*/