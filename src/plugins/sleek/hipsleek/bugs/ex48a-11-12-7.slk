/*
@M - mutable   (0)
@I - immutable (1)
@L - lending   (2)
@A - no access (3)
*/

//data cell {int val;}.

data node {
	int val; 
	node next;	
}.

pred ll<n, v1> == self = null & n = 0 
	or self::node<a@v1, q> * 
    q::ll<n-1, v1>
  inv n >= 0.

// (7) Valid
checkentail x::node<p,q> * q::ll<n,_> & n > 1 |- x::ll<n+1,_> & n > 1.
print residue.
expect Valid.

// (11) Valid
checkentail x::node<a@M, r@M> * r::node<b@M, r2@M> * r2::ll<n, v2> |- x::ll<n + 2, v2>.
print residue.
expect Valid.

// (12) Valid
checkentail x::node<_, r> * r::node<_, r2> * r2::ll<n,_> |- x::ll<n + 2,_>.
print residue.
expect Valid.

