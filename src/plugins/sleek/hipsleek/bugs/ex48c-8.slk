/*
@M - mutable   (0)
@I - immutable (1)
@L - lending   (2)
@A - no access (3)
*/

//data cell {int val;}.

data node {
	int val; 
	node next;	
}.

pred ll<v1> == self = null 
	or  self::node<a@v1, qq> * 
    qq::ll<v1>
  inv true      .


/*
checkentail x::node<p,q> * q::ll<ann1> & ann2=@A |- x::ll<ann2> .
print residue.
expect Valid.

checkentail x::node<p,q> * q::ll<@A> & ann2=@A |- x::ll<ann2> .
print residue.
expect Valid.

checkentail x::node<p,q> * q::ll<@M> & ann2=@M |- x::ll<ann2> .
print residue.
expect_infer Valid R{emp}. // classic proving needed

*/
checkentail x::node<p,q> * q::ll<@A> & ann2=@M |- x::ll<ann2> .
print residue.
expect Fail.

/*


  x::ll<@A> |- x::ll<@A> --> emp // x::ll

  x::ll<@M> |- x::ll<@M> --> emp // should be empty

  x::ll<@M> |- x::ll<@A> --> emp // May Failure ..

  x::ll<@A> |- x::ll<@M> --> emp // May Failure ..

 --

Residue:
 <1>(exists ann2_35: q::ll<ann1>@M * x::node<p@M,q_40@A>@M&ann2_35=@A & a_36=p & @M<:ann2_35 & ann2=@A&{FLOW,(20,21)=__norm#E}[]
[[ Fold ==>  SEARCH ==>  Match(x,x) ==>  COND ==>  Match(q,q)]]


(====) fixed
subs_imm_par@41@40
subs_imm_par inp1 :[(ann2_30,ann2_34)]
subs_imm_par inp2 :@M
subs_imm_par@41 EXIT:@M

(==solver.ml#7220==)
subst@40
subst inp1 :[(ann2_30,ann2_34)]
subst inp2 : x::ll{}<ann2_30>@M&ann2_30=ann2&{FLOW,(20,21)=__norm#E}[]
subst@40 EXIT: x::ll{}<ann2_30>@M&ann2_34=ann2&{FLOW,(20,21)=__norm#E}[]

===============================================================================
before fold: ann2_34=ann2 
inside fold i do not have this info which is usefull for the inst


(====) 
heap_entail_one_context_struc#99@41@23@22@21@19@18@17@16@15@14@13@12@11@9@8
heap_entail_one_context_struc#99 inp1 :conseq:
 EList
   :EBase 
      (* lbl: *){1}->emp&x=null&{FLOW,(1,26)=__flow#E}[]
   || :EBase 
         exists (Expl)[](Impl)[a_35](ex)[](* lbl: *){2}->(exists qq_36: (* lbl: *){2}->
         x::node<a_35@ann2_34,qq_36@M>@M * qq_36::ll<ann2_34>@M&
         {FLOW,(1,26)=__flow#E}[]
   
heap_entail_one_context_struc#99 inp2 :  x::node<p@M,q@M>@M * q::ll<@A>@M&ann2=@M&{FLOW,(20,21)=__norm#E}[]
 es_evars: [ann2_34]
 es_trace:  Fold
 es_unsat_flag: false
 es_proof_traces: 
   [x::node<p,q>@M * q::ll<@A>@M&ann2=@M:x::ll<ann2_34>@M&ann2_34=ann2&
    {FLOW,(20,21)=__norm#E}[]]
heap_entail_one_context_struc#99 inp3 :is_folding:true
heap_entail_one_context_struc#99 inp4 :has_post:false
heap_entail_one_context_struc#99@41 EXIT: [
   x::node<p@M,q_39@A>@M&ann2=@M & @M<:ann2_34 & a_35=p & ann2_34=@A&
{FLOW,(20,21)=__norm#E}[]


(==solver.ml#7669==)
heap_entail_non_empty_rhs_heap@23@22@21@19@18@17@16@15@14@13@12@11@9@8
heap_entail_non_empty_rhs_heap inp1 :  x::node<p@M,q@M>@M * q::ll<@A>@M&ann2=@M&{FLOW,(20,21)=__norm#E}[]
 es_evars: [ann2_34]
 
heap_entail_non_empty_rhs_heap inp2 :LHS base: x::node<p@M,q@M>@M * q::ll<@A>@M&ann2=@M&{FLOW,(20,21)=__norm#E}[]
heap_entail_non_empty_rhs_heap inp3 :RHS base: x::ll<ann2_34>@M&ann2_34=ann2&{FLOW,(20,21)=__norm#E}[]
heap_entail_non_empty_rhs_heap inp4 :ante    : x::node<p@M,q@M>@M * q::ll<@A>@M&ann2=@M&{FLOW,(20,21)=__norm#E}[]
heap_entail_non_empty_rhs_heap inp5 :conseq  : x::ll<ann2_34>@M&ann2_34=ann2&{FLOW,(20,21)=__norm#E}[]
heap_entail_non_empty_rhs_heap inp6 :matched_set:[]
heap_entail_non_empty_rhs_heap@23 EXIT:( [
   x::node<p@M,q_39@A>@M&ann2_34=@A & a_35=p & @M<:ann2_34 & ann2=@M&
{FLOW,(20,21)=__norm#E}[]
  ],<Fold>
<FoldProof>
<Failure></Failure></FoldProof>
<Pure>
Success
</Pure>
</Fold>
)



*/