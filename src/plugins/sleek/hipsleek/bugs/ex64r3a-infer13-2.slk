// examples from bi-abduction paper

data node {
	node next;	
}.

pred ll<n> == self = null & n = 0 
	or self::node<q> * q::ll<n-1> 
  inv n >= 0.

HeapPred H1(node y).

//(2)
infer [H1] H1(y)*x::node<null>*z::node<null>  |- 
    x::ll<n> 
   //* y::ll<m>
    .
print residue.
expect Valid.

infer [] H1(y)
    *z::node<null> 
    & x=null  |- 
    x=null
   //x::ll<n> 
   //* y::ll<m>
    .
print residue.
expect Valid.


/*
# ex64r3.slk --dd-callers-all

infer [zzz,H1] H1(y)*x::node<zzz>   |- y::lseg<null> * x::lseg<zzz> .

# How come do_fold_w_ctx recursive here?

*/
