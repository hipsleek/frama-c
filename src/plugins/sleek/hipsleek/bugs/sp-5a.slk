data node{
	int val;
	node next;
}.


HeapPred P1(node a).
HeapPred P2(node a).

//1
infer_exact [P1] 
   self=null
|- P1(p) & self=p.
print residue.
// expect fail


//(2)
infer_exact [P1] 
   self=null
|- P1(self) & self=p.
print residue.
// expect fail


//(3)
infer [P1] 
   self=null
|- P1(p) & self=p.
print residue.
// expect fail


//(4)
infer [P1] 
   self=null
|- P1(self) & self=p.
print residue.
// expect self=null --> P1(self)
//fail: can not prove self-p in rhs?

//(5)
infer [P1] 
   self=null
|- P1(self).
print residue.
// expect self=null --> P1(self)

//(6)
infer [P1] 
   self=null & self=p
|- P1(p) .
print residue.
// expect self=null --> P1(self)

//7
infer [P1] 
   self::node<_,_>
|- P1(p).
print residue.
// expect emp --> P1(self)

//8
infer [P1] 
   self::node<_,_>
|- P1(self).
print residue.
// expect self::node<..> --> P1(self)

//9
infer_exact [P1] 
   self::node<_,_>
|- P1(p).
print residue.
// fail

//10
infer_exact [P1] 
   self::node<_,_>
|- P1(self).
print residue.
// expect self::node<_,_> --> P1(self)

//11
infer_exact [P1] 
   self::node<_,p> & p=null
|- P1(p).
print residue.
// expect self::node<_,_> --> P1(self)
// should fail?

//12
infer [P1] 
   self::node<_,p> & p=null
|- P1(p).
print residue.
// expect self::node<_,_> --> P1(self)
//p=null --> P1(p) ??

//13
infer [P1] 
   self::node<_,p> & p=self
|- P1(p).
print residue.
// expect self::node<_,_> --> P1(self)

//14
infer [P1] 
   self::node<_,p> & p=null
|- P1(self) & p=null.
print residue.
// expect self::node<_,p> & p=null --> P1(self)

//15
infer [P1] 
   self::node<_,p> & p=self
|- P1(p) & p!=null.
print residue.
// expecting it to succeed
