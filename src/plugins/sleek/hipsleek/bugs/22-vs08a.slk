data node {
  node f0;
}.

pred ls<yyy:node> ==
 self = yyy
or (exists xp: self::node<xp> * xp::ls<yyy> //& null != self 
   & self != yyy).


//lemma_unsafe self::ls<z> <- (exists u: self::ls<u>*u::ls<z> * z::node<_>@L).

lemma_unsafe self::ls<z> <- (exists u: self::ls<u>*u::ls<z> * z::ls<null>@L).

lemma_unsafe self::ls<null> <- (exists u: self::ls<u>*u::ls<null>).


checkentail x::ls<y> * y::ls<z> * z::ls<null>
         |- x::ls<z> * z::ls<null>.
expect Valid.
// why above fails?

checkentail x::ls<y> * y::ls<null>
         |- x::ls<null> .
expect Valid.

// succeeds


/*
# 22-vs08a.slk

Two more lemmas for non-touching predicate?
They add significantly to the search mechanism.
Also, the first example still have some "hole" failure message.

*/
