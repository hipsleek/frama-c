/* quick sort */

/* quick sort is now done over lists with tail pointer
   so that append can be done in constant time */

data node {
	int val; 
	node next; 
}.

// sorted lseg
/*
pred lseg<n, p, sm, lg> == self=p & n=0 & sm=lg
		or self::node<sm, r> * r::lseg<n-1, p, sm1, lg> & sm<=sm1<=lg
	inv n >= 0 & sm<=lg.
*/

pred lseg<n, p,sm,lg> == case {
     n=0 -> [] self = p & sm=lg;
     n=1 -> [] self::node<sm,p> & sm=lg;
     (n<0 | n>1) ->  [] self::node<sm,r> * r::lseg<b,p,sm1,lg> 
                 & b=n-1 & sm<=sm1<=lg; 
     }
     inv n >= 0 & sm<=lg.


// sorted list with tail
pred ll_tail<n, t, sm, lg> == self::node<sm, null> & t=self & n=1 & sm=lg
		or self::node<sm, r> * r::ll_tail<n-1, t, sm1, lg> & r!=null & sm<=sm1
	inv n>=1 & self!=null.

// bounded list with tail
pred bnd_tail<n, t, sm, lg> == self = null & n = 0 & t=null & sm <= lg
	or self::node<v, null> & t = self & n = 1 & sm <= v <= lg
	or self::node<d, p> * p::bnd_tail<n-1, t, sm, lg> & sm <= d <= lg & p!=null
inv n >= 0 & sm<=lg.

// why proof not in both directions?
lemma "lsegmb" self::lseg<n, p, sm, lg> & n = n1+n2 & n1,n2 >=0  
    <- (exists lg1,sm2: self::lseg<n1, q, sm, lg1> * q::lseg<n2, p, sm2, lg> & lg1<=sm2).

lemma "lsegmb2" self::lseg<n, p, sm, lg> & n = n1+n2 & n1,n2 >=0  
    -> (exists lg1,sm2: self::lseg<n1, q, sm, lg1> * q::lseg<n2, p, sm2, lg> & lg1<=sm2).

lemma "ll_tail2lseg" self::ll_tail<n, t, sm, lg> -> (exists lg1: self::lseg<n-1, t, sm, lg1> * t::node<lg, null> & lg1<=lg).

lemma "ll_tail2lseg-2" self::ll_tail<n, t, sm, lg> <- (exists lg1: self::lseg<n-1, t, sm, lg1> * t::node<lg, null> & lg1<=lg).

/*
coercion "lsegmb" self::lseg<n, p, sm, lg> <-> self::lseg<n1, q, sm, lg1> * q::lseg<n2, p, sm2, lg> & n=n1+n2 & lg1<=sm2; 
*/


