//Valid.Valid.Valid.Valid.Valid.Valid.Fail.Valid.Fail
data node { int val ; node next }.

pred ll_s<n> == self = null & n = 0
	or self::node<next = r> * r::ll_s<n - 1>
	inv n >= 0.

pred ll<> == self = null 
	or self::node<next = r> * r::ll<>
	inv true.

lemma_safe "V1" self::ll_s<n> -> self::ll<>.
// valid

lemma_safe "V2" self::ll_s<n> <- self::ll<>.
// valid
/*
!!! orig body:(EX  . (self::ll<>@M[HeapNode1])*(true)( FLOW __flow))
!!! LP:rhs: EBase self::ll_s<n>@M&{FLOW,(1,22)=__flow}[]
Entailing lemma V2: Fail. 
*/

lemma_safe "V3" self::ll_s<n> <-> self::ll<>.
// valid
// valid
/*
Entailing lemma_safe V3: Fail. Details below:
	 "->" implication: : Valid.
	 "<-" implication: : Fail. 
*/

lemma_safe "V4" self::ll<> -> (exists n: self::ll_s<n>).
// valid

lemma_safe "V5" self::ll<> <- (exists n: self::ll_s<n>).
// valid

lemma_safe "V6" self::ll<> <-> (exists n: self::ll_s<n>).
// valid (both sides!)

lemma_safe "F7" self::ll<> -> self::ll_s<n>.
// valid

lemma_safe "V8" self::ll<> <- self::ll_s<n>.
// valid

lemma_safe "F9" self::ll<> <-> self::ll_s<n>.
// valid (both ways)

