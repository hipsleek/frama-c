data node { int val ; node next }.


/*
pred lseg_nt<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg_nt<n - 1, p> & self!=p
         inv n >= 0.
*/

pred lseg_nt<n, p> == case {
     n=0 -> [] self = p & n = 0;
     n!=0 ->  [] self::node<next = r> * r::lseg_nt<b, p> & b=n-1 & self!=p ; 
//   n!=0 ->  [] self::node<next = r> * r::lseg<n-1, p> ; 
     }
     inv n >= 0.


lemma self::lseg_nt<n, p> & n = a + b & a,b >=0 -> self::lseg_nt<a, r> * r::lseg_nt<b, p>.

