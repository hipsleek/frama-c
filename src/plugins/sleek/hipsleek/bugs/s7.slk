data node { int val ; node next }.


/*
pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.
*/

pred lseg<n, p> == case {
     n=0 -> [] self = p & n = 0;
     n!=0 ->  [] self::node<next = r> * r::lseg<b, p> & b=n-1 ; 
     }
     inv n >= 0.


checkentail self::lseg<n,p>& n>=2 |-
   self::node<next = r2> * r2::node<_,r>.


//checkentail x::lseg<n, p> & n > 1000 |- (exists r1: x::lseg<n1, r1> * r1::lseg<n2, p> & n1 >= 1 & n2 <=2 ).



