data node {
  int val;
  node next;
}.

// (27) Valid
infer [] y::node<_,_>@I |- y::node<a,b>@v & v<:@I.
print residue.
expect Valid.


/*
# bugs/ex1a.slk (ann2.slk) --imm

infer [] y::node<_,_>@I |- y::node<a,b>@v & v<:@I.

# expect Valid but pure missing from phase reasoning
# soln : add pure back into reasnoning for earlier phases

Entail (1) : Fail.(may) cause: @I<:v |-  v<:@I. LOCS:[0;7] (may-bug)

Residue:
 
MaybeErr Context: 
                   fe_kind: MAY
                   fe_name: logical bug
                   fe_locs: {
                             fc_message:  @I<:v |-  v<:@I. LOCS:[0;7] (may-bug)
                             fc_current_lhs_flow: {FLOW,(20,21)=__norm#E}}
[[ SEARCH ==>  Match(y,y) ==> ]]
CEX:false

===============================================
--imm -dre  "heap_entail\|heap_n_" 

(==solver.ml#7639==)
heap_entail_non_empty_rhs_heap@15@14@13@12@11@10@9@8@7@6@5@4@3@2@1
heap_entail_non_empty_rhs_heap inp1 : y::node<Anon_12,Anon_13>@I&{FLOW,(20,21)=__norm#E}[]
 es_gen_impl_vars: [v; b; a]
 es_infer_vars_rel: []
 es_unsat_flag: false
heap_entail_non_empty_rhs_heap inp2 :LHS base: y::node<Anon_12,Anon_13>@I&{FLOW,(20,21)=__norm#E}[]
heap_entail_non_empty_rhs_heap inp3 :RHS base: y::node<a,b>@v&{FLOW,(20,21)=__norm#E}[]
heap_entail_non_empty_rhs_heap inp4 :ante    : y::node<Anon_12,Anon_13>@I&{FLOW,(20,21)=__norm#E}[]
heap_entail_non_empty_rhs_heap inp5 :conseq  : y::node<a,b>@v&{FLOW,(20,21)=__norm#E}[]
heap_entail_non_empty_rhs_heap inp6 :matched_set:[]
heap_entail_non_empty_rhs_heap@15 EXIT:( 
[
 y::node<Anon_12,Anon_13>@[@I, @v]&@I<:v & a=Anon_12 & b=Anon_13&
   {FLOW,(20,21)=__norm#E}[]
 ]
,<Pure>
Success
</Pure>
)

(==solver.ml#7215==)
heap_entail_conjunct_helper#3@14@13@12@11@10@9@8@7@6@5@4@3@2@1
heap_entail_conjunct_helper#3 inp1 : y::node<Anon_12,Anon_13>@I&{FLOW,(20,21)=__norm#E}[]
 es_gen_impl_vars: [v; b; a]
 es_infer_vars_rel: []
 es_unsat_flag: false
heap_entail_conjunct_helper#3 inp2 : y::node<a,b>@v&{FLOW,(20,21)=__norm#E}[]
heap_entail_conjunct_helper#3@14 EXIT: 
[
 y::node<Anon_12,Anon_13>@[@I, @v]&@I<:v & a=Anon_12 & b=Anon_13&
   {FLOW,(20,21)=__norm#E}[]
 ]

(==solver.ml#6556==)
heap_entail_conjunct#5@13@12@11@10@9@8@7@6@5@4@3@2@1
heap_entail_conjunct#5 inp1 :false
heap_entail_conjunct#5 inp2 : y::node<Anon_12,Anon_13>@I&{FLOW,(20,21)=__norm#E}[]
 es_gen_impl_vars: [v; b; a]
 es_infer_vars_rel: []
 es_unsat_flag: false
heap_entail_conjunct#5 inp3 : y::node<a,b>@v&{FLOW,(20,21)=__norm#E}[]
heap_entail_conjunct#5@13 EXIT: 
[
 y::node<Anon_12,Anon_13>@[@I, @v]&@I<:v & a=Anon_12 & b=Anon_13&
   {FLOW,(20,21)=__norm#E}[]
 ]


(==solver.ml#6357==)
heap_entail_split_lhs_phases@12@11@10@9@8@7@6@5@4@3@2@1
heap_entail_split_lhs_phases inp1 : y::node<Anon_12,Anon_13>@I&{FLOW,(20,21)=__norm#E}[]
 es_gen_impl_vars: [v; b; a]
 es_infer_vars_rel: []
heap_entail_split_lhs_phases inp2 :RHS: y::node<a,b>@v&{FLOW,(20,21)=__norm#E}[]
heap_entail_split_lhs_phases@12 EXIT: 
[
 y::node<Anon_12,Anon_13>@[@I, @v]&@I<:v & a=Anon_12 & b=Anon_13&
   {FLOW,(20,21)=__norm#E}[]
 ]

===================================================

--field-imm -dre  "heap_entail\|heap_n_" 

(==solver.ml#7639==)
heap_entail_non_empty_rhs_heap@12@11@10@9@8@7@6@5@4@3@2@1
heap_entail_non_empty_rhs_heap inp1 : y::node<Anon_12,Anon_13>@I&{FLOW,(20,21)=__norm#E}[]
 es_gen_impl_vars: [v; b; a]
 es_infer_vars_rel: []
heap_entail_non_empty_rhs_heap inp2 :LHS base: y::node<Anon_12,Anon_13>@I&{FLOW,(20,21)=__norm#E}[]
heap_entail_non_empty_rhs_heap inp3 :RHS base: y::node<a,b>@v&v<:@I&{FLOW,(20,21)=__norm#E}[]
heap_entail_non_empty_rhs_heap inp4 :ante    : y::node<Anon_12,Anon_13>@I&{FLOW,(20,21)=__norm#E}[]
heap_entail_non_empty_rhs_heap inp5 :conseq  : y::node<a,b>@v&v<:@I&{FLOW,(20,21)=__norm#E}[]
heap_entail_non_empty_rhs_heap inp6 :matched_set:[]
heap_entail_non_empty_rhs_heap@12 EXIT:( 
[
 y::node<Anon_12,Anon_13>@A&v=@I & a=Anon_12 & b=Anon_13&
   {FLOW,(20,21)=__norm#E}[]
 ]
(==solver.ml#7215==)
heap_entail_conjunct_helper#3@11@10@9@8@7@6@5@4@3@2@1
heap_entail_conjunct_helper#3 inp1 : y::node<Anon_12,Anon_13>@I&{FLOW,(20,21)=__norm#E}[]
 es_gen_impl_vars: [v; b; a]
 es_infer_vars_rel: []
heap_entail_conjunct_helper#3 inp2 : y::node<a,b>@v&v<:@I&{FLOW,(20,21)=__norm#E}[]
heap_entail_conjunct_helper#3@11 EXIT: 
[
 y::node<Anon_12,Anon_13>@A&v=@I & a=Anon_12 & b=Anon_13&
   {FLOW,(20,21)=__norm#E}[]
 ]


(==solver.ml#5721==)
heap_entail_conjunct#1@10@9@8@7@6@5@4@3@2@1
heap_entail_conjunct#1 inp1 :false
heap_entail_conjunct#1 inp2 : y::node<Anon_12,Anon_13>@I&{FLOW,(20,21)=__norm#E}[]
 es_gen_impl_vars: [v; b; a]
 es_infer_vars_rel: []
heap_entail_conjunct#1 inp3 : y::node<a,b>@v&v<:@I&{FLOW,(20,21)=__norm#E}[]
heap_entail_conjunct#1@10 EXIT: 
[
 y::node<Anon_12,Anon_13>@A&v=@I & a=Anon_12 & b=Anon_13&
   {FLOW,(20,21)=__norm#E}[]
 ]


(==solver.ml#5173==)
heap_entail_conjunct_lhs#1@9@8@7@6@5@4@3@2@1
heap_entail_conjunct_lhs#1 inp1 :prog_decl
heap_entail_conjunct_lhs#1 inp2 :false
heap_entail_conjunct_lhs#1 inp3 : y::node<Anon_12,Anon_13>@I&{FLOW,(20,21)=__norm#E}[]
 es_gen_impl_vars: [v; b; a]
 es_infer_vars_rel: []
heap_entail_conjunct_lhs#1 inp4 : y::node<a,b>@v&v<:@I&{FLOW,(20,21)=__norm#E}[]
heap_entail_conjunct_lhs#1 inp5 :1 File "",Line:0,Col:0
heap_entail_conjunct_lhs#1@9 EXIT:
 ctx =  
[
 y::node<Anon_12,Anon_13>@A&v=@I & a=Anon_12 & b=Anon_13&
   {FLOW,(20,21)=__norm#E}[]
 ]


%%%            heap_entail_split_rhs_phases@10.
%%%             isAnyConstFalse
%%%             ptr_equations_without_null
%%%              get_int_equality
%%%              pure_ptr_equations_aux
%%%             isAnyConstFalse
%%%             split_phase
%%%             heap_n_pure_entail
%%%              heap_entail_split_lhs_phases@11.
%%%               formula_of_context
%%%                add_mix_formula_to_formula_x
%%%                 merge_mems 
%%%               isAnyConstFalse
%%%               split_phase
%%%               heap_entail_conjunct@12.
%%%                heap_entail_conjunct_helper@13.
%%%                 isAnyConstFalse
%%%                 isAnyConstFalse
%%%                 heap_entail_non_empty_rhs_heap@14.
%%%                  h_fv
%%%                   h_fv_node
%%%                  split_linear_node_guided
%%%                  compute_actions
%%%                   choose_context
%%%                    h_fv
%%%                     h

*/