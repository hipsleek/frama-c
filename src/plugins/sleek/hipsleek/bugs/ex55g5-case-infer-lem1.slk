data node { int val ; node next }.


pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.


pred lseg2<n, p> == 
   case {
      n=0 -> [] self = p ;
      n!=0 -> [] self::node<next = r> * r::lseg2<n - 1, p>;
   }     inv n >= 0.

//case_infer [n] lseg.

/*
# ex55g5.slk

# Can we derive case-spec:

pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.
==>
pred lseg<n, p> == 
   case {
      n=0 -> [] self = p ;
      n!=0 -> [] self::node<next = r> * r::lseg<n - 1, p>;
   }     inv n >= 0.

*/