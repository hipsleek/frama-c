data node {
	int val; 
	node prev;	
	node next;	
}.


pred dll_r5<p,t,n> == 
  self=n & p=t
  or self::node<_,p,q> * q::dll_r5<self,t,n> & self!=n
  inv true.

lemma "dll_r5_tail" self::dll_r5<p,t,n> & self!=n 
  <-> self::dll_r5<p,q,t> * t::node<_,q,n>.

/*
lemma "dll_r5_tail_l2r" self::dll_r5<p,t,n> & self!=n 
  -> self::dll_r5<p,q,t> * t::node<_,q,n>.

lemma "dll_r5_tail_r2l" self::dll_r5<p,t,n> & self!=n 
  <- self::dll_r5<p,q,t> * t::node<_,q,n>.
*/

/*

checkentail self::dll_r5<p,t,n> & self!=n |-
      self::dll_r5<p,q,t> * t::node<_,q,n>.

// OK valid
checkentail 
   self::node<_,p,q3> * q3::dll_r5<self,t,n> & self!=n & q3!=n
     |- t::node<_,q,n> * self::dll_r5<p,q,t>.

// OK valid
checkentail 
   self::node<_,p,q3> * q3::dll_r5<self,t,n> & self!=n & q3=n
     |- t::node<_,q,n> * self::dll_r5<p,q,t>.

checkentail 
   self::node<_,p,q3> * q3::dll_r5<self,t,n> & self!=n
     |- t::node<_,q,n> * self::dll_r5<p,q,t>.

checkentail 
   self::node<_,p,q3> * q3::dll_r5<self,t,n> & self!=n & q3!=n
   or self::node<_,p,q3> * q3::dll_r5<self,t,n> & self!=n & q3=n
     |- t::node<_,q,n> * self::dll_r5<p,q,t>.

*/

//(1)
checkentail self::dll_r5<p,t,n> & self!=n |-
      self::dll_r5<p,q,t> * t::node<_,q,n>.
print residue.

//(2)
//valid after adding case analysis
checkentail 
   self::node<_,p,q3> * q3::dll_r5<self,t,n> & self!=n
     |- t::node<_,q,n> * self::dll_r5<p,q,t>.
print residue.

//(3)
checkentail 
   self::node<_,p,q3> * q3::dll_r5<self,t,n> & self!=n & q3!=n
   or self::node<_,p,q3> * q3::dll_r5<self,t,n> & self!=n & q3=n
     |- t::node<_,q,n> * self::dll_r5<p,q,t>.
print residue.

/*
//??? after normalizing case analysis, similar to the above -> why fail
checkentail 
   self::node<_,p,q3> * q3::dll_r5<self,t,n> & self!=n & (q3=n | q3!=n)
     |- t::node<_,q,n> * self::dll_r5<p,q,t>.
*/


/*
Using Cond_action:
Entail (2) : Valid. 
 <1>
    emp&n=q3 & self=t & n!=self & n=q3 & Anon_14=Anon_15 & p=q&
    {FLOW,(19,20)=__norm}[]
    or emp&n!=self & n!=q3 & self!=t&{FLOW,(19,20)=__norm}[]
Entail (3) : Valid.     
 <1>
    emp&n!=self & n!=q3 & self!=t&{FLOW,(19,20)=__norm}[]
    or emp&n=q3 & self=t & n!=self & n=q3 & Anon_17=Anon_18 & p=q&
       {FLOW,(19,20)=__norm}[]

Using Search:

 
*/



