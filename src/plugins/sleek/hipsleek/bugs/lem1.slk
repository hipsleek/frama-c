data node { int val ; node next }.


pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.

lemma_safe self::lseg<n, p> & n = a + b & a,b >=0 <-> self::lseg<a, r> * r::lseg<b, p>.


//checkentail x::lseg<n, p> & n = 7 |- x::lseg<n1, r1> & n1 > 3.


//checkentail x::lseg<n, p> & n = 7 |- x::lseg<n1, r1> & n1 = 3.
//print residue.
// valid but fail


checkentail x::lseg<a, r> * r::lseg<b,p> |- x::lseg<n, p>.


//checkentail x::lseg<n, p> & n = 7 |- x::lseg<n1, r1> * r1::lseg<n2,p> & n1 = 3 & n2=4.
//print residue.
// valid but fail

//checkentail x::lseg<n, p> & n = 7 |- [n1,n2] x::lseg<n1, r1> * r1::lseg<n2,p> & n1 = 3 & n2=4.
//print residue.

//checkentail x::lseg<n, p> & n = 7 |- (exists n1,n2: x::lseg<n1, r1> * r1::lseg<n2,p> & n1 = 3 & n2=4).
//print residue.

//checkentail x::lseg<n, p> & n = 7 |- x::lseg<n1, r1> * r1::lseg<n2,p> & n1 = 3 & n2=3.

//checkentail x::lseg<n, p> & n = 7 |- x::lseg<n1, r1> * r1::lseg<n2,p1> & n1 = 3 & n2=3.
//print residue.

//checkentail x::lseg<n, p> & n = 7 |- x::lseg<n1, r1> * r1::lseg<n2,p1> & n1 = 3 & n2=4.

//checkentail x::lseg<n, p> & n = 7 |- x::lseg<n1, r1> & n1 = 8.
print residue.
// invalid (but not with 3 lseg<..> on LHS
