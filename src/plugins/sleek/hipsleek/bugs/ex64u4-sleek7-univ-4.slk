data node { int val ; node next }.
//relation Univ(int x).

/*
pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.
*/

pred lseg<n, p> == case {
     n=0 -> [] self = p & n = 0;
//   n!=0 ->  [] self::node<next = r> * r::lseg<n - 1, p>; 
     n!=0 ->  [] self::node<next = r> * r::lseg<b,p> & b=n-1; 
     }
     inv n >= 0.

lemma_unsafe self::lseg<n, p> & n = a + b & a,b >=0 -> self::lseg<a, r> * r::lseg<b, p>.

//lemma self::lseg<n, p> & n>=a & a>=0  -> self::lseg<a, r> * r::lseg<b, p> & n=a+b.
//above cannot work!

// 4
checkentail x::lseg<nnn, p> & nnn > 9 |- x::lseg<n1, r1> * r1::lseg<n2, p> & n1 >= 9 & n2 >= 6.
expect Fail.
print residue.
// invalid-exception

/*
# ex64u4.slk

# why false in residue?

*/

