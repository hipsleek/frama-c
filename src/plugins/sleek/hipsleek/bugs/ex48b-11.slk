/*
@M - mutable   (0)
@I - immutable (1)
@L - lending   (2)
@A - no access (3)
*/

//data cell {int val;}.

data node {
	int val; 
	node next;	
}.

pred ll<n, v1> == self = null & n = 0 
	or self::node<a@v1, q> * 
    q::ll<n-1, v1>
  inv n >= 0.


// (11) Valid
checkentail x::node<a@M, r@M> * r::node<b@M, r2@M> * r2::ll<n, v2> |- x::ll<n + 2, v2>.
print residue.
expect Valid.

// (12) Valid
/*checkentail x::node<_, r> * r::node<_, r2> * r2::ll<n,_> |- x::ll<n + 2,_>.
print residue.
expect Valid.
*/

/*
# ex48b.slk --field-imm

checkentail x::node<a@M, r@M> * r::node<b@M, r2@M> * r2::ll<n, v2> |- x::ll<n + 2, v2>.

# why is there an exception?

Entail 1: EXCast. Failure("imm_to_spec_var do do not provide support for nested TempAnn/TempRes@[@M, @v2]")
: no residue 

Exception(compatible_ann):Failure("Cpure.ml currently we do not provide support for nested TempAnn/TempRes")
Exception(h_formula_2_mem):Failure("Cpure.ml currently we do not provide support for nested TempAnn/TempRes")
Exception(xpure_heap_symbolic):Failure("Cpure.ml currently we do not provide support for nested TempAnn/TempRes")
Exception(xpure_heap):Failure("Cpure.ml currently we do not provide support for nested TempAnn/TempRes")
Exception(xpure_imply):Failure("Cpure.ml currently we do not provide support for nested TempAnn/TempRes")
Exception(sem_imply_add):Failure("Cpure.ml currently we do not provide support for nested TempAnn/TempRes")
Exception(do_base_case_unfold_only):Failure("Cpure.ml currently we do not provide support for nested TempAnn/TempRes")
Exception(process_action):Failure("Cpure.ml currently we do not provide support for nested TempAnn/TempRes")
Exception(process_action):Failure("Cpure.ml currently we do not provide support for nested TempAnn/TempRes")
Exception(heap_entail_non_empty_rhs_heap):Failure("Cpure.ml currently we do not provide support for nested TempAnn/TempRes")
Exception(heap_entail_conjunct_helper):Failure("Cpure.ml currently we do not provide support for nested TempAnn/TempRes")


=========================================================
Fixed the exception at the cost of an extremly ugly residue:
Entail 1: Valid. 

Residue:
 <1>r2::ll<n,@[@v2, @v2]>@M * r::node<b@[@M, @v2],r2_69@A>@M * x::node<a@[@M, @v2],r_59@A>@M&
 @A=max(imm_99,v2) & 
 @M=min(imm_99,v2) & 
 @M=imm_99+v2 & 
 imm_100=max(@M,v2) & 
 @L<:imm_100 & 
 imm_98=min(imm_99,v2) & 
 imm_98=imm_99+v2 & 
 @A=max(imm_96,v2) & 
 @M=min(imm_96,v2) & 
 @M=imm_96+v2 & 
 imm_97=max(@M,v2) & 
 @L<:imm_97 & 
 imm_95=min(imm_96,v2) & 
 imm_95=imm_96+v2 & 
 q_54=r & a_53=a & a_60=b & q_61=r2 & 
 imm_80=imm_81+v2 & 
 imm_80=min(imm_81,v2) & 
 @L<:imm_82 & 
 imm_82=max(@M,v2) & 
 @M=imm_81+v2 & 
 @M=min(imm_81,v2) & 
 @A=max(imm_81,v2) & 
 imm_83=imm_84+v2 & 
 imm_83=min(imm_84,v2) & 
 @L<:imm_85 & 
 imm_85=max(@M,v2) & 
 @M=imm_84+v2 & 
 @M=min(imm_84,v2) & 
 @A=max(imm_84,v2) & 
 r2_69=r2 & r_59=r & 
 imm_116=imm_117+v2 & 
 imm_116=min(imm_117,v2) & 
 @L<:imm_118 & 
 imm_118=max(@M,v2) & 
 @M=imm_117+v2 & 
 @M=min(imm_117,v2) & 
 @A=max(imm_117,v2) &
  imm_119=imm_120+v2 & 
  imm_119=min(imm_120,v2) & 
  @L<:imm_121 & 
  imm_121=max(@M,v2) & 
  @M=imm_120+v2 & 
  @M=min(imm_120,v2) & 
  @A=max(imm_120,v2)&{FLOW,(20,21)=__norm#E}[]
[[ Fold ==>  SEARCH ==>  Match(x,x) ==>  Fold ==>  SEARCH ==>  Match(r,q_54) ==>  COND ==>  Match(r2,q_61)]]


Validate 1: OK

*/
