
We previously used:

 ll_tail2<tx, n> == self::node<_, null> & tx=self & n=1
	or self::node<_, r> * r::ll_tail2<tx, n-1> & r!=null
	inv self!=null & tx!=null & n>=1;

 lseg2<p, n> == self=p & n=0
	or self::node<_, r> * r::lseg2<p, n-1>
	inv n>=0;

in conjunction with lemmas:

  lemma "ll_tail2" self::ll_tail2<t, n> <-> self::lseg2<t, n-1> * t::node<_, null>;
  lemma "lseg2" self::lseg2<p, n> <-> self::lseg2<q, n1>@D * q::lseg2<p, n2>@D & n=n1+n2;


I think it is simpler to use instead the predicate

  ll_tail2<tx, n> == self::lseg2<tx,n-1> * tx::node<_, null> 
        inv n>=1;

  lseg2<p, n> == self=p & n=0
	or self::node<_, r> * r::lseg2<p, n-1>
	inv n>=0;

and the lemma:
  lemma "lseg2" self::lseg2<p, n> <-> self::lseg2<q, n1>@D * q::lseg2<p, n2>@D & n=n1+n2;

since there is only one lemma and we can use accelerated-folding
mechanism. Hence, it is important to transform from general recursive
predicate to specialized predicates, where possible; to facilitate
reasoning. This is also closer to the mechanisms available in decision
procedure.

===========================================================
x::ll<n> <--> x::ls<null,n>.
  <--> x::ntls<null,n>

even/odd

queue

tail-recursive

at-least-one

higher-order predicates

single vs double-linked?


 (i) normalize them
 (ii) relate them
 (iii) synthesize lemma?


sorted linked list?

universal linked list?

===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================
===========================================================


