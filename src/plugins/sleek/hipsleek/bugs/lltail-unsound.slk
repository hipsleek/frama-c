data node {
	int val;
	node next;
}.



pred lseg<n, p, sm, lg> == case {
  n=0 -> [] self=p & sm<=lg;
 (n!=0) -> [nn] self::node<sm, r> * r::lseg<nn, p, sm1, lg> 
               & sm<=sm1 & nn=n-1; 
               //& (n-1<=0 & sm=sm1 | n-1>0 & sm<=sm1) & nn=n-1 ;
  }	inv n >= 0 & sm<=lg. //(n=0 & sm=lg | n>0 & sm<=lg).
 // inv n>=0 & (n<=1 & sm=lg | n>1 & sm<=lg). 

/*
pred lseg<n, p, sm, lg> == case {
  n=0 -> [] self=p & sm=lg;
 (n=1) -> [] self::node<sm, p> & sm=lg; //sm<=lg;
 (n<0|n>1) -> [] self::node<sm, r> * 
           r::lseg<nn, p, sm1, lg> & sm<=sm1 & nn=n-1;
  }
	inv n >= 0 & sm<=lg.
*/

lemma "lsegmb" self::lseg<n, p, sm, lg> & n = n1+n2 & n1,n2 >=0 -> 
(exists lg1,sm2: self::lseg<n1, q, sm, lg1>@D * q::lseg<n2, p, sm2, lg> & lg1<=sm2).

lemma "lsegmb2" self::lseg<n, p, sm, lg> & n = n1+n2 & n1,n2 >=1  <- 
(exists lg1,sm2: self::lseg<n1, q, sm, lg1>@D * q::lseg<n2, p, sm2, lg>@D 
     & lg1<=sm2).

// For below, I have to change
// lg1<=sm2 to lg1=sm2

/*
checkentail 
        self::lseg<n2, p, sm2, lg> & n1=0 & sm=lg1 
             & lg1=sm2 // lg1<=sm2 
             & n = n1+n2 & n1,n2 >=0
   or self::node<sm, r1> * r1::lseg<n1-1, q, sm1, lg1> 
        *  q::lseg<n2, p, sm2, lg>  
        & sm<=sm1  & lg1<=sm2 & n = n1+n2 & n1,n2 >=0
   |- self::lseg<n, p, sm, lg>.
*/
/*
pred ll_tail<n, t, sm, lg> == 
     case {
     n=1 -> [] self::node<sm, null> & t=self & n=1 & sm=lg;
   n!=1 -> []  (exists sm1: self::node<sm, r> * r::ll_tail<nn, t, sm1, lg> & r!=null & sm<=sm1 & nn=n-1);
   }
	inv n>=1 & self!=null.
*/
pred ll_tail<n, t, sm, lg> == 
   case {
     n=1 -> [] self::node<sm, null> & t=self & n=1 & sm=lg;
     n!=1 -> [] self::node<sm, r> * r::ll_tail<nn, t, sm1, lg> & r!=null & sm<=sm1 & nn=n-1;
   }
	inv n>=1 & self!=null & sm<=lg.

lemma "ll_tail" self::ll_tail<n, t, sm, lg> 
  -> (exists lg1: self::lseg<n-1, t, sm, lg1> * t::node<lg, null> & lg1<=lg).

lemma "ll_tail2" self::ll_tail<n, t, sm, lg> <- (exists lg1: self::lseg<n-1, t, sm, lg1> * t::node<lg, null> //& lg1<=lg 
   & n>1).
// problem - there is some residue lost..


checkentail self::lseg<n-1, t, sm, lg1> * t::node<lg, null> & n>1
      |- self::ll_tail<n, t, sm, lg>.


checkentail t::node<lg, null> & n>1 & self=t & sm=lg1  
            & n-1=0
      |- self::ll_tail<n, t, sm, lg>.
print residue.


checkentail self::node<sm,q>*q::lseg<n-2, t, sm2, lg1> * t::node<lg, null> & n>1 & sm<=sm2
      |- self::ll_tail<n, t, sm, lg>.
print residue.

checkentail self::node<sm,q>*q::lseg<n-2, t, sm2, lg1> * t::node<lg, null> & n>1 & sm<=sm2
      |- self::lseg<n-1,t,sm,lg1>*t::node<lg,null> & n>1.
print residue.
