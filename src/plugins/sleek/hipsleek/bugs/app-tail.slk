data node {
	int val;
	node next;
}.

pred lseg<p, n> == self=p & n=0
	or self::node<_, r> * r::lseg<p, n-1>
	inv n>=0.

pred ll_tail<tx, n> == self::node<_, null> & tx=self & n=1
	or self::node<_, r> * r::ll_tail<tx, n-1> & r!=null
	inv self!=null & tx!=null & n>=1.

lemma "lseg" self::lseg<p, n> <-> self::lseg<q, n1>@D * q::lseg<p, n2> & n=n1+n2.
lemma "ll_tail" self::ll_tail<t, n> <-> self::lseg<t, n-1> * t::node<_, null>.

//checkentail x::ll_tail<tx, n> |- tx::node<a,b>.

checkentail x::lseg<tx,n-1>*tx::node<_,y>*y::ll_tail<ty,m> 
 |- x::ll_tail<ty,n+m>.

//checkentail x::lseg<tx,n-1>*tx::node<_,y>*y::lseg<ty,m-1>*ty::node<_,null>
// |- x::ll_tail<ty,n+m>.

//checkentail x::lseg<tx,n-1>*tx::node<_,y>*y::lseg<ty,m-1>*ty::node<_,null> 
// |- x::lseg<ty,n+m-1>*ty::node<_,null>.

//checkentail x::lseg<tx,n-1>*tx::node<_,y>*y::lseg<ty,m-1>  |- x::lseg<q,a> * q::lseg<ty,b> & a+b=n+m-1.


//checkentail x::lseg<y,n> |- x::lseg<a,b>.

//checkentail x::lseg<y,n> |- x::lseg<a,b>*a::lseg<c,d>.

//checkentail x::lseg<y,n>*y::lseg<z,m> |- x::lseg<a,b>*a::lseg<c,d>.

print residue.
