data node { int val ; node next }.

data cell { int val}.

pred cellp<v> == self::cell<v>
     inv true.

pred ll<n> == self = null & n = 0
     or self::node<next = r> * r::ll<n - 1>
     inv n>=0.

pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.

pred ll_tail<tx, n> == self::node<_, null> & tx=self & n=1
	or self::node<_, r> * r::ll_tail<tx, n-1> & r!=null
	inv n>=1.
	 

lemma "tail2lseg" self::ll_tail<t, n> <-> self::lseg<n-1, t> * t::node<_, null>.


//lemma "split1" self::cellp(f)<v> & 0<f<=1 & f=f1+f2 & f1>0 & f2>0  -> self::cellp(f1)<v> * self::cellp(f2)<v>.
lemma "split2" self::cellp(f)<v> & f=f1+f2 &f1>0.0 & f2>0.0 -> self::cellp(f1)<v> * self::cellp(f2)<v>.
//lemma "split3" self::cellp(f)<v> & f=f1+f2 & 1.0>f1>0.0 & 1.0>f2>0.0 -> self::cellp(f1)<v> * self::cellp(f2)<v>.

//lemma "R2L" self::lseg<n, p> & n = a + b & a,b >=0 <- self::lseg<a, r> * r::lseg<b, p>.

lemma "L2R" self::lseg<n, p> & n = a + b & a,b >=0 <-> self::lseg<a, r> * r::lseg<b, p>.

// more precise lemmas to keep the invariant with the entailment.
//lemma "split1" self::cellp(f)<v> & f=f1+f2 & f1>0.0 & f2>0.0  -> self::cellp(f1)<v> * self::cellp(f2)<v> & 0.0<f<=1.0 .
//lemma "L2R" self::lseg<n, p> & n = a + b & a,b >=0 <-> self::lseg<a, r> * r::lseg<b, p> & n>=0.
//lemma "split3" self::cellp(f)<v> & f=f1+f2 & 1.0>f1>0.0 & 1.0>f2>0.0 -> self::cellp(f1)<v> * self::cellp(f2)<v> & 0.0<f<=1.0.

//(1)
checkentail x::cellp(1.0)<v1> |-  x::cellp(0.5)<v1>.
//print residue. //valid & residue is correct after adding instatiating ivars

//(2)
checkentail x::cellp(1/2)<v1> |-  x::cellp(3/4)<v1>.
//print residue. //fail

//(3)
checkentail x::cellp(1.0)<v> |-  x::cellp(f1)<v> * x::cellp(f2)<v> * x::cellp(f3)<v> & f1=0.2 & f2=0.3 & f3=0.4 .
//print residue. //valid

//(4)
checkentail x::lseg<n, p> & n = 7 |- x::lseg<n1, r> * r::lseg<n2,r1> * r1::lseg<n3,q> & n1=1 & n2=2 & n3=5.
//print residue. // fail

//(5)
checkentail x::cellp(1.0)<v> |-  x::cellp(f1)<v> * x::cellp(f2)<v> * x::cellp(f3)<v> & f1=0.2 & f2=0.3 & f3=0.6 .
//print residue. //fail

//(6)
checkentail x::ll_tail<r3, n> & n = 11 |- x::lseg<n1, r1> * r1::lseg<n2, r2> * r2::lseg<n3, r3> & n1 = 3 & n2 = 4 & n3 = 3.
//print residue.// valid

//(7)
checkentail x::ll_tail<p, n> & n = 11 |- x::lseg<n1, r1> * r1::lseg<n2, r2> * r2::lseg<n3, r3> & n1 = 3 & n2 = 4 & n3 = 3.
//print residue. // valid with r3=p

//(8)
checkentail x::lseg(0.5)<n, p> & n = 7 |- x::lseg(0.5)<n1, r> * r::lseg(0.5)<n2,r1> & n1=3 & n2=4.
//print residue. // valid


/*
# ex54a.slk --en-para -perm fperm -tp redlog --old-norm-w-coerc 

# why does (Perm.allow_perm ()) need a different way of building
  to_ante and to_conseq? Need to integrate properly.

!!! **WARNING****solver.ml#9594:impl_inst and to_conseq not properly built
WARNING: _0:0_0:0:* between overlapping heaps: ( x::cellp( f2_310)<v_319>@M, x::cellp( f1_309)<v1>@M)
!!! **WARNING****solver.ml#14548:into normalization_with_coerc? why?

*/
