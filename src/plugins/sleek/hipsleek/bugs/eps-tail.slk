data node { int val ; node next }.


pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.

pred ll_tail<tx, n> == self::node<_, null> & tx=self & n=1
	or self::node<_, r> * r::ll_tail<tx, n-1> & r!=null
	inv self!=null & n>=1.
	 
//lemma self::lseg<n, p> & n = a + b & a,b >=0 -> self::lseg<a, r> * r::lseg<b, p>.

//lemma self::ll_tail<t, n> -> self::lseg<n-1, t> * t::node<_, null> & self!=null.

// eps cannot handle self!=null
/*
checkentail self::lseg<n-1, t> * t::node<_, null> |- self!=null.

checkentail self::lseg<n-1, t> * t::node<_, null> |- t!q=null.

checkentail self::lseg<n-1, t> * t::node<_, null> |- n>0.
*/
// Problem (3) :: self!=null cause --eps to fail ??
// 
lemma self::ll_tail<t, n> -> self::lseg<n, null>.

lemma self::ll_tail<t,n> <- self::lseg<n-1, t> * t::node<_,null>.

// cannot be proven below
lemma self::ll_tail<t,n> <- self::lseg<n, null> & n>0.

// self must be a view below.
//lemma self::ll_tail<t,n> <- self::node<_,q>* q::lseg<n-1, null>.

/*
checkentail x::lseg<n, null> & n>0 |- x::ll_tail<t,n>.

checkentail x::node<next = r> * r::lseg<n - 1, p>
|- x::ll_tail<t,n>.


checkentail 
x::node<next = r> & r = p & n-1 = 0
or x::node<next = r> * r::node<next = r2> * r2::lseg<n - 2, p>
|- x::ll_tail<t,n>.
*/


