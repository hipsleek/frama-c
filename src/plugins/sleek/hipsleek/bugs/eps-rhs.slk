data node { int val ; node next }.


pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.

pred ll_tail<tx, n> == self::node<_, null> & tx=self & n=1
	or self::node<_, r> * r::ll_tail<tx, n-1> & r!=null
//	inv n>=1.
	inv self!=null & n>=1.

//x!=null must be IP rather than IN
//checkentail x::ll_tail<tx,n> |- x::ll_tail<a,b> & x!=null.

//self!=null must be IP rather than IN
pred foo<n> == self::ll_tail<tx,n> & self!=null.

lemma self::ll_tail<t, n> <- 
  self::lseg<n-1, t> * t::node<_, null> & self!=null.

lemma self::foo<n> <- 
  self::ll_tail<t,n> & self!=null.

/*
checkentail t::node<_, null> & x = t & m = 0  & m=n-1
    or x::node<next = r> * r::lseg<m - 1, t> * t::node<_, null> & m=n-1 
    |- x::ll_tail<t, n>.

checkentail t::node<_, null> & x = t & m = 0  & m=n-1 |- x::ll_tail<t, n>.

checkentail
    x::node<next = r> * r::lseg<m - 1, t> * t::node<_, null> & m=n-1 
    |- x::ll_tail<t, n>.
*/

