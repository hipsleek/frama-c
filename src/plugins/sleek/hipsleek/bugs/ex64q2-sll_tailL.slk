data node {
	int val; 
	node next; 
}.


pred lseg<n, p> == case {
  n=0 -> [] self=p ;
 (n!=0) -> [nn] self::node<sm, r> * r::lseg<nn, p> & nn=n-1; 
}	inv n >= 0 .


pred ll_tail<n, t> == 
   case {
     n=1 -> [] self::node<sm, null> & t=self & n=1 ;
     n!=1 -> [] self::node<sm, r> * r::ll_tail<n-1, t> & r!=null ;// & nn=n-1;
   }
inv n>=1 & self!=null.

lemma_safe "lseg" self::lseg<n, p> & n = a + b & a,b>=0 
      <->  self::lseg<a, r> * r::lseg<b,p> .

lemma_safe "tail2lsegL" self::ll_tail<n, t> 
      ->  self::lseg<n-1, t> * t::node<lg, null>.

 //fail:  sm<=lg |-  lg=sm. 
//lemma_safe "ll_tail2lsegR" self::ll_tail<n, t, sm, lg>  & m=n-1 <- self::lseg<m, t, sm, lg1> * t::node<lg, null> & lg1<=lg .

