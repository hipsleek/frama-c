data node { int val ; node next }.

// possibly touching list segments that can be cyclic
pred lseg<p> == self = p 
         or self::node<next = r> * r::lseg<p> 
         inv true.

//lemma self::lseg<p> <- self::lseg<p>*p::node<a,null>.

// checkentail self::lseg<p>*p::node<a,null> |- self::lseg<p>.

checkentail p::node<a,null> & self = p 
    or self::node<next = r> * r::lseg<p> * p::node<a,null> |- self::lseg<p>.

// non-empty residues.
print residue.


lemma self::lseg<p> <- self::lseg<r>*r::lseg<p>.

/*print residue.

checkentail r::lseg<p> & self = r 
    or self::node<next = r2> * r2::lseg<r> * r::lseg<p> |- self::lseg<p>.

// empty residues.
print residue.

*/
