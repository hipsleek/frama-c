data node { int val ; node next }.

pred ll<n> == self = null & n = 0
	or self::node<next = r> * r::ll<n - 1>
	inv n >= 0.
// "Fail.Valid.Fail.Fail.Valid.Valid.Valid.Fail."

//checkentail x::node<_, r2>  * r2::ll<n> |- x::ll<m> & m >= n+1.
//checkentail x::node<_, null> |- x::ll<m>.
//checkentail x::node<_, null> |- [m] x::ll<m>.
//checkentail x::node<_, null> |- (exists m: x::ll<m>).
/*
checkentail x::node<_, null> or x=null |- case {x!=null -> [m] x::node<_,r> * r::ll<m - 1> ;
  x=null -> [m] x = null & m = 0;}
  .
*/
checkentail x::node<_, null>  |- 
  [m] case {x!=null -> [] x::node<_,r> * r::ll<m - 1> ;
  x=null -> [] x = null & m = 0;}
  .

  print residue.
