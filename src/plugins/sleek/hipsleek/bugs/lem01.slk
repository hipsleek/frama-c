//Valid.Fail.Fail
data node { int val ; node next }.


pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.


lemma "V1_r1" self::lseg<n, p> & n = a + b & a,b >=0 <- self::lseg<a, r> * r::lseg<b, p>.

//lemma "V1" self::lseg<n, p> & n = a + b & a,b >=0 -> self::lseg<a, r> * r::lseg<b, p>.

//lemma "V2" self::lseg<a, r> * r::lseg<b, p> <- self::lseg<n, p> & n = a + b & a,b >=0.
// Valid

/*
checkentail self_V1=p & n=0 & n=b+a & 0<=a & 0<=b |-  (exists a_78, b_79, p_80, r: self_V1::lseg<a_78,r> * 
       r::lseg<b_79,p_80> & a_78=a & b_79=b & p_80=p ).

checkentail 
    self_V1::node<_,r_106> * r_106::lseg<n-1,p> & 
    n=b+a & 0<=a & 0<=b |-  (exists r: self_V1::lseg<a,r> * r::lseg<b,p>  ).
*/



