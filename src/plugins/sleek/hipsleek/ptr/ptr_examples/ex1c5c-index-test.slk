data arr {
  int val;
}.

pred arr_int<o:int,v:int> ==
    p1::arr<v> & p1=self+o & o>=0
//  p1::arr<v> * q::arr<v> & p1=self+o & q=p1+1 & o>=0
//or  q::arr<v> * p::arr<v>  & p=self+o+1 & q=p+1 & o>=0
inv o>=0.
// root=Some(self+o)
// add this @ trans_view

/*
pred arr_seg<i:int,n:int> == emp & i>=n & n>=0
  or self::arr_int<i,_> * self::arr_seg<i+1,n>
  inv n>=0 & i>=0.
// root=Some(self+i)
*/


checkentail xxx::arr<5> & xxx=(y:arr)+2  
     |- y::arr_int<k,v>.
print residue.
expect Valid. //k=2 

checkentail xxx::arr<5> & xxx=(y:arr)+2  
     |- y::arr_int<k,3>.
print residue.
expect Fail. 

checkentail xxx::arr<5> & xxx=(y:arr)+2  
     |- y::arr_int<2,v>.
print residue.
expect Valid. 

checkentail xxx::arr<5> & xxx=(y:arr)+2  
     |- y::arr_int<2,5>.
print residue.
expect Valid. 

/*
# ex1c5c.ss


 */
