data node{
	int val;
	node next;
}.

pred zip<y> ==
  self=null & y=null
or self::node<_,p>*y::node<_,q>*p::zip<y>
inv true.

pred ll<> == self=null
 or self::node<_,q>*q::ll<>
inv true.

HeapPred P1(node a).
HeapPred P2(node a).


//lemma self::zip<y> -> P1(self) * P2(y).

infer [P1,P2] x::zip<y> |- P1(x) * P2(y).
print residue.

infer [P1,P2]   x=null & y=null
or x::node<_,p>*y::node<_,q>*p::zip<q> |- P1(x) * P2(y).
print residue.

infer [P1,P2]   
  x::node<_,p>*y::node<_,q>* P1(p) * P2(q) |- P1(x) * P2(y).
print residue.



/*


*/