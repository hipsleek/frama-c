data node{
	int val;
	node next;
}.

pred ls<y> == self=y
   or self::node<_,p>*p::ls<y>
inv true.

pred ll<> == self=null
   or self::node<_,p>*p::ll<>
inv true.

HeapPred P1(node a).
HeapPred P2(node a).

HeapPred G1(node a, node b).
HeapPred G2(node a, node@NI b).

infer [G1,G2] G1(a,b) |- a::node<_,y>.
print residue.

infer [G1,G2] G1(a,b) |- a::ls<y>.
print residue.

infer [G1,G2] G1(a,b) |- a::ll<>.
print residue.

/*
Entail (1) : Valid. 

 <1>HP_43(y_42,b) * HP_44(b,a)&Anon_13=Anon_41 & y=y_42&{FLOW,(19,20)=__norm}[]
 inferred hprel: [G1(a,b)&true --> a::node<Anon_41,y_42>@M * 
                   HP_43(y_42,b@NI) * HP_44(b,a@NI)&true]


Entail (2) : Valid. 

 <1>HP_53(y_52,b) * HP_54(b,a)&y=y_52&{FLOW,(19,20)=__norm}[]
 inferred hprel: [G1(a,b)&true --> a::ls<y_52>@M[LHSCase] * 
                   HP_53(y_52,b@NI) * HP_54(b,a@NI)&true]


Entail (3) : Valid. 

 <1>HP_60(b,a)&true&{FLOW,(19,20)=__norm}[]
 inferred hprel: [G1(a,b)&true --> a::ll@M[LHSCase] * HP_60(b,a@NI)&true]

*/

/*
infer [G1,G2,P1,P2] G1(a,b) |- P1(a) * P2(b).
print residue.

Fail currently..
*/

infer [G1,G2,P1] G1(a,b) |- P1(a).
print residue.

/*
# split-1e.slk

GOT
===
 <1>emp&true&{FLOW,(19,20)=__norm}[]
 inferred hprel: [G1(a,b)&true --> P1(a)&true]

EXPECT
=====
  G1(a,b) --> P1(a) * HP_n(b,a@NI)

*/

