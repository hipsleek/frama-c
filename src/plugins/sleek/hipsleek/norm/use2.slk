data node{
	int val;
        node prev;
	node next;
}.

pred H1<y> == self::node<_,p,t> * t::H2<y>.

pred H2<y> == self=null
 or self::node<_,p,n> * n::H2<y>.

pred_elim_useless [H1,H2].

/*
# use2.slk

[ view H2<y:TVar[40]>= 
  EBase 
    self::H2_48<>@M&{FLOW,(1,26)=__flow#E}[],
 view H2_48<y:TVar[40]>= 
  EList
    :EBase 
       (* lbl: *){1}->emp&self=null&{FLOW,(1,26)=__flow#E}[]
    || :EBase 
          exists (Impl)[Anon_14; p; 
          n]self::node<Anon_14,p,n>@M * n::H2_48<>@M&{FLOW,(1,26)=__flow#E}[]
    ,
 view H1<y:TVar[47]>= 
  EBase 
    self::H1_49<>@M&{FLOW,(1,26)=__flow#E}[],
 view H1_49<y:TVar[47]>= 
  EBase 
    exists (Impl)[Anon_13; p; t]self::node<Anon_13,p,t>@M * t::H2_48<>@M&
    {FLOW,(1,26)=__flow#E}[]]

*/

