data node{
     int val;
     node next#REC;
}.

pred zipNM<y,n,m> ==
  self=null & y=null & n=0 & m=0
or self::node<_,p>*y::node<_,q>*p::zipNM<q, n1, m1> & n=n1+1 & m=m1+1.

pred zipN<n> ==
  self=null & n=0 
or self::node<_,p>*p::zipN< n1> & n=n1+1 .

pred zipM<m> ==
   self=null & m=0
or self::node<_,q>*q::zipM<m1> & m=m1+1.


//lemma_safe self::zipNM<y,m,n> -> self::zipN<n> * y::zipM<m>.

lemma_safe self::zipNM<y,m,n> <- self::zipN<n> * y::zipM<m> & m=n.

checkentail self_lem_15::node<_,p_113>@M * p_113::zipN<n1_114>@M * y::zipM<m>@M&n=1+
n1_114 & m=n
 |-  (exists q_115: self_lem_15::node<_,p_89>@M * y::node<_,q_90>@M * 
p_89::zipNM<q_115,n1_91,m1_92>@M).

print residue.
