data node {
	int val; 
	node next; //#REC;	
}.


HeapPred H(node x,node@NI y).
HeapPred H2(node x,node@NI y,node@NI z).
HeapPred H3(node x,node@NI y).
HeapPred DP_36(node x,node@NI y,node@NI z).
HeapPred GP_66(node x,node@NI y,node@NI z).

lemma_infer [H,@classic] "compl" H(self,yy) * yy::node<_,zz> -> self::node<_,q>*H(q,zz).
print residue.

/*
relAssume DP_36(next_47,self_compl,yy_49) * yy_49::node<Anon_48,zz> & true --> H(next_47,zz) & true.

relAssume emp&zz=q --> H(q,zz)&true.
 
relAssume H(q_65,zz)&true --> GP_66(q_65,next_47,zz)&true.

relAssume next_47::node<Anon_64,q_65> * GP_66(q_65,next_47,zz)&true --> H(next_47,zz)&true.

relAssume DP_36(next_47,self_compl,yy_49)&true --> H(next_47,yy_49)&true.

//relAssume emp&zz=q --> H(q,zz)&true.

shape_derive_view [*].

print views.


print relAssumes.

shape_derive_view [H].

print views [H].
*/

/*
lemma_unsafe "compl" H(self,yy) * yy::node<_,zz> -> self::node<_,q>*H(q,zz).

/*
infer [H,@classic] yy::node<_, zz> & self = yy |- self::node<_, q> * H(q, zz).
print residue.

infer [H,H2,@classic] self::node<_, p> * H2(p,self,yy) * yy::node<_, zz> |- self::node<_, q> * H(q, zz).
print residue.
*/

infer [H,H2,@classic] yy::node<_, zz> & self = yy or self::node<_, p> * H2(p,self,yy) * yy::node<_, zz> |- self::node<_, q> * H(q, zz).
print residue.
*/
