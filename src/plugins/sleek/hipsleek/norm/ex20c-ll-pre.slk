/* singly linked lists */

/* representation of a node */

data node {
	int val; 
	node next;	
}.

pred ll<> == self=null 
	or self::node<_, q> * q::ll<> 
  inv true.
  
HeapPred P(node x).
HeapPred HP_1636(int x, node@NI y).
HeapPred HP_1637(node x, node@NI y).

// BIND
relAssume
P(x) & x!=null --> x::node<val_27_1634,next_27_1635>@M * 
            HP_1636(val_27_1634,x) * HP_1637(next_27_1635,x).
// PRE_REC
relAssume
HP_1637(next_27_1635,x)&true |#| x::node<val_27_1634,next_27_1635>@M&
true --> P(next_27_1635).

// POST
relAssume
(2;0)HP_1636(val_27_1634,x)&x'=x --> emp.

// POST
relAssume
P(x)&x'=x & x'=null --> emp.


print relAssumes.
//shape_normalize [DP_58].

shape_derive_view [*].
//pred_reuse[*][*].
//pred_reuse_subs[*].
//print views.
//print relAssumes.

/*
# ex20c.slk

# deriving pre for ll method incr/ex20a.ss

# Why did P has two parameters?
     next_27_1635::P<x_70>

  Can we print more info on what is being added..

!!! **cast.ml#3861:Adding the view P[x_66] into cprog.
!!! **cast.ml#3861:Adding the view HP_1637[x] into cprog.
!!! **cast.ml#3861:Adding the view HP_1636[x] into cprog.

 # How was the integer parameter eliminated?

 view P<x_66:node>= 
  EList
    :EBase 
       exists (Impl)[val_27_1634; 
       next_27_1635](* lbl: *){7}->(exists x_70: (* lbl: *){7}->
    self::node<val_27_1634,next_27_1635>@M * 
                          next_27_1635::P<x_70>@M&
       self!=null & x_70=x_66&{FLOW,(1,26)=__flow#E}[])
    || :EBase 
          (* lbl: *){8}->emp&x_66=null&{FLOW,(1,26)=__flow#E}[]
    , 

[ view HP_1636<x:node>= 
  EBase 
    (* lbl: *){10}->emp&{FLOW,(1,26)=__flow#E}[], 

view HP_1637<x:node>= 
  EBase 
    exists (Impl)[x_66](* lbl: *){9}->self::P<x_66>@M&
    {FLOW,(1,26)=__flow#E}[]]


*/
