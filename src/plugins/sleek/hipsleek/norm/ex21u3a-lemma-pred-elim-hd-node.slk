/* singly linked lists */

/* representation of a node */

data node {
	int val; 
	node next;	
}.


pred app4<> == self=null
  or self::node<_,null> 
	or self::node<_, q> * q::app4<> & q!=null 
  inv true.

HeapPred U(node y).

pred app5<> == self=null
        or self::node<_,q> * U(q)
  inv true.

/*
pred app5a<> == self=null
        or self::node<_,q> * a::appU<>
  inv true.

pred appU<> == self=null
        or self::app5a<> & self!=null
  inv true.
*/

lemma_infer [U,@classic] self::app4<> -> self::app5<>.

print residue.

shape_derive_view [U].

print views.

//lemma_infer [U,@classic] self::app4<> <- self::app5<>.

//print residue.


/*
# ex21u3a.slk


# Why do we still have U(q)? Should it not be a view?

    , view app5<>= 
  EList
    :EBase 
       (* lbl: *){4}->emp&self=null&{FLOW,(1,26)=__flow#E}[]
    || :EBase 
          exists (Impl)[Anon_14; 
          q](* lbl: *){5}->self::node<Anon_14,q>@M * U(q)&
          {FLOW,(1,26)=__flow#E}[]

    , view U<>= 
  EList
    :EBase 
       (* lbl: *){22}->self::app5<>@M&self!=null&{FLOW,(1,26)=__flow#E}[]
    || :EBase 
          (* lbl: *){23}->emp&self=null&{FLOW,(1,26)=__flow#E}[]
    ]


*/
