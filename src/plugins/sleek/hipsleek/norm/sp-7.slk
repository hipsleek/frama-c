data node{
	int val;
	node next;
}.

//useless parameters
HeapPred P1(node a).
HeapPred P2(node a).

pred ls<y> == self=y
   or self::node<_,p>*p::ls<y>
inv true.

pred ll<> == self=null
   or self::node<_,p>*p::ll<>
inv true.

//lemma_safe self::ll<> -> self::ls<q>*q::ll<>.
lemma_unsafe  self::ll<> -> self::ls<q>*P1(q).
//lemma_unsafe  self::ll<> -> self::ls<q>*P1(self).

//lemma_infer [P1] self::ll<> -> self::ls<q>*P1(q).
//print residue.

/*
infer_exact [P1]
self=null
   or self::node<_,pp>*pp::ll<>
|- [y] P1(y) & self=y
or self::node<_,p>*p::ls<y> * P1(y)
.

infer_exact [P1] self=null
|- [y] P1(y) & self=y.
print residue.

infer_exact [P1]
   self::node<_,p>*p::ll<>
|- self::node<_,p2>*p2::ls<y> * P1(y).
print residue.

infer_exact [P1]
   self::node<_,pp>*pp::ls<yy> * P1(yy)
|- self::node<_,p2>*p2::ls<y> * P1(y).
print residue.

infer_exact [P1]
self=null
   or self::node<_,pp>*pp::ls<yy> * P1(yy)
|- [y] P1(y) & self=y
or self::node<_,p>*p::ls<y> * P1(y)
.
print residue.
*/


/*
infer_exact [P1]
   self::node<_,p>*p::ll<>
|- self::node<_,p2>*p2::ls<y> * P1(y).
print residue.

infer [P1]
   P1(x)
|- P1(y).
print residue.


infer_exact [P1]
   self::node<_,ppp>*ppp::ll<>
|- self::node<_,p2>*p2::ls<y> * P1(y).
print residue.
*/

/*
infer_exact [P1]
   ppp::ls<yy> *P1(ppp)
|- ppp::ls<y> * P1(y).
print residue.

infer_exact [P1]
   P1(ppp) & y=yy
|- P1(y).
print residue.


infer_exact [P1]
   P1(ppp) 
|- P1(y).
print residue.

infer_exact [P1]
self=null
   or self::node<_,pp>*pp::ll<>
|- [y] P1(y) & self=y
or self::node<_,p>*p::ls<y> * P1(y)
.
print residue.

*/
/*
Good Context: [
               es_formula: emp&self=null&{FLOW,(19,20)=__norm}[]
               es_infer_vars_hp_rel: [P1]
               CtxORes_formula: self::node<Anon_14,pp>@M * pp::ll<>@M&{FLOW,(19,20)=__norm}[]
                    es_infer_vars_hp_rel: [P1]
               ]

conseq:
 :EBase exists (Expl)[y](Impl)[Anon_15; 
        p](ex)[]
                P1(y)&self=y&{FLOW,(19,20)=__norm}[]
                or self::node<Anon_15,p>@M * p::ls<y>@M * P1(y)&
                   {FLOW,(19,20)=__norm}[]
                

Good Context: [
               es_formula: emp&self_lem_13=null&{FLOW,(1,22)=__flow}[]
               es_infer_vars_hp_rel: [P1]
               CtxORes_formula: 
                     (exists Anon_34,
                     p_35: self_lem_13::node<Anon_34,p_35>@M * p_35::ll<>@M&
                     {FLOW,(1,22)=__flow})[]
                    es_infer_vars_hp_rel: [P1]
               ]

conseq:
 :EBase 
(exists q_36: P1(q_36)&q_36=self_lem_13&{FLOW,(1,22)=__flow})[]
|| :EBase exists (Expl)[](Impl)[Anon_37; p_38](ex)[](exists y_42,
          q_36: P1(q_36) * self_lem_13::node<Anon_37,p_38>@M * 
          p_38::ls<y_42>@M&q_36=y_42&{FLOW,(1,22)=__flow})[]

infer_exact [P1]
self=null
   or self::node<_,pp>*pp::ll<>
|- (exists y: P1(y) & self=y)
or (exists y,q36: self::node<_,p>*p::ls<y> * P1(q36) & y=q36)
.

infer_exact [P1]
p::ls<yy> * P1(yy)
|- (exists y,q36: p::ls<y> * P1(q36) & y=q36).
*/

infer_exact [P1]
P1(yy)
|- (exists y,q36: P1(q36) & y=q36 & y=yy)
.
print residue.


infer_exact [P1]
P1(yy)
|- (exists q36: P1(q36) & q36=yy)
.
print residue.




