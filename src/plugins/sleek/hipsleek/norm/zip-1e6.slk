data node{
     int val;
     node next;
}.

pred zipNM<y,n,m> ==
  self=null & y=null & n=0 & m=0
or self::node<_,p>*y::node<_,q>*p::zipNM<q, n1,m1> & n=n1+1 & m=m1+1.

pred zip<y> ==
  self=null & y=null
or self::node<_,p>*y::node<_,q>*p::zip<q>.


pred zipN<n> ==
  self=null & n=0 
 or self::node<_,p>*p::zipN<n1> & n=n1+1 
 inv n>=0.

pred zipM<n> ==
  self=null & n=0 
 or self::node<_,p>*p::zipM<n1> & n=n1+1 
 inv n>=0.


HeapPred P1(node a, int b).
HeapPred P2(node a, int b).
relation P3(int a, int b).

pred ll<> ==
  self=null  
 or self::node<_,p>*p::ll<>  
 inv true.

//lemma_safe self::zipNM<y,m,n> -> self::zipN<n> * y::zipM<m>.

//lemma_safe "both" self::zipNM<y> & n=m <-> self::zipN<n> * y::zipN<m> .

//lemma_test "one" self::zipNM<y,n,m>  <- self::zipN<n> * y::zipM<m> & n=m .


//lemma_infer_pred [P1,P2] "one2a" self::zipNM<y,m,n> -> P1(self,n) * P2(y,m).

//lemma_infer_pred [P3] "one2b" self::zip<y> -> self::zipN<n> * y::zipM<m> & P3(m,n).

/*
lemma_infer_pred [P3] "one3" self::zip<y>  <-  self::zipN<n> * y::zipM<m> & P3(n,m) .
//print residue.
*/

/*
inferred rel: [RELASS [P3]: ( P3(n_115,m_116)) -->  m_116=0;
                RELASS [P3]: ( P3(n_127,m_128)) -->  (m_128!=0 | 1>n_127);
                RELDEFN P3: ( P3(n_127,m_128) & 1<=n_127 & 1<=m_128 & n1_146=m_128-1 & n1_126=n_127-1) -->  P3(n1_126,n1_146)]

 inferred rel: [RELASS [P3]: ( P3(n_90,m_91)) -->  (n_90!=0 | 0>m_91); 
                RELASS [P3]: ( P3(n_133,m_134)) -->  (m_134!=0 | 1>n_133); 
                RELDEFN P3: ( P3(n_133,m_134) & 1<=n_133 & 1<=m_134 & n1_152=m_134-1 & n1_132=n_133-1) -->  P3(n1_132,n1_152)]

*/

//lemma_infer_pred [P3] "one3" self::zip<y>  <-  self::zipM<n> * y::zipM<m> & P3(n,m) .
lemma_infer_pred [P3] "one3"   self::zipM<n> * y::zipM<m> & P3(n,m) -> self::zip<y>.
print residue.

lemma_safe self::zipM<n> * y::zipM<m> & m=n -> self::zip<y>.
print residue.

/*
infer[P3] self=null & n=0 & y=null & m=0 & P3(n,m) |- self=null & y=null.
print residue.

infer[P3] self=null & n=0 & y!=null & m>0 & P3(n,m) |- self=null & y=null.
print residue.

infer[P3] self!=null & n>0 & y=null & m=0 & P3(n,m) |- self=null & y=null.
print residue.
*/
