/* singly linked lists */

/* representation of a node */

data node {
	int val; 
	node next;	
}.


pred lseg2a<n,p> == self = p & n=0
	or self::node<_, q> * q::lseg3<p,n-1> 
  inv true.

pred lseg3<p,n> == self = p & n=0
	or self::node<_, q> * q::lseg2a<n-1,p> 
  inv true.


pred_reuse [*][*].
//PRED REUSE FOUND:[(lseg2a,lseg2a),(lseg3,lseg3)]

lemma_test self::lseg2a<n,p> <-> self::lseg3<p,n>.
//succeed

lemma_test self::lseg2a<n,p> <- self::lseg3<p,n>.
//fail

lemma_test self::lseg2a<n,p> ->  self::lseg3<p,n>.
// fail

/*
# ex21r4d.slk

!!! **norm.ml#186:
 Failed : self::lseg3<p,n>@M&{FLOW,(1,26)=__flow#E}[] <->  self::lseg2a<n,p>@M&{FLOW,(1,26)=__flow#E}[]
!!! **sleekengine.ml#2502:

# GOT
PRED REUSE FOUND:[(lseg2a,lseg2a),(lseg3,lseg3)]

# EXPECTS:
PRED REUSE FOUND:[(lseg2a,lseg2a),(lseg3,lseg2a)]


# equiv proving fails. the reason is that we prove
  using two separate <-- and -->
  instead of a single <->

  Can we do this?


*/