This technique is meant to eliminate a head node in
a predicate. As an example:

 pred app3<> == self::node<_,null> 
	or self::node<_, q> * q::app3<> & q!=null 
  inv self!=null.
# ex21a.slk

We are suppose to transform this to:

 self::app3<> --> self::node<_,q>*U(q)

and then derive:

 pred U<> == self=null
	or self::node<_, q> * q::U<>  
  inv self!=null.

The elim derivation comprises:
  (1) determine applicability
  (2) form lemma -->
  (3) lemma_infer
  (4) derive pred
  (5) confirm equivalence
  (4) update predicate

==================================================
There is also a dual technique, called elim tail node
that can be applied. It may also be preferred if the
last node has  a property different from the inductive nodes.

For the same example:

 pred app3<> == self::node<_,null> 
	or self::node<_, q> * q::app3<> & q!=null 
  inv self!=null.

We are suppose to transform this to:

 self::app3<> --> U(self,q)*q::node<_,null>

After that we expect a segmented predicate to be
derived.

 pred U<p> == self=p
	or self::node<_, q> * q::U<p>  
  inv self!=null.

The elim of last node comprises:
  (1) determine applicability
  (2) form lemma -->
  (3) lemma_infer
  (4) derive pred
  (5) confirm equivalence
  (4) update predicate


