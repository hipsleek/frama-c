data node { int val ; node next }.


/*
pred ls<p> == self = p 
         or self::node<next = r> * r::ls<p> & self!=p
         inv true.
*/

pred ls<p> == case {
     self=p -> [] self = p ;
     self!=p ->  [] self::node<_,r> * r::ls<p> ; 
     }
     inv true.

//lemma self::ls<p> -> self::ls<r> * r::ls<p>.

/* unsound to be valid for case ls*/
lemma self::ls<p> <- self::ls<r> * r::ls<p>.


//checkentail  self::ls<r> * r::ls<p> |- self::ls<p>.

/*
checkentail  self::ls<p> & self = r 
       or self::node<next = r2> * r2::ls<r> * r::ls<p> & self!=r
       |- self::ls<p>.
*/

// valid
// checkentail  self::ls<p> & self = r |- self::ls<p>.

// unsound to succeed
checkentail self::node<_,r2> * r2::ls<r> * r::ls<p> & self!=r |- self::ls<p>.

checkentail self::node<_,r2> * r2::ls<r> * r::ls<p> & self!=r |- self::node<_,r3>*r3::ls<p> & self!=p.

// this seems unsound use of case!!
checkentail self::node<_,r2> * r2::ls<r> * r::ls<p> & self!=r 
  |- case {
       self=p -> [] true;
       self!=p -> [] self::node<_,r3>*r3::ls<p>;
       }.


/*
run_entail_check:
 EXISTS(p_77,Anon_78,r_79,r_68: self_lem_29::node<Anon_78,r_79>@M * 
 NN r_79::ls<p_77>@M[Orig] * NN r_68::ls<p>@M[Orig][LHSCase] &
 self_lem_29!=r_68 & p_77=r_68 & {FLOW,(13,28)=__flow}) LOC: _0_0
 or EXISTS(r_68: NN r_68::ls<p>@M[Orig][LHSCase] & self_lem_29=r_68 & 
    self_lem_29=r_68 & {FLOW,(13,28)=__flow}) LOC: _0_0 |-  EBase EXISTS(p_66: NN self_lem_29::ls<p_66>@M[Orig][LHSCase] & p_66=p &
       {FLOW,(13,28)=__flow}) LOC: _0_0


checkentail self::node<_,r_79> * r_79::ls<p_77> * r_68::ls<p> &
 self!=r_68 & p_77=r_68  |- self::ls<p> .

*/

