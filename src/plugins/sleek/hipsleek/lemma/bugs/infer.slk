data node {
	int val; 
	node next;	
}.

pred ll<n> == self = null & n = 0 
	or self::node<_, q> * q::ll<n-1> 
  inv n >= 0.

HeapPred H1(node x).
HeapPred H2(node q, int n).
HeapPred H3(node x).

/*
//infer1.slk (6) --eps
infer [H1] H1(x) & n=0 & x=y  |- y::ll<n>.
print residue.

/*
wo --eps
[H1(x)&n=0 --> x::ll<n>@M&true]
*/



//infer2.slk (5)
infer [H2] H2(q,n)& n=0 |- q::ll<n> .
print residue.


//infer5.slk (4)
infer [H1,H3] b::node<1,y> * H3(y)*H1(x)   |- x::node<_,b>*b::node<_,y>*y::node<_,null>.
print residue.

//infer6.slk 1
infer [H1] H1(x) & n=0 & x=y  |- y::ll<n>.
*/



//infer7 (6)
infer [n] x::ll<n> |- x::node<_,null>.
print residue.


//infer7 (7)
infer [n] x::ll<n> & n>0 |- x::node<_,null>.
print residue.

