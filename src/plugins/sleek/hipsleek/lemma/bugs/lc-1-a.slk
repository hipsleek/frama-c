//Valid.Valid.Fail
data node { int val ; node next }.

/*
pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.
*/

pred lseg<n, p> == case {
     n=0 -> [] self = p & n = 0;
     n!=0 ->  [] self::node<next = r> * r::lseg<b,p> & b=n-1; 
     }
     inv n >= 0.

//lemma "F3a" self::lseg<n, p> -> (exists a,b,r: self::lseg<a, r> * r::lseg<b, p> & n=a+b).

//lemma "F3b" self::lseg<n, p> -> self::lseg<a, r> * r::lseg<b, p> & n=a+b.

lemma "F3c" self::lseg<n, p> & n=a+b & a>=0 & b>=0 -> self::lseg<a, r> * r::lseg<b, p>.

checkentail self=p & n=0
|- (exists a,b: self::lseg<b,p> & n=a+b & a=0).


checkentail self::node<_,q>*q::lseg<n-1,p> |-
   (exists a,b: self::node<_,r>*r::lseg<a-1,r2>*r2::lseg<b,p> 
                & n=a+b & a!=0).
