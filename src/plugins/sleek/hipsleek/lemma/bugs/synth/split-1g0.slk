data node{
	int val;
	node next;
}.

pred zip<y> ==
  self=null & y=null
or self::node<_,p>*y::node<_,q>*p::zip<q>
inv true.

pred ll<> == self=null
 or self::node<_,q>*q::ll<>
inv true.

HeapPred P1(node a).
HeapPred P2(node a).
HeapPred P3(node a).


lemma self::zip<y> -> P1(self) * P3(y). 
lemma self::zip<y> -> P2(self) * P3(y).
lemma self::zip<y> -> P1(self) * P2(y).



//1
infer [P1,P2]   
  x::node<_,z>*y::node<_,q>*z::zip<q> |- P1(x) * P2(y).
print residue.


//2
infer [P1,P2]   
  x::node<_,y>*y::node<_,z>*z::zip<q> |- P1(x) * P2(y).
print residue.


//3
infer [P1,P2]   
  x::node<_,y>*y::node<_,z> * P1(z) * P2(q) |- P1(x) * P2(y).
print residue.


//4
infer [P1,P2]   
  x::node<_,p>*y::node<_,q>*r::zip<qq> |- P1(x) * P2(y).
print residue.


//5
infer [P1,P2]   
  x::node<_,z> * y::node<_,q> * z::zip<y> |- P1(x) * P2(y).
print residue.

/**
Entail (5) : Valid.

 <1>emp&{FLOW,(19,20)=__norm}[]
 inferred hprel: [// Sleek_Entail(5)
P1(z) * x::node<Anon_25,z>@M --> P1(x);
// Sleek_Entail(5)
P2(y) *
y::node<Anon_26,q>@M --> P2(y)]


<2>P3(y)&{FLOW,(19,20)=__norm}[]
inferred hprel: [// Sleek_Entail(5)
P1(z) * x::node<Anon_25,z>@M --> P1(x);
// Sleek_Entail(5)
y::node<Anon_26,q>@M --> P2(y)]


<3>emp&{FLOW,(19,20)=__norm}[]
inferred hprel: [// Sleek_Entail(5)
x::node<Anon_25,z>@M * y::node<Anon_26,q>@M * z::zip<y>@M --> P1(x);
// Sleek_Entail(5)
emp --> P2(y_154)]

*/