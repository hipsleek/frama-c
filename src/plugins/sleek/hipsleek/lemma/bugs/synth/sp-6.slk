data node{
	int val;
	node next;
}.


HeapPred P1(node a).
HeapPred P2(node a).

pred ls<p> == self=p
   or self::node<_,q>*q::ls<p>
inv true.

pred ll<> == self=null
   or self::node<_,p>*p::ll<>
inv true.

pred ll2<> == self=null
   or self::node<_,p>*p::ll2<>
   or self::node<_,p>*p::ll2<>
inv true.

lemma self::ll<> <-> self::ll2<>.


/*
lemma_test self::ll<> <-> self::ll2<>.

This will check if a lemma holds,
but the lemma is not added into repository.

lemma_test_fresh self::ll<> <-> self::ll2<>.

Furthermore, with the new qualifier, the lemma
proving will be done in a fresh
context without any prior asserted lemmas.

Procedure
 (i) save lemma context
 (ii) add current lemma under test
 (iii) unfold lhs/rhs
 (iv) check if lemma is valid or otherwise
 (iv) remove lemma
 (v) restore lemma context

lemma (add a lemma with proving)
 - add to store if proving succeeds
 - give warning message if lemma proving fails

lemma_unsafe
 - add a lemma into store without any proving
 

*/
