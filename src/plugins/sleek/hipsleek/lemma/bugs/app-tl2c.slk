data node {
	int val;
	node next;
}.

pred lseg2<p, n> == self=p & n=0
	or self::node<_, r> * r::lseg2<p, n-1>
	inv n>=0.

pred ll_tail2<tx, n> == self::node<_, null> & tx=self & n=1
	or self::node<_, r> * r::ll_tail2<tx, n-1> & r!=null
	inv self!=null & tx!=null & n>=1.

lemma "ll_tail2" self::ll_tail2<t, n> 
   <-> self::lseg2<t, n-1> * t::node<_, null>.

/*
# app-tl2c.slk

 unsoundness in lemma application with 
  some existentials.

Expect: Valid.Fail.Valid.Fail.Valid.Fail.

*/ 

//(4)
checkentail x::lseg2<tx,nn>@M 
  * tx::node<_,null>@M 
 |-  x::ll_tail2<tx, qq> & qq = nn+1.
print residue.

//(4)
checkentail x::lseg2<tx,nn>@M 
  * tx::node<_,null>@M 
 |-  x::ll_tail2<tx, qq> & qq = nn+2.
print residue.
// unsound


//(4)
checkentail x::lseg2<tx,nn>@M 
  * tx::node<_,null>@M 
 |-  (exists qq: x::ll_tail2<tx, qq> & qq = nn+1).
print residue.

//(4)
checkentail x::lseg2<tx,nn>@M 
  * tx::node<_,null>@M 
 |-  (exists qq: x::ll_tail2<tx, qq> & qq = nn+2).
// unsound; shound FAIL


//(4)
checkentail x::lseg2<tx,nn>@M 
  * tx::node<_,null>@M 
 |-  [qq] x::ll_tail2<tx, qq> & qq = nn+1.
print residue.

//(4)
checkentail x::lseg2<tx,nn>@M 
  * tx::node<_,null>@M 
 |-  [qq] x::ll_tail2<tx, qq> & qq = nn+2.
print residue.
// unsound; should FAIL
