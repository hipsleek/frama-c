//Valid.Fail.Fail.Valid.Fail.Fail.
data node { int val ; node next }.

pred lseg<n, p> == case {
     n=0 -> [] self = p & n = 0;
     n!=0 ->  [] self::node<next = r> * r::lseg<n - 1, p>; 
     }
     inv n >= 0.


lemma_safe  self::lseg<n, p> & n = a + b & a,b >=0 
       ->  (exists r:self::lseg<a, r> * r::lseg<b, p>).

checkentail x::lseg<4,p> |- x::lseg<3,q>.
print residue.

checkentail x::lseg<n,p> & n>0 |- x::lseg<1,q>.
print residue.


checkentail x::lseg<n,p> & n>=i |- x::lseg<i,q>.
print residue.
expect Valid.


/*
# ex4.slk

# use univ(int x) relation..

Entail 3: Fail.(may) cause:UnionR[base case unfold failed,AndR[ i<=n |-  0<=i. LOCS:[21;11];  i<=n |-  exists(b_340:0<=b_340 & n=i+b_340). LOCS:[21;0] (may-bug).]]

Residue:

 MaybeErr Context: 
    fe_kind: MAY
    fe_name: separation entailment
    fe_locs: {
        fc_message: base_case_unfold failed
        fc_current_lhs_flow: {FLOW,(20,21)=__norm#E}
      }
    [[ SEARCH ==>  COND ==>  BaseCaseUnfold]]
   FAIL_UNION 
    fe_kind: MAY
    fe_name: logical bug
    fe_locs: {
        fc_message: AndR[ i<=n |-  0<=i. LOCS:[21;11];  i<=n |-  exists(b_340:0<=b_340 & n=i+b_340). LOCS:[21;0] (may-bug).]
        fc_current_lhs_flow: {FLOW,(20,21)=__norm#E}
      }
    [[ SEARCH ==>  (Lemma ==> lem_11(x,x)) ==>  Match(x,x)]]
   
 CEX:false

*/
