# ll-b.ss -tp z3

ll2<i,j,a> == self = null & i=j
  or self::node<v, r> * r::ll2<i+1,j,a> & a[i]=v 
  inv i<=j;

Why is Omega still called?

Omega Error Exp:Globals.Illegal_Prover_Format("Omega.omega_of_exp: array, bag or list constraint  a_1041[i_1094]")
 Formula: exists(i_1094:i_1038=1+i_1094 & v_1097=a_1041[i_1094])

====================================================================
# ll-c1b.ss -tp z3 --smtinp --smtout

tp_imply_no_cache@13@12@11
tp_imply_no_cache inp1 : ((self=null & i=j) | ((1+i)<=j & dm(aaa,1+i,j) & dm(aaa,i,1+i) & 
self!=null))
tp_imply_no_cache inp2 : dm(aaa,i,j)
tp_imply_no_cache inp3 :162
tp_imply_no_cache inp4 :Z3
tp_imply_no_cache@13 EXIT:false

tp_imply_perm@12@11
tp_imply_perm inp1 : ((self=null & i=j) | ((1+i)<=j & dm(aaa,1+i,j) & dm(aaa,i,1+i) & 
self!=null))
tp_imply_perm inp2 : dm(aaa,i,j)
tp_imply_perm@12 EXIT:false

tp_imply@11
tp_imply inp1 :ante: ((self=null & i=j) | ((1+i)<=j & dm(aaa,1+i,j) & dm(aaa,i,1+i) & 
self!=null))
tp_imply inp2 :conseq: dm(aaa,i,j)
tp_imply@11 EXIT:solver:Z3: false

Error below came from hip which declared dm wrongly.

;Variables declarations
(declare-fun dm () Int)
(declare-fun aaa () (Array Int Int))
(declare-fun i () Int)
(declare-fun j () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (<= i j))
(assert (dm aaa i j))
;Negation of Consequence
(assert (not (and (<= i j) (dm aaa i j))))
(check-sat)
>>> Z3 OUTPUT RECEIVED:
(error "line 11 column 19: invalid function application, wrong number of arguments")
(error "line 13 column 39: invalid function application, wrong number of arguments")
sat
>>> VERDICT: FAILED!

# ll-c1a.slk -tp z3 --smtinp --smtout

Below came from sleek. Here, dm is declared twice, and
with the 2nd being the correct one with relevant axioms added.
Why aren't axioms duplicated.
Why wasn't axioms added when proving hip?

tp_imply_no_cache@9@8@7
tp_imply_no_cache inp1 : ((self=null & i=j) | ((1+i)<=j & dm(aaa,1+i,j) & dm(aaa,i,1+i) & 
self!=null))
tp_imply_no_cache inp2 : dm(aaa,i,j)
tp_imply_no_cache inp3 :4
tp_imply_no_cache inp4 :Z3
tp_imply_no_cache@9 EXIT:true

tp_imply_perm@8@7
tp_imply_perm inp1 : ((self=null & i=j) | ((1+i)<=j & dm(aaa,1+i,j) & dm(aaa,i,1+i) & 
self!=null))
tp_imply_perm inp2 : dm(aaa,i,j)
tp_imply_perm@8 EXIT:true

tp_imply@7
tp_imply inp1 :ante: ((self=null & i=j) | ((1+i)<=j & dm(aaa,1+i,j) & dm(aaa,i,1+i) & 
self!=null))
tp_imply inp2 :conseq: dm(aaa,i,j)
tp_imply@7 EXIT:solver:Z3: true

;Variables declarations
(declare-fun dm () Int)
(declare-fun aaa () (Array Int Int))
(declare-fun i () Int)
(declare-fun j () Int)
;Relations declarations
(declare-fun dm ((Array Int Int) Int Int) Bool)
;Axioms assertions
(assert (forall ((low Int) (high Int) (a (Array Int Int)) (l Int) (h Int))
	(=> (and (dm a low high) (and (<= low l) (<= h high)))
	(dm a l h))))
(assert (forall ((a (Array Int Int)) (l Int) (h Int))
	(=> (>= l h)
	(dm a l h))))
(assert (forall ((k Int) (a (Array Int Int)) (l Int) (h Int))
	(=> (and (dm a l k) (dm a k h))
	(dm a l h))))
(assert (forall ((low Int) (high Int) (a (Array Int Int)) (l Int) (h Int))
	(=> (and (dm a low high) (and (<= low l) (<= h high)))
	(dm a l h))))
(assert (forall ((a (Array Int Int)) (l Int) (h Int))
	(=> (>= l h)
	(dm a l h))))
(assert (forall ((k Int) (a (Array Int Int)) (l Int) (h Int))
	(=> (and (dm a l k) (dm a k h))
	(dm a l h))))
;Antecedent
(assert (<= i j))
(assert (dm aaa i j))
;Negation of Consequence
(assert (not (and (<= i j) (dm aaa i j))))
(check-sat)
>>> Z3 OUTPUT RECEIVED:
unsat
>>> VERDICT: UNSAT/VALID!

====================================================================
# hip ll-c1b.ss -tp z3 --smtinp --smtout

z3 parser error

;Variables declarations
(declare-fun dm () Int)
(declare-fun aaa () (Array Int Int))
(declare-fun i () Int)
(declare-fun j () Int)
;Relations declarations
;Axioms assertions
;Antecedent
(assert (<= i j))
(assert (dm aaa i j))
;Negation of Consequence
(assert (not (and (<= i j) (dm aaa i j))))
(check-sat)
>>> Z3 OUTPUT RECEIVED:
(error "line 11 column 19: invalid function application, wrong number of arguments")
(error "line 13 column 39: invalid function application, wrong number of arguments")
sat
>>> VERDICT: FAILED!

====================================================================
# sleek ll-c1a.ss -tp z3 --smtinp --smtout

3 problems
 (i) repeated declaration
 (ii) repeated axioms
 (iii) why is an error becoming "unsat". this is unsound!

(error "line 9 column 46: invalid declaration, function 'dm' (whith the given signature) already declared")

>>> GENERATED SMT INPUT:

;Variables declarations
(declare-fun dm () Int)
(declare-fun aaa () (Array Int Int))
(declare-fun i () Int)
(declare-fun j () Int)
;Relations declarations
(declare-fun dm ((Array Int Int) Int Int) Bool)
(declare-fun dm ((Array Int Int) Int Int) Bool)
;Axioms assertions
(assert (forall ((low Int) (high Int) (a (Array Int Int)) (l Int) (h Int))
	(=> (and (dm a low high) (and (<= low l) (<= h high)))
	(dm a l h))))
(assert (forall ((low Int) (high Int) (a (Array Int Int)) (l Int) (h Int))
	(=> (and (dm a low high) (and (<= low l) (<= h high)))
	(dm a l h))))
(assert (forall ((a (Array Int Int)) (l Int) (h Int))
	(=> (>= l h)
	(dm a l h))))
(assert (forall ((a (Array Int Int)) (l Int) (h Int))
	(=> (>= l h)
	(dm a l h))))
(assert (forall ((k Int) (a (Array Int Int)) (l Int) (h Int))
	(=> (and (dm a l k) (dm a k h))
	(dm a l h))))
(assert (forall ((k Int) (a (Array Int Int)) (l Int) (h Int))
	(=> (and (dm a l k) (dm a k h))
	(dm a l h))))
(assert (forall ((low Int) (high Int) (a (Array Int Int)) (l Int) (h Int))
	(=> (and (dm a low high) (and (<= low l) (<= h high)))
	(dm a l h))))
(assert (forall ((low Int) (high Int) (a (Array Int Int)) (l Int) (h Int))
	(=> (and (dm a low high) (and (<= low l) (<= h high)))
	(dm a l h))))
(assert (forall ((a (Array Int Int)) (l Int) (h Int))
	(=> (>= l h)
	(dm a l h))))
(assert (forall ((a (Array Int Int)) (l Int) (h Int))
	(=> (>= l h)
	(dm a l h))))
(assert (forall ((k Int) (a (Array Int Int)) (l Int) (h Int))
	(=> (and (dm a l k) (dm a k h))
	(dm a l h))))
(assert (forall ((k Int) (a (Array Int Int)) (l Int) (h Int))
	(=> (and (dm a l k) (dm a k h))
	(dm a l h))))
;Antecedent
(assert (<= i j))
(assert (dm aaa i j))
;Negation of Consequence
(assert (not (and (<= i j) (dm aaa i j))))
(check-sat)
>>> Z3 OUTPUT RECEIVED:
(error "line 9 column 46: invalid declaration, function 'dm' (whith the given signature) already declared")
unsat
>>> VERDICT: UNSAT/VALID!

====================================================================
# ll-d2a.slk -tp z3

checkentail x::ll2<i,j,aaa>@M&res=v & v=null & x=null 
 |-  x::ll2<i,j,aaa>. 
// valid

checkentail x::ll2<i,j,aaa>@M&res=v & v=null & x=null 
 |-  res::ll2<i,j,aaa>. 
// fail

checkentail x::ll2<i,j,aaa>@M&res=null & x=null 
 |-  res::ll2<i,j,aaa>. 
// valid
====================================================================
# ll-d2b.slk -tp z3

how come below fails for z3 but not omega?

checkentail x::ll2<n>@M&res=null & x=null 
 |-  res::ll2<n>. 
// valid

checkentail x::ll2<n>@M&res=v & v=null & x=null 
 |-  res::ll2<n>. 
// fail for -tp z3

====================================================================
====================================================================
====================================================================
====================================================================

====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
