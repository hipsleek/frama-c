/* selection sort */

data node {
	int val; 
	node next; 
}

class e1 extends __Exc {}
class e2 extends __Exc {}

bool rand()
  requires true
  ensures res or !res;

// PROBLEM : why an extra statement causes loss of flow?
node bindex(node x, node y)
  requires x::node<a,b> 
  ensures  x::node<_,b> & flow e1 ;
{
  //dprint;
  /* if (rand()) raise new e2(); */
  try {
   bind x to (xv,xn) in
   {
     dprint;
    xv=2;
    raise new e1();
    dprint;
   }
  } catch (e2 v) {
    dprint;
  };


}
/*
 xnode lost by exception!
        v_e1_22_548'::e1@M[Orig]&x=x' & y=y' & a=xv_561 & b=xn' & xv'=2  
        eres=v_e1_22_548'&{FLOW,(19,20)=e1}[]

Need to figure out which exceptions were generated by 
the current bind construct

Escaped States:
[
 Try-Block:0::
  Path: [(127::,1 ); (127::,1 )]
  State:v_e1_28_574'::e1@M[Orig]&x=x' & y=y' & !(v_bool_21_573') & !(v_bool_21_573') & a=xv_592 & b=xn_29' & xv_28'=2 & eres=v_e1_28_574'&{FLOW,(19,20)=e1}[]
        es_var_measures: MayLoop
;
  Path: [(127::,0 ); (127::,0 )]
  State:x::node<a,b>@M[Orig] * v_e2_21_572'::e2@M[Orig]&x=x' & y=y' & v_bool_21_573' & v_bool_21_573' & eres=v_e2_21_572'&{FLOW,(21,22)=e2}[]
        es_var_measures: MayLoop

 
*/


