P:={[x,y]:(y<0 || y>0 || x<1) && x>=0};
PairWiseCheck P;
Pre:={[x,y]:forall(RECx,RECy:
   not(RECx>=0 & x>=1+RECx & RECx+y=RECy+x) | 
    ((RECy<0 || RECy>0 || RECx<1)))};
Pre;
#{[x,y]: x <= y || y <= x-1, 0}

FinalPre:={[x,y]:
   x>=0 & (y!=0 | x<1) & (x<=y | y<=x-1,0)};
PairWiseCheck FinalPre;

P := {[x,y]:y <= -1 && 0 <= x || 0 <= x <= y};
P subset {[x,y]:y<0 | y>0 | x<1};

LHS := {[x,y,x1,y1]:(y <= -1 && 0 <= x || 0 <= x <= y)
      & x1=x-1 & y1=y-1 & x>0 & y!=0};
RHS := {[x,y,x1,y1]:(y1 <= -1 && 0 <= x1 || 0 <= x1 <= y1)};
LHS subset RHS;

####################################

A:={[n,a]:(a!=1 || n!=1) && n>=1};
PairWiseCheck A;

# RECn & RECa: input at the arbitrary call
# ((RECn >= 1 && n >= 1 + RECn) && n + RECa = a + RECn)
Pre:={[n,a]:forall(RECn,RECa:
   not(RECn>=1 & n>=1+RECn & RECn+a=RECa+n) | 
    ((RECn!=1 || RECa!=1)))};
Pre;

#{[n,a]: a <= 1} union
#{[n,a]: 2 <= a < n} union
#{[n,a]: n < a && 2 <= a}

FinalPre:={[n,a]:
   n>=1 & (a!=1 | n!=1) & (a<=1 | 2<=a<n | (n<a & 2<=a)) & (1<=a<n) & (a=1 | (a!=1 & n!=1))};
PairWiseCheck FinalPre;

#{[n,a]: 2 <= n < a} union {[n,a]: a <= 0 && 2 <= n} union {[n,a]: 1 <= a < n}

P := {[n,a]: 2 <= n < a | (1<=a<n) | (a <= 0 && 2 <= n)};
P subset {[n,a]:(a!=1 || n!=1) && n>=1};
P subset {[n,a]:(a=1 | (a!=1 & n!=1)) && n>=1};

# still fail -> need to strengthen more
LHS := {[n,a,n1,a1]:(2 <= n < a | (1<=a<n) | (a <= -1 && 2 <= n))
      & n1=n-1 & a1=a-1 & n>=1 & a!=1};
RHS := {[n,a,n1,a1]:(2 <= n1 < a1 | (1<=a1<n1) | (a1 <= -1 && 2 <= n1))};
LHS subset RHS;

PairWiseCheck RHS;

##########################
#PreFst = n>=1 & A(n,a)
#PreRec = forall RECn,RECa: (RECINV & (RECa=1 & RECn>=1 & A(RECn,RECa)) => RECn>=2)
#         forall RECn,RECa,RECn1,RECa1: (RECINV & (RECa!=1 & RECn>=1 & A(RECn,RECa) 
#                            & RECn1=RECn-1 & RECa1=RECa-1) => RECn1>=1 & A(RECn1,RECa1))



Pre:={[n,a]:forall(RECn,RECa:
   not(RECn>=1 & n>=1+RECn & RECn+a=RECa+n) | 
    (RECn>=1 & (RECn!=1 || RECa!=1)))};
Pre;



