data node {
	int val; 
	node next;	
}.

pred ll<n> == self = null & n = 0 
	or self::node<_, q> * q::ll<n-1> 
  inv n >= 0.

// (1) expect v<:@I
infer [v] x::node<p,q>@v |- x::node<a,b>@I.
print residue.

// (2) expect v<:@M
infer [v] x::node<p,q>@v |- x::node<a,b>.
print residue.

// (3) expect x!=null & v<:@M
infer [x,v] x::ll<n>@v |- x::node<a,b>@I.
print residue.

// (4) expect x!=null & v<:@I
infer [x,v] x::ll<n>@v |- x::node<a,b>@I.
print residue.

// (5) expect n>0 & v<:@I
infer [n,v] x::ll<n>@v |- x::node<a,b>@I.
print residue.

// (6) expect n>0 & v<:@M
infer [n,v] x::ll<n>@v |- x::node<a,b>.
print residue.

// (7) expect n>0 & v<:@L
infer [n,v] x::ll<n>@v |- x::node<a,b>@L.
print residue.

// (8) expect n>0 
infer [n] x::ll<n> |- x::node<a,b>.
print residue.

// (9) mismatched imm annotations
infer [] x::ll<n>@L & n>1 |- x::node<a,b>@L*b::node<_,_>.
print residue.



// (10) inferred v2<=1 & v1<:v2
/*
<1>EXISTS(flted_7_226,flted_7_240: Anon_15::ll<flted_7_240>@v1[Orig]&flted_7_240+1=flted_7_226 & flted_7_226+1=n & 1<n & v1<:v2 & v2<=1&{FLOW,(17,18)=__norm})
*/
infer [v1,v2] x::ll<n>@v1 & n>1 |- x::node<a,b>@I*b::node<_,_>@v2.
print residue.



// (11) valid with 1<=v2
/*
<1>EXISTS(flted_7_263,flted_7_277: Anon_17::ll<flted_7_277>@I[Orig]&flted_7_277+1=flted_7_263 & flted_7_263+1=n & 1<n & @I<:v2&{FLOW,(17,18)=__norm})
*/
infer [v2] x::ll<n>@I & n>1 |- x::node<a,b>@I*b::node<_,_>@v2.
print residue.

// (12) valid with v1<:v2 
infer [v1,v2] x::node<a,b>@v1 |- x::node<c,d>@v2.
print residue.

// (13) valid with v1<:v2 
infer [v1,v2] x::ll<n>@v1 |- x::ll<n>@v2.
print residue.

// (14) valid with @I<:v2 in residue
infer [v2] x::ll<n>@I |- x::ll<n>@v2.
print residue.

// (15) valid with v1<=1 in residue
infer [v2] x::ll<n>@v2 |- x::ll<n>@I.
print residue.

// (16) 
infer [v2] x::ll<n>@v2 |- x::ll<n>@M.
print residue.

// (17) 
infer [v2] x::ll<n>@L |- x::ll<n>@v2.
print residue.

// (18)
infer [v1] x::node<_,q>@v1*q::node<_,r>@v1 |- x::node<a,b>@I*b::node<_,_>@v2.
print residue.

// (19)
infer [v1,v2] x::node<_,q>@v1*q::node<_,r>@v1 |- x::node<a,b>@I*b::node<_,_>@v2.
print residue.

// (20)
infer [v1] x::node<_,q>@v1 & v1<:I |- x::node<a,b>@v2.
print residue.

// (21)
infer [v1] x::node<_,q>@v1 |- x::node<a,b>@I.
print residue.


//M<:I<:L
//M v=0
//I v=1
//L v=2
/*
v<=0 <==> v=@M
v<=1 <==> v=@M or v=@I
v<=2 <==> v=@M or v=@I or v=@L
*/
