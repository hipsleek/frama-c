data node {
  int val;
  node next;
}.

pred p<v> == self::node<v,_>
  inv self!=null.

// (1)
checkentail y::node<_,r>@M |- y::node<a,b>@v & v<:@M.
print residue.
/*
PROBLEM : @M<:v instantiated instead of v=@M;
   implicit should be instantiated with the latter

 @M=0; @I=1; @L=2
   0<=v |- v<=0

 y::node<Anon_11,r>@M[Orig]&true&{FLOW,(17,18)=__norm}[] [] |-  EBase exists (Expl)(Impl)[v; a; b](ex)y::node<a,b>@v[Orig]&v<:@M&
       {FLOW,(17,18)=__norm}[]
Entail (1) : Fail.(may) cause: @M<:v |-  v<:@M. LOCS:[0;7] (may-bug)
*/

//(2) should valid
checkentail y::node<_,r>@M |- y::node<a,b>@v & v<:@I.
print residue.
 
//(3) right instantiated as @I<:v
checkentail y::node<_,_>@I |- [v] y::node<_,_>@v & v<:@M.

//(4) left instantiated as v=@I
checkentail y::node<_,_>@I |- y::node<_,_>@v & v<:@M.

//(5) fail
checkentail y::node<_,_>@I |- y::node<_,_>@M.


// (6)
checkentail y::node<_,r>@M * x::node<_,_>@L 
              |- [v] y::node<_,_>@v * x::node<_,_>@v.
print residue.

// (7)
checkentail y::node<_,r> |- y::node<_,_>.
print residue.

// (8)
checkentail y::node<_,r>@L * x::node<_,_>@M 
              |- y::node<_,_>@v * x::node<_,_>@v.
print residue.


// (9) fail cos of implicit instantiation
checkentail y::node<_,r>@M * x::node<_,_>@L 
              |- [v] y::node<_,_>@v * x::node<_,_>@v.
print residue.

// (10) fail cos of implicit instantiation
checkentail y::node<_,r>@M * x::node<_,_>@L 
              |- y::node<_,_>@v * x::node<_,_>@v.
/*
PROBLEM : currently two implicit v, but
    there should be only one implicit v;
   How come Anon also made implicit.
   Anon var should e remoed from residue.

 y::node<Anon_33,r>@M[Orig] * x::node<Anon_34,Anon_35>@L[Orig]&true&
{FLOW,(17,18)=__norm}[] [] |-  EBase exists (Expl)(Impl)[Anon_36; Anon_37; v; Anon_38; 
       Anon_39](ex)y::node<Anon_36,Anon_37>@v[Orig] * 
       x::node<Anon_38,Anon_39>@v[Orig]&true&{FLOW,(17,18)=__norm}[]

*/

// (11)
checkentail y::node<_,r>@I & a=3 |- y::node<_,b>@v.
print residue.

// (12)
checkentail y::node<_,r>@I & v=@L & a=3 |- y::node<_,b>@v.
print residue.

// (13)
checkentail y::node<_,r>@I & v=@M & a=3 |- y::node<_,b>@v.
/*
PROBLEM : expecting @v to be existentially quantified.
          normalization need to be fixed.
run_infer:
 y::node<Anon_12,r>@M[Orig]&v=@I & a=3&{FLOW,(17,18)=__norm}[] [] |-  EBase exists (Expl)(Impl)[b](ex)EXISTS(a_28: y::node<a_28,b>@v[Orig]&
       v<:@M & a_28=a&{FLOW,(17,18)=__norm})[]

*/

//checkentail y::p<2>@M |- y::p<b>@v & b>1.
//print residue.

// (14)
checkentail y::node<_,_>@M |- y::node<_,_>@v .
print residue.

// (15)
checkentail y::node<_,_>@M |- (exists v: y::node<_,_>@v & v=@M) .
print residue.

// (16)
checkentail y::node<_,_>@M |- [v] y::node<a,b>@v & v<:@M.
print residue.

// (17) valid
//infer [] y::node<_,_>@I |- y::node<a,b>@v & v<:@I.

