data node {
 int val;
 node next;
}.

HeapPred H(node x).
HeapPred G(node x, node x).
HeapPred H1(node x, node x).

infer [H,G] H(x) |- x::node<a,q>@L .
/*
  --> [H,G,H1] x::node<a,q>*H1(x,q)
   with H(x) -> x::node<a,q>*H1(x,q)
*/

//recursive foo call
infer [H,G,H1] x::node<a,x'>*H1(x,x') &  b & x'!=null |- H(x').
/*
  --> [H,G,H1] x::node<a,x0> & x0!=null
   with x'!=null & H1(x,x') -> H(x')
*/

//Postcondition for then branch
infer [H,G,H1] x::node<a,x0> * G(x0,x') & b & x0!=null |- G(x,x').
//  with x::node<a,x0> * G(x0,x') & x0!=null -> G(x,x')

//Postcondition for else branch
infer [H,G,H1] x::node<a,x'> * H1(x,x') & b & x'=null |- G(x,x').
// with x::node<a,x'> * H1(x,x') & x'=null -> G(x,x')

infer [H] H(x) * x::node<_,q> |- x::node<_,_>. 
// expect H to be pure

infer [H] H(x) |- x::node<_,_>. 
// expect H to be pure

infer [H] H(x) |- x::node<_,q>*q::node<_,r>. 
// expecting H1 to be added

infer [H1] H1(x,q)*q::node<_,_> |- x::node<_,q>*q::node<_,r>. 
// expecting H1 to be defined

infer [H] x::node<_,q>*q::node<_,r>*H(r)*y::node<_,> |- H(x).

infer [H] y::node<_,_> & x=null  |- H(x).





