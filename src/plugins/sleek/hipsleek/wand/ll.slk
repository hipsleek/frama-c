/* singly linked lists */

/* representation of a node */
data node {
	int val;
	node next
}.

relation cons(abstract L, int v, abstract Lt).

relation reverse(abstract L, abstract L1).

relation append(abstract L, abstract L1, abstract L2).

relation isempty(abstract L).

axiom cons(L,v,Lp) ==> !(isempty(L)).

axiom isempty(L) ==> append(L1,L,L1). 

axiom isempty(L) ==> reverse(L,L).

axiom cons(L,v,Lt) & reverse(Tr,Lt) ==> exists (Le: exists (Lv: exists (Lr: append(Lr,Tr,Lv) & reverse(Lr,L) & cons(Lv,v,Le) & isempty(Le)))).

/* view for a singly linked list */
pred ll<L> == self=null & isempty(L)
      or self::node<v, p> * p::ll<Lp> & cons(L,v,Lp)
  inv (self=null & isempty(L) | self!=null & !(isempty(L))).

pred lln<n> == self=null & n=0
      or self::node<v, p> * p::lln<n-1>
  inv  n>=0.

checkentail xs!=null & reverse(Lr_1054,Lp_1004) & cons(L2_1014,v_1002,L2) & 
exists(L2_1014:cons(L2_1014,v_1002,L2)) & append(L_1053,Lr_1054,L2_1014) & 
cons(L,v_1002,L2) & cons(L1,v_1002,Lp_1004) |-  exists Lr_1055 : append(L_1053,Lr_1055,L2) & reverse(Lr_1055,L1).

/*
checkentail p::ll<Lp> * ys1::ll<L2> * xs1::node<v,ys1> & tmp'=xs' & xs=ys' & next=p & 
p=tmp' & xs!=null & xs=xs1 & ys=ys1 & cons(L1,v,Lp)
 |-  xs'::ll<Lp> * ys'::ll<L1>.

checkentail p::lln<np> * ys1::lln<n2> * xs1::node<v,ys1> & tmp'=xs' & xs=ys' & next=p & 
p=tmp' & xs!=null & xs=xs1 & ys=ys1 & n1=np+1
 |-  xs'::lln<np> * ys'::lln<n2+1>.
*/
