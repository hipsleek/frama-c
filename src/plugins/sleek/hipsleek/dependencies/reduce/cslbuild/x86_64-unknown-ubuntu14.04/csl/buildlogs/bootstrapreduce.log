
3

nil

t

!*native_code

nil

nil

Reading "$srcdir/fastgets.lsp"
+++ Fastget size was 32, now 32
+++ Use fastget slot 0 for noncom
+++ Use fastget slot 1 for lose

nil

Read "$srcdir/fastgets.lsp"

nil

Reading "$srcdir/compat.lsp"

nil

nil
+++ Fastget size was 32, now 32

32
+++ Use fastget slot 0 for noncom

0
+++ Use fastget slot 1 for lose

1

nil

!*echo

nil

!*raise

nil

!*lower

t

!*savedef

nil

!*comp

nil

!*plap

nil

!*pgwd

nil

!*pwrds

t

9

!!fleps1

1.0e-12

!!fleps1

rplacw

expand

plus

times

mapcar

maplist

mapcan

mapcon

mapc

map

copy

sassoc

rassoc

lastcar

open

binopen

pipe!-open

putd

putc

traceset1

untraceset1

traceset

untraceset

deflist

global

fluid

unglobal

unfluid

nil

printprompt

nil

nil

nil

nil

nil

nil

t

carcheck

nil

(!
)

symerr

s!:oblist

s!:oblist1

oblist

s!:make!-psetq!-vars

s!:make!-psetq!-bindings

s!:make!-psetq!-assignments

psetq

s!:do!-bindings

s!:do!-endtest

s!:do!-result

s!:do!-updates

s!:expand!-do

do

do!*

s!:expand!-dolist

dolist

s!:expand!-dotimes

dotimes

nil

Read "$srcdir/compat.lsp"

nil

Reading "$srcdir/extras.lsp"

oem!-supervisor

break!-loop

nil

0

s!:stamp

dated!-name

hashtagged!-name

nil

sort

stable!-sort

sortip

stable!-sortip

nil

nil

#H(0 0 10 1.5 [0 SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0
SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0
SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0
SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0
SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0
SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0 SPID_HASH0])

s!:prinl0

s!:prinl1

s!:prinl2

printl

printcl

princl

+++ prinl redefined

prinl

s!:format

format

nil

nil

t

t

5

prettyprint

superprintm

superprinm

s!:top

s!:depth

s!:indenting

s!:blankcount

s!:blanklist

s!:setindenting

s!:setblankcount

s!:setblanklist

s!:newframe

s!:blankp

s!:prindent

s!:explodes

s!:prvector

s!:putblank

s!:endlist

s!:finishpending

s!:quotep

prog

1

1

1

1

1

1

2

2

2

2

2

4

s!:putch

s!:overflow

!(

![

!)

!]

fetch!-url

Read "$srcdir/extras.lsp"

nil

Reading "$srcdir/compiler.lsp"

nil

(loadloc loadloc0 loadloc1 loadloc2 loadloc3 loadloc4 loadloc5 loadloc6 loadloc7
loadloc8 loadloc9 loadloc10 loadloc11 loc0loc1 loc1loc2 loc2loc3 loc1loc0
loc2loc1 loc3loc2 vnil loadlit loadlit1 loadlit2 loadlit3 loadlit4 loadlit5
loadlit6 loadlit7 loadfree loadfree1 loadfree2 loadfree3 loadfree4 storeloc
storeloc0 storeloc1 storeloc2 storeloc3 storeloc4 storeloc5 storeloc6 storeloc7
storefree storefree1 storefree2 storefree3 loadlex storelex closure carloc0
carloc1 carloc2 carloc3 carloc4 carloc5 carloc6 carloc7 carloc8 carloc9 carloc10
carloc11 cdrloc0 cdrloc1 cdrloc2 cdrloc3 cdrloc4 cdrloc5 caarloc0 caarloc1
caarloc2 caarloc3 call0 call1 call2 call2r call3 calln call0_0 call0_1 call0_2
call0_3 call1_0 call1_1 call1_2 call1_3 call1_4 call1_5 call2_0 call2_1 call2_2
call2_3 call2_4 builtin0 builtin1 builtin2 builtin2r builtin3 apply1 apply2
apply3 apply4 jcall jcalln jump jump_b jump_l jump_bl jumpnil jumpnil_b
jumpnil_l jumpnil_bl jumpt jumpt_b jumpt_l jumpt_bl jumpatom jumpatom_b
jumpatom_l jumpatom_bl jumpnatom jumpnatom_b jumpnatom_l jumpnatom_bl jumpeq
jumpeq_b jumpeq_l jumpeq_bl jumpne jumpne_b jumpne_l jumpne_bl jumpequal
jumpequal_b jumpequal_l jumpequal_bl jumpnequal jumpnequal_b jumpnequal_l
jumpnequal_bl jumpl0nil jumpl0t jumpl1nil jumpl1t jumpl2nil jumpl2t jumpl3nil
jumpl3t jumpl4nil jumpl4t jumpst0nil jumpst0t jumpst1nil jumpst1t jumpst2nil
jumpst2t jumpl0atom jumpl0natom jumpl1atom jumpl1natom jumpl2atom jumpl2natom
jumpl3atom jumpl3natom jumpfree1nil jumpfree1t jumpfree2nil jumpfree2t
jumpfree3nil jumpfree3t jumpfree4nil jumpfree4t jumpfreenil jumpfreet jumplit1eq
jumplit1ne jumplit2eq jumplit2ne jumplit3eq jumplit3ne jumplit4eq jumplit4ne
jumpliteq jumplitne jumpb1nil jumpb1t jumpb2nil jumpb2t jumpflagp jumpnflagp
jumpeqcar jumpneqcar catch catch_b catch_l catch_bl uncatch throw protect
unprotect pvbind pvrestore freebind freerstr exit nilexit loc0exit loc1exit
loc2exit push pushnil pushnil2 pushnil3 pushnils pop lose lose2 lose3 loses swop
eq eqcar equal numberp car cdr caar cadr cdar cddr cons ncons xcons acons length
list2 list2star list3 plus2 add1 difference sub1 times2 greaterp lessp flagp get
litget getv qgetv qgetvn bigstack bigcall icase fastget spare1 spare2)

(256 opcodes allocated)

nil

s!:vecof

nil

s!:prinhex1

s!:prinhex2

s!:prinhex4

nil

nil

nil

nil

nil

nil

nil

nil

nil

nil

nil

t

nil

nil

t

nil

nil

s!:start_procedure

s!:set_label

s!:outjump

s!:outexit

nil

s!:outopcode0

s!:outopcode1

(loadlit loadfree call0 call1 litget jumpliteq jumplitne jumpliteq!* jumplitne!*
jumpfreet jumpfreenil)

s!:record_literal

s!:record_literal_for_jump

s!:outopcode1lit

s!:outopcode2

s!:outopcode2lit

s!:outlexref

((1 . 7) . [!- loadlit1 loadlit2 loadlit3 loadlit4 loadlit5 loadlit6 loadlit7])

((1 . 4) . [!- loadfree1 loadfree2 loadfree3 loadfree4])

((1 . 3) . [!- storefree1 storefree2 storefree3])

((0 . 3) . [call0_0 call0_1 call0_2 call0_3])

((0 . 5) . [call1_0 call1_1 call1_2 call1_3 call1_4 call1_5])

((0 . 4) . [call2_0 call2_1 call2_2 call2_3 call2_4])

((1 . 4) . [!- jumpfree1t jumpfree2t jumpfree3t jumpfree4t])

((1 . 4) . [!- jumpfree1nil jumpfree2nil jumpfree3nil jumpfree4nil])

((1 . 4) . [!- jumplit1eq jumplit2eq jumplit3eq jumplit4eq])

((1 . 4) . [!- jumplit1ne jumplit2ne jumplit3ne jumplit4ne])

((1 . 4) . [!- jumplit1eq jumplit2eq jumplit3eq jumplit4eq])

((1 . 4) . [!- jumplit1ne jumplit2ne jumplit3ne jumplit4ne])

0

16

32

48

64

80

96

112

128

144

160

176

192

208

224

240

s!:literal_order

s!:resolve_literals

s!:only_loadlit

s!:too_many_literals

nil

s!:endprocedure

s!:add_pending

s!:invent_exit

s!:destination_label

s!:remlose

(0 . 0)

(0 . 1)

(0 . 2)

(0 . 3)

(1 . 0)

(1 . 1)

(1 . 2)

(1 . 3)

(1 . 4)

(1 . 5)

(2 . 0)

(2 . 1)

(2 . 2)

(2 . 3)

(2 . 4)

s!:remcall

s!:is_lose_and_exit

s!:try_tail_1

s!:try_tailcall

s!:tidy_exits_1

s!:tidy_exits

s!:tidy_flowgraph

(jumpnil jumpt jumpatom jumpnatom jumpeq jumpne jumpequal jumpnequal jumpl0nil
jumpl0t jumpl1nil jumpl1t jumpl2nil jumpl2t jumpl3nil jumpl3t jumpl4nil jumpl4t
jumpl0atom jumpl0natom jumpl1atom jumpl1natom jumpl2atom jumpl2natom jumpl3atom
jumpl3natom jumpst0nil jumpst0t jumpst1nil jumpst1t jumpst2nil jumpst2t
jumpfree1nil jumpfree1t jumpfree2nil jumpfree2t jumpfree3nil jumpfree3t
jumpfree4nil jumpfree4t jumpfreenil jumpfreet jumplit1eq jumplit1ne jumplit2eq
jumplit2ne jumplit3eq jumplit3ne jumplit4eq jumplit4ne jumpliteq jumplitne
jumpliteq!* jumplitne!* jumpb1nil jumpb1t jumpb2nil jumpb2t jumpflagp jumpnflagp
jumpeqcar jumpneqcar)

s!:negate_jump

s!:resolve_labels

s!:plant_basic_block

s!:plant_bytes

s!:plant_exit_code

(jumpl0nil jumpl0t jumpl1nil jumpl1t jumpl2nil jumpl2t jumpl3nil jumpl3t
jumpl4nil jumpl4t jumpl0atom jumpl0natom jumpl1atom jumpl1natom jumpl2atom
jumpl2natom jumpl3atom jumpl3natom jumpst0nil jumpst0t jumpst1nil jumpst1t
jumpst2nil jumpst2t jumpfree1nil jumpfree1t jumpfree2nil jumpfree2t jumpfree3nil
jumpfree3t jumpfree4nil jumpfree4t jumpfreenil jumpfreet jumplit1eq jumplit1ne
jumplit2eq jumplit2ne jumplit3eq jumplit3ne jumplit4eq jumplit4ne jumpliteq
jumplitne jumpliteq!* jumplitne!* jumpb1nil jumpb1t jumpb2nil jumpb2t jumpflagp
jumpnflagp jumpeqcar jumpneqcar)

nil

nil

nil

s!:expand_jump

s!:comval

s!:comspecform

nil

s!:improve

s!:imp_minus

s!:imp_minus

s!:imp_minus

s!:imp_times

s!:imp_times

s!:imp_itimes

s!:imp_itimes

s!:imp_difference

s!:imp_difference

s!:imp_idifference

s!:imp_idifference

s!:alwayseasy

s!:alwayseasy

s!:alwayseasy

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easyifarg

s!:easygetv

s!:easygetv

s!:easyqgetv

s!:easyqgetv

s!:iseasy

s!:instate_local_decs

s!:residual_local_decs

s!:cancel_local_decs

s!:find_local_decs

s!:comlambda

s!:loadliteral

s!:comquote

s!:comquote

nil

s!:comfunction

s!:comfunction

s!:should_be_fluid

s!:find_lexical

nil

[loadloc0 loadloc1 loadloc2 loadloc3 loadloc4 loadloc5 loadloc6 loadloc7
loadloc8 loadloc9 loadloc10 loadloc11]

s!:comatom

nil

s!:islocal

s!:load2

nil

[carloc0 carloc1 carloc2 carloc3 carloc4 carloc5 carloc6 carloc7 carloc8 carloc9
carloc10 carloc11]

[cdrloc0 cdrloc1 cdrloc2 cdrloc3 cdrloc4 cdrloc5]

[caarloc0 caarloc1 caarloc2 caarloc3]

nil

nil

nil

nil

s!:comcall

s!:ad_name

s!:comcarcdr3

s!:comcarcdr3

s!:comcarcdr3

s!:comcarcdr3

s!:comcarcdr3

s!:comcarcdr3

s!:comcarcdr3

s!:comcarcdr3

s!:comcarcdr3

s!:comcarcdr4

s!:comcarcdr4

s!:comcarcdr4

s!:comcarcdr4

s!:comcarcdr4

s!:comcarcdr4

s!:comcarcdr4

s!:comcarcdr4

s!:comcarcdr4

s!:comcarcdr4

s!:comcarcdr4

s!:comcarcdr4

s!:comcarcdr4

s!:comcarcdr4

s!:comcarcdr4

s!:comcarcdr4

s!:comcarcdr4

s!:comgetv

s!:comgetv

s!:comqgetv

s!:comqgetv

s!:comget

s!:comget

s!:comflagp

s!:comflagp

s!:complus

s!:complus

s!:comtimes

s!:comtimes

s!:comiplus

s!:comiplus

s!:comitimes

s!:comitimes

s!:complus2

s!:complus2

s!:comdifference

s!:comdifference

s!:comiplus2

s!:comiplus2

s!:comidifference

s!:comidifference

s!:comtimes2

s!:comtimes2

s!:comtimes2

s!:comminus

s!:comminus

s!:comminusp

s!:comminusp

s!:comlessp

s!:comlessp

s!:comiminusp

s!:comiminusp

s!:comilessp

s!:comilessp

s!:comprogn

s!:comprogn

s!:comprog1

s!:comprog1

s!:comprog2

s!:comprog2

s!:outstack

s!:outlose

s!:comprog

s!:comprog

s!:comtagbody

s!:comtagbody

s!:comblock

s!:comblock

s!:comcatch

s!:comcatch

s!:comthrow

s!:comthrow

s!:comunwind!-protect

s!:comunwind!-protect

s!:comdeclare

s!:comdeclare

s!:expand_let

s!:comlet

s!:comlet

s!:expand_let!*

s!:comlet!*

s!:comlet!*

s!:restore_stack

s!:comgo

s!:comgo

s!:comreturn!-from

s!:comreturn!-from

s!:comreturn

s!:comreturn

nil

[jumpl0t jumpl1t jumpl2t jumpl3t jumpl4t]

[jumpl0nil jumpl1nil jumpl2nil jumpl3nil jumpl4nil]

[jumpl0atom jumpl1atom jumpl2atom jumpl3atom]

[jumpl0natom jumpl1natom jumpl2natom jumpl3natom]

s!:jumpif

s!:testnot

s!:testnot

s!:testnot

s!:testatom

s!:testatom

s!:testconsp

s!:testconsp

s!:comcond

s!:comcond

s!:comif

s!:comif

s!:comwhen

s!:comwhen

s!:comunless

s!:comunless

s!:comicase

s!:comicase

181

182

s!:jumpliteql

s!:casebranch

s!:comcase

s!:comcase

nil

s!:comeval!-when

s!:comeval!-when

s!:comthe

s!:comthe

s!:comand

s!:comand

s!:comor

s!:comor

s!:combool

s!:combool

s!:combool

s!:testeq

s!:testeq1

s!:testeq

s!:testeq1

s!:testequal

s!:testequal

s!:testneq

s!:testneq

s!:testeqcar

s!:testeqcar

s!:testflagp

s!:testflagp

nil

[storeloc0 storeloc1 storeloc2 storeloc3 storeloc4 storeloc5 storeloc6 storeloc7
]

s!:comsetq

s!:comsetq

s!:comsetq

s!:comlist

s!:comlist

s!:comlist!*

s!:comlist!*

s!:comcons

s!:comcons

s!:comapply

s!:comapply

s!:imp_funcall

s!:imp_funcall

s!:eval_to_eq_safe

s!:eval_to_eq_unsafe

s!:list_all_eq_safe

s!:eval_to_list_all_eq_safe

s!:list_some_eq_unsafe

s!:eval_to_list_some_eq_unsafe

s!:eval_to_car_eq_safe

s!:eval_to_car_eq_unsafe

s!:alist_eq_safe

s!:eval_to_alist_eq_safe

s!:alist_eq_unsafe

s!:eval_to_alist_eq_unsafe

nil

nil

s!:comequal

s!:comequal

s!:comeq

s!:comeq

s!:comeqcar

s!:comeqcar

s!:comsublis

s!:comsublis

s!:comsubla

s!:comsubla

s!:comassoc

s!:comassoc

s!:comassoc

s!:comatsoc

s!:comatsoc

s!:commember

s!:commember

s!:commember

s!:commemq

s!:commemq

s!:comdelete

s!:comdelete

s!:comdeleq

s!:comdeleq

s!:commap

s!:commap

s!:commap

s!:commap

s!:commap

s!:commap

s!:commap

s!:nilargs

s!:subargs

nil

clear_source_database

load_source_database

save_source_database

display_source_database

nil

s!:r2i

s!:r2i1

s!:r2iand

s!:r2ior

s!:r2icond

s!:r2iif

s!:r2iwhen

s!:r2iprogn

s!:r2icons

s!:r2icons2

s!:r2isteps

s!:r2i_safestep

s!:r2i_dependson

nil

nil

s!:r2i_list_dependson

s!:r2i2

s!:r2i2cond

s!:r2i2if

s!:r2i2when

s!:r2i2progn

s!:r2i3

s!:any_fluid

s!:compile1

s!:compile2

compile!-all

nil

nil

nil

s!:fasl_supervisor

s!:fslout0

s!:fslout1

s!:fslout2

nil

faslend

endstat

s!:file

s!:trim!.c

s!:dir

faslout

rlis

s!:c_supervisor

s!:cout0

s!:cout1

nil

c_end

endstat

c_out

rlis

s!:compile!-file!*

compile!-file!*

compd

s!:compile0

s!:fully_macroexpand_list

s!:fully_macroexpand

s!:expandfunction

s!:expandflet

s!:expandfletvars

s!:expandlabels

s!:expandmacrolet

s!:expandprog

s!:expandtagbody

s!:expandprogv

s!:expandblock

s!:expanddeclare

s!:expandlet

s!:expandlet!*

s!:expandgo

s!:expandreturn!-from

s!:expandcond

s!:expandcase

s!:expandeval!-when

s!:expandthe

s!:expandmv!-call

s!:expandfunction

s!:expandflet

s!:expandlabels

s!:expandmacrolet

s!:expandprog

s!:expandtagbody

s!:expandprogv

s!:expandblock

s!:expanddeclare

s!:expandlet

s!:expandlet!*

s!:expandgo

s!:expandreturn!-from

s!:expandcond

s!:expandcase

s!:expandeval!-when

s!:expandthe

s!:expandmv!-call

compile

nil

nil

nil

c!:printf

c!:printf1

c!:safeprin

c!:valid_fndef

c!:valid_list

c!:valid_expr

c!:cspecform

c!:valid_specform

c!:valid_specform

nil

nil

nil

c!:reset_gensyms

c!:my_gensym

c!:newreg

c!:startblock

c!:outop

c!:endblock

c!:cval_inner

c!:cval

c!:clambda

c!:locally_bound

nil

nil

c!:find_literal

c!:catom

c!:cjumpif

nil

c!:ccall

nil

c!:has_calls

c!:has_calls_1

c!:can_reach

c!:any_can_reach

c!:pareval

c!:ccall1

nil

nil

c!:cfndef

nil

nil

nil

c!:ccompilesupervisor

nil

((!  . !A) (!! . !B) (!# . !C) (!$ . !D) (!% . !E) (!^ . !F) (!& . !G) (!* . !H)
(!( . !I) (!) . !J) (!- . !K) (!+ . !L) (!= . !M) (!\ . !N) (!| . !O) (!, . !P)
(!. . !Q) (!< . !R) (!> . !S) (!: . !T) (!; . !U) (!/ . !V) (!? . !W) (!~ . !X)
(!` . !Y))

nil

c!:inv_name

nil

c!:ccmpout1

c!:ccmpout1a

nil

c!:concat

c!:ccompilestart

c!:print!-init

c!-end

c!-end1

endstat

c!-compile

rlis

c!:print_opcode

c!:print_exit_condition

c!:pmovr

c!:pmovr

c!:pmovk

c!:pmovk

c!:pmovk1

c!:pmovk1

nil

c!:preloadenv

c!:preloadenv

c!:pldrglob

c!:pldrglob

c!:pstrglob

c!:pstrglob

c!:pnilglob

c!:pnilglob

nil

c!:pnull

c!:pnull

c!:pnull

nil

c!:pfastget

c!:pfastget

nil

c!:pfastflag

c!:pfastflag

nil

c!:pcar

c!:pcar

c!:pcdr

c!:pcdr

c!:pqcar

c!:pqcar

c!:pqcdr

c!:pqcdr

c!:patom

c!:patom

nil

c!:pnumberp

c!:pnumberp

nil

c!:pfixp

c!:pfixp

nil

c!:piminusp

c!:piminusp

nil

c!:pilessp

c!:pilessp

nil

c!:pigreaterp

c!:pigreaterp

nil

c!:piminus

c!:piminus

c!:piadd1

c!:piadd1

c!:pisub1

c!:pisub1

c!:piplus2

c!:piplus2

c!:pidifference

c!:pidifference

c!:pitimes2

c!:pitimes2

c!:pmodular_plus

c!:pmodular_plus

c!:pmodular_difference

c!:pmodular_difference

c!:pmodular_minus

c!:pmodular_minus

c!:passoc

c!:passoc

nil

c!:patsoc

c!:patsoc

nil

c!:pmember

c!:pmember

nil

c!:pmemq

c!:pmemq

nil

c!:pget

c!:pget

c!:pqgetv

c!:pqgetv

c!:pqputv

c!:pqputv

c!:peq

c!:peq

nil

c!:pequal

c!:pequal

nil

c!:pfluidbind

c!:pfluidbind

c!:pcall

c!:fix_nargs

c!:pcall

c!:pgoto

c!:pifnull

c!:pifnull

c!:pifatom

c!:pifatom

c!:pifsymbol

c!:pifsymbol

c!:pifnumber

c!:pifnumber

c!:pifizerop

c!:pifizerop

c!:pifeq

c!:pifeq

c!:pifequal

c!:pifequal

c!:pifilessp

c!:pifilessp

c!:pifigreaterp

c!:pifigreaterp

c!:display_flowgraph

nil

c!:branch_chain

c!:one_operand

c!:two_operands

nil

nil

nil

nil

nil

nil

nil

nil

c!:live_variable_analysis

c!:insert1

c!:clash

c!:build_clash_matrix

c!:allocate_registers

c!:remove_nops

nil

c!:find_error_label

c!:assign

c!:insert_tailcall

c!:does_return

c!:pushpop

c!:optimise_flowgraph

c!:print_error_return

c!:cand

c!:cand

c!:ccatch

c!:ccatch

c!:ccompile_let

c!:ccompiler_let

c!:ccond

c!:ccond

c!:valid_cond

c!:valid_cond

c!:cdeclare

c!:cdeclare

c!:cde

c!:cde

c!:cdefun

c!:cdefun

c!:ceval_when

c!:ceval_when

c!:cflet

c!:cflet

c!:cfunction

c!:valid_function

c!:cfunction

c!:valid_function

c!:cgo

c!:cgo

c!:valid_quote

c!:cif

c!:cif

c!:clabels

c!:clabels

c!:expand!-let

c!:clet

c!:valid_let

c!:clet

c!:valid_let

c!:expand!-let!*

c!:clet!*

c!:clet!*

c!:valid_let

c!:clist

c!:clist

c!:clist!*

c!:clist!*

c!:ccons

c!:ccons

c!:cget

c!:cget

c!:cflag

c!:cflag

c!:cgetv

c!:cgetv

c!:cputv

c!:cputv

c!:cqputv

c!:cqputv

c!:cmacrolet

c!:cmacrolet

c!:cmultiple_value_call

c!:cmultiple_value_call

c!:cmultiple_value_prog1

c!:cmultiple_value_prog1

c!:cor

c!:cor

c!:cprog

c!:cprog

c!:valid_prog

c!:valid_prog

c!:cprog!*

c!:cprog!*

c!:cprog1

c!:cprog1

c!:cprog2

c!:cprog2

c!:cprogn

c!:cprogn

c!:cprogv

c!:cprogv

c!:cquote

c!:valid_quote

c!:cquote

c!:valid_quote

c!:creturn

c!:creturn

c!:creturn_from

c!:csetq

c!:csetq

c!:csetq

c!:cprivate_tagbody

c!:cprivate_tagbody

c!:cthe

c!:cthe

c!:cthrow

c!:cthrow

c!:cunless

c!:cunless

c!:cunwind_protect

c!:cunwind_protect

c!:cwhen

c!:cwhen

c!:expand_map

c!:expand_map

c!:expand_map

c!:expand_map

c!:expand_map

c!:expand_map

c!:expand_map

c!:expand_carcdr

c!:expand_carcdr

c!:builtin_one

c!:builtin_two

c!:narg

nil

c!:cplus2

c!:cplus2

c!:ciplus2

c!:ciplus2

c!:cdifference

c!:cdifference

c!:cidifference

c!:cidifference

c!:ctimes2

c!:ctimes2

c!:citimes2

c!:citimes2

c!:cminus

c!:cminus

c!:ceq

c!:ceq

c!:cequal

c!:cequal

c!:is_fixnum

c!:certainlyatom

c!:atomlist1

c!:atomlist

c!:atomcar

c!:atomkeys1

c!:atomkeys

c!:comsublis

c!:comsublis

c!:comassoc

c!:comassoc

c!:comassoc

c!:commember

c!:commember

c!:comdelete

c!:comdelete

c!:ctestif

c!:ctestif

c!:ctestnull

c!:ctestnull

c!:ctestnull

c!:ctestatom

c!:ctestatom

c!:ctestconsp

c!:ctestconsp

c!:ctestsymbol

c!:ctestsymbol

c!:ctestnumberp

c!:ctestnumberp

c!:ctestizerop

c!:ctestizerop

c!:ctesteq

c!:ctesteq

c!:ctesteqcar

c!:ctesteqcar

nil

-134217728

134217727

c!:small_number

c!:eqvalid

nil

c!:ctestequal

c!:ctestequal

c!:ctestilessp

c!:ctestilessp

c!:ctestigreaterp

c!:ctestigreaterp

c!:ctestand

c!:ctestand

c!:ctestor

c!:ctestor

nil

nil

nil

nil

nil

Read "$srcdir/compiler.lsp"

nil
Compile: binopen
+++ binopen compiled, 42 + 52 bytes
Compile: break!-loop
+++ break!-loop compiled, 109 + 72 bytes
Compile: c!-compile
+++ c!-compile compiled, 47 + 56 bytes
Compile: c!-end
+++ c!-end compiled, 3 + 16 bytes
Compile: c!-end1
+++ c!-end1 compiled, 407 + 232 bytes
Compile: c!:allocate_registers
+++ c!:allocate_registers compiled, 129 + 28 bytes
Compile: c!:any_can_reach
+++ c!:any_can_reach compiled, 14 + 16 bytes
Compile: c!:assign
+++ c!:assign compiled, 28 + 24 bytes
Compile: c!:atomcar
+++ c!:atomcar compiled, 21 + 24 bytes
Compile: c!:atomkeys
+++ c!:atomkeys compiled, 52 + 28 bytes
Compile: c!:atomkeys1
+++ c!:atomkeys1 compiled, 24 + 20 bytes
Compile: c!:atomlist
+++ c!:atomlist compiled, 52 + 28 bytes
Compile: c!:atomlist1
+++ c!:atomlist1 compiled, 18 + 12 bytes
Compile: c!:branch_chain
+++ c!:branch_chain compiled, 143 + 44 bytes
Compile: c!:build_clash_matrix
+++ c!:build_clash_matrix compiled, 219 + 92 bytes
Compile: c!:builtin_one
+++ c!:builtin_one compiled, 17 + 20 bytes
Compile: c!:builtin_two
+++ c!:builtin_two compiled, 25 + 20 bytes
Compile: c!:can_reach
+++ c!:can_reach compiled, 23 + 24 bytes
Compile: c!:cand
+++ c!:cand compiled, 46 + 24 bytes
Compile: c!:catom
+++ c!:catom compiled, 81 + 56 bytes
Compile: c!:ccall
+++ c!:ccall compiled as link to c:ccall1
Compile: c!:ccall1
+++ c!:ccall1 compiled, 64 + 36 bytes
Compile: c!:ccatch
+++ c!:ccatch compiled, 4 + 20 bytes
Compile: c!:ccmpout1
+++ c!:ccmpout1 compiled, 20 + 20 bytes
Compile: c!:ccmpout1a
+++ c!:ccmpout1a compiled, 170 + 92 bytes
Compile: c!:ccompile_let
+++ c!:ccompile_let compiled, 4 + 20 bytes
Compile: c!:ccompilestart
+++ c!:ccompilestart compiled, 252 + 176 bytes
Compile: c!:ccompilesupervisor
+++ c!:ccompilesupervisor compiled, 84 + 56 bytes
Compile: c!:ccond
+++ c!:ccond compiled, 105 + 56 bytes
Compile: c!:ccons
+++ c!:ccons compiled, 89 + 48 bytes
Compile: c!:cde
+++ c!:cde compiled, 4 + 20 bytes
Compile: c!:cdeclare
+++ c!:cdeclare compiled, 4 + 20 bytes
Compile: c!:cdefun
+++ c!:cdefun compiled, 4 + 20 bytes
Compile: c!:cdifference
+++ c!:cdifference compiled, 63 + 44 bytes
Compile: c!:ceq
+++ c!:ceq compiled, 45 + 36 bytes
Compile: c!:cequal
+++ c!:cequal compiled, 56 + 44 bytes
Compile: c!:certainlyatom
+++ c!:certainlyatom compiled, 30 + 20 bytes
Compile: c!:ceval_when
+++ c!:ceval_when compiled, 4 + 20 bytes
Compile: c!:cflag
+++ c!:cflag compiled, 53 + 44 bytes
Compile: c!:cflet
+++ c!:cflet compiled, 4 + 20 bytes
Compile: c!:cfndef
+++ c!:cfndef compiled, 478 + 224 bytes
Compile: c!:cfunction
+++ c!:cfunction compiled, 46 + 52 bytes
Compile: c!:cget
+++ c!:cget compiled, 53 + 44 bytes
Compile: c!:cgetv
+++ c!:cgetv compiled, 14 + 24 bytes
Compile: c!:cgo
+++ c!:cgo compiled, 32 + 32 bytes
Compile: c!:cidifference
+++ c!:cidifference compiled, 60 + 44 bytes
Compile: c!:cif
+++ c!:cif compiled, 78 + 44 bytes
Compile: c!:ciplus2
+++ c!:ciplus2 compiled, 66 + 40 bytes
Compile: c!:citimes2
+++ c!:citimes2 compiled, 68 + 36 bytes
Compile: c!:cjumpif
+++ c!:cjumpif compiled, 65 + 48 bytes
Compile: c!:clabels
+++ c!:clabels compiled, 4 + 20 bytes
Compile: c!:clambda
+++ c!:clambda compiled, 196 + 72 bytes
Compile: c!:clash
+++ c!:clash compiled, 37 + 20 bytes
Compile: c!:clet
+++ c!:clet compiled, 8 + 16 bytes
Compile: c!:clet!*
+++ c!:clet!* compiled, 8 + 16 bytes
Compile: c!:clist
+++ c!:clist compiled, 98 + 44 bytes
Compile: c!:clist!*
+++ c!:clist!* compiled, 30 + 16 bytes
Compile: c!:cmacrolet
+++ c!:cmacrolet compiled, 4 + 20 bytes
Compile: c!:cminus
+++ c!:cminus compiled, 29 + 24 bytes
Compile: c!:cmultiple_value_call
+++ c!:cmultiple_value_call compiled, 4 + 20 bytes
Compile: c!:cmultiple_value_prog1
+++ c!:cmultiple_value_prog1 compiled, 4 + 20 bytes
Compile: c!:comassoc
+++ c!:comassoc compiled, 15 + 20 bytes
Compile: c!:comdelete
+++ c!:comdelete compiled, 15 + 20 bytes
Compile: c!:commember
+++ c!:commember compiled, 15 + 20 bytes
Compile: c!:comsublis
+++ c!:comsublis compiled, 10 + 16 bytes
Compile: c!:concat
+++ c!:concat compiled, 18 + 16 bytes
Compile: c!:cor
+++ c!:cor compiled, 63 + 44 bytes
Compile: c!:cplus2
+++ c!:cplus2 compiled, 69 + 40 bytes
Compile: c!:cprivate_tagbody
+++ c!:cprivate_tagbody compiled, 47 + 28 bytes
Compile: c!:cprog
+++ c!:cprog compiled, 316 + 108 bytes
Compile: c!:cprog!*
+++ c!:cprog!* compiled, 4 + 20 bytes
Compile: c!:cprog1
+++ c!:cprog1 compiled, 31 + 32 bytes
Compile: c!:cprog2
+++ c!:cprog2 compiled, 39 + 32 bytes
Compile: c!:cprogn
+++ c!:cprogn compiled, 25 + 16 bytes
Compile: c!:cprogv
+++ c!:cprogv compiled, 4 + 20 bytes
Compile: c!:cputv
+++ c!:cputv compiled, 14 + 24 bytes
Compile: c!:cqputv
+++ c!:cqputv compiled, 19 + 20 bytes
Compile: c!:cquote
+++ c!:cquote compiled, 39 + 36 bytes
Compile: c!:creturn
+++ c!:creturn compiled, 34 + 44 bytes
Compile: c!:csetq
+++ c!:csetq compiled, 63 + 56 bytes
Compile: c!:cspecform
+++ c!:cspecform compiled, 7 + 20 bytes
Compile: c!:ctestand
+++ c!:ctestand compiled, 34 + 28 bytes
Compile: c!:ctestatom
+++ c!:ctestatom compiled, 15 + 20 bytes
Compile: c!:ctestconsp
+++ c!:ctestconsp compiled, 15 + 20 bytes
Compile: c!:ctesteq
+++ c!:ctesteq compiled, 44 + 24 bytes
Compile: c!:ctesteqcar
+++ c!:ctesteqcar compiled, 48 + 40 bytes
Compile: c!:ctestequal
+++ c!:ctestequal compiled, 59 + 36 bytes
Compile: c!:ctestif
+++ c!:ctestif compiled, 33 + 20 bytes
Compile: c!:ctestigreaterp
+++ c!:ctestigreaterp compiled, 19 + 20 bytes
Compile: c!:ctestilessp
+++ c!:ctestilessp compiled, 19 + 20 bytes
Compile: c!:ctestizerop
+++ c!:ctestizerop compiled, 15 + 20 bytes
Compile: c!:ctestnull
+++ c!:ctestnull compiled, 9 + 12 bytes
Compile: c!:ctestnumberp
+++ c!:ctestnumberp compiled, 15 + 20 bytes
Compile: c!:ctestor
+++ c!:ctestor compiled, 34 + 28 bytes
Compile: c!:ctestsymbol
+++ c!:ctestsymbol compiled, 15 + 20 bytes
Compile: c!:cthe
+++ c!:cthe compiled, 5 + 12 bytes
Compile: c!:cthrow
+++ c!:cthrow compiled, 4 + 20 bytes
Compile: c!:ctimes2
+++ c!:ctimes2 compiled, 71 + 36 bytes
Compile: c!:cunless
+++ c!:cunless compiled, 65 + 52 bytes
Compile: c!:cunwind_protect
+++ c!:cunwind_protect compiled, 4 + 20 bytes
Compile: c!:cval
+++ c!:cval compiled, 20 + 28 bytes
Compile: c!:cval_inner
+++ c!:cval_inner compiled, 69 + 48 bytes
Compile: c!:cwhen
+++ c!:cwhen compiled, 65 + 52 bytes
Compile: c!:display_flowgraph
+++ c!:display_flowgraph compiled, 97 + 64 bytes
Compile: c!:does_return
+++ c!:does_return compiled, 67 + 32 bytes
Compile: c!:endblock
+++ c!:endblock compiled, 31 + 36 bytes
Compile: c!:eqvalid
+++ c!:eqvalid compiled, 26 + 28 bytes
Compile: c!:expand!-let
+++ c!:expand!-let compiled, 67 + 20 bytes
Compile: c!:expand!-let!*
+++ c!:expand!-let!* compiled, 43 + 24 bytes
Compile: c!:expand_carcdr
+++ c!:expand_carcdr compiled, 37 + 20 bytes
Compile: c!:expand_map
+++ c!:expand_map compiled, 242 + 120 bytes
Compile: c!:find_error_label
+++ c!:find_error_label compiled, 22 + 16 bytes
Compile: c!:find_literal
+++ c!:find_literal compiled, 27 + 16 bytes
Compile: c!:fix_nargs
+++ c!:fix_nargs compiled, 28 + 12 bytes
Compile: c!:has_calls
+++ c!:has_calls compiled, 7 + 16 bytes
Compile: c!:has_calls_1
+++ c!:has_calls_1 compiled, 70 + 36 bytes
Compile: c!:insert1
+++ c!:insert1 compiled, 8 + 8 bytes
Compile: c!:insert_tailcall
+++ c!:insert_tailcall compiled, 171 + 72 bytes
Compile: c!:inv_name
+++ c!:inv_name compiled, 102 + 36 bytes
Compile: c!:is_fixnum
+++ c!:is_fixnum compiled, 17 + 16 bytes
Compile: c!:live_variable_analysis
+++ c!:live_variable_analysis compiled, 384 + 152 bytes
Compile: c!:locally_bound
+++ c!:locally_bound compiled, 5 + 8 bytes
Compile: c!:my_gensym
+++ c!:my_gensym compiled, 40 + 28 bytes
Compile: c!:narg
+++ c!:narg compiled, 9 + 20 bytes
Compile: c!:newreg
+++ c!:newreg compiled, 7 + 16 bytes
Compile: c!:one_operand
+++ c!:one_operand compiled, 16 + 28 bytes
Compile: c!:optimise_flowgraph
+++ c!:optimise_flowgraph compiled, 554 + 276 bytes
Compile: c!:outop
+++ c!:outop compiled, 15 + 16 bytes
Compile: c!:pareval
+++ c!:pareval compiled, 117 + 28 bytes
Compile: c!:passoc
+++ c!:passoc compiled, 9 + 16 bytes
Compile: c!:patom
+++ c!:patom compiled, 8 + 16 bytes
Compile: c!:patsoc
+++ c!:patsoc compiled, 9 + 16 bytes
Compile: c!:pcall
+++ c!:pcall compiled, 337 + 180 bytes
Compile: c!:pcar
+++ c!:pcar compiled, 26 + 36 bytes
Compile: c!:pcdr
+++ c!:pcdr compiled, 26 + 36 bytes
Compile: c!:peq
+++ c!:peq compiled, 9 + 16 bytes
Compile: c!:pequal
+++ c!:pequal compiled, 15 + 16 bytes
Compile: c!:pfastflag
+++ c!:pfastflag compiled, 82 + 64 bytes
Compile: c!:pfastget
+++ c!:pfastget compiled, 74 + 60 bytes
Compile: c!:pfixp
+++ c!:pfixp compiled, 8 + 16 bytes
Compile: c!:pfluidbind
+++ c!:pfluidbind compiled, 2 + 8 bytes
Compile: c!:pget
+++ c!:pget compiled, 9 + 16 bytes
Compile: c!:pgoto
+++ c!:pgoto compiled, 40 + 36 bytes
Compile: c!:piadd1
+++ c!:piadd1 compiled, 8 + 16 bytes
Compile: c!:pidifference
+++ c!:pidifference compiled, 9 + 16 bytes
Compile: c!:pifatom
+++ c!:pifatom compiled, 6 + 16 bytes
Compile: c!:pifeq
+++ c!:pifeq compiled, 8 + 16 bytes
Compile: c!:pifequal
+++ c!:pifequal compiled, 14 + 16 bytes
Compile: c!:pifigreaterp
+++ c!:pifigreaterp compiled, 8 + 16 bytes
Compile: c!:pifilessp
+++ c!:pifilessp compiled, 8 + 16 bytes
Compile: c!:pifizerop
+++ c!:pifizerop compiled, 6 + 16 bytes
Compile: c!:pifnull
+++ c!:pifnull compiled, 6 + 16 bytes
Compile: c!:pifnumber
+++ c!:pifnumber compiled, 6 + 16 bytes
Compile: c!:pifsymbol
+++ c!:pifsymbol compiled, 6 + 16 bytes
Compile: c!:pigreaterp
+++ c!:pigreaterp compiled, 9 + 16 bytes
Compile: c!:pilessp
+++ c!:pilessp compiled, 9 + 16 bytes
Compile: c!:piminus
+++ c!:piminus compiled, 8 + 16 bytes
Compile: c!:piminusp
+++ c!:piminusp compiled, 8 + 16 bytes
Compile: c!:piplus2
+++ c!:piplus2 compiled, 9 + 16 bytes
Compile: c!:pisub1
+++ c!:pisub1 compiled, 8 + 16 bytes
Compile: c!:pitimes2
+++ c!:pitimes2 compiled, 9 + 16 bytes
Compile: c!:pldrglob
+++ c!:pldrglob compiled, 9 + 16 bytes
Compile: c!:pmember
+++ c!:pmember compiled, 9 + 16 bytes
Compile: c!:pmemq
+++ c!:pmemq compiled, 9 + 16 bytes
Compile: c!:pmodular_difference
+++ c!:pmodular_difference compiled, 20 + 28 bytes
Compile: c!:pmodular_minus
+++ c!:pmodular_minus compiled, 20 + 28 bytes
Compile: c!:pmodular_plus
+++ c!:pmodular_plus compiled, 20 + 28 bytes
Compile: c!:pmovk
+++ c!:pmovk compiled, 9 + 16 bytes
Compile: c!:pmovk1
+++ c!:pmovk1 compiled, 30 + 32 bytes
Compile: c!:pmovr
+++ c!:pmovr compiled, 8 + 16 bytes
Compile: c!:pnilglob
+++ c!:pnilglob compiled, 7 + 16 bytes
Compile: c!:pnull
+++ c!:pnull compiled, 8 + 16 bytes
Compile: c!:pnumberp
+++ c!:pnumberp compiled, 8 + 16 bytes
Compile: c!:pqcar
+++ c!:pqcar compiled, 8 + 16 bytes
Compile: c!:pqcdr
+++ c!:pqcdr compiled, 8 + 16 bytes
Compile: c!:pqgetv
+++ c!:pqgetv compiled, 12 + 20 bytes
Compile: c!:pqputv
+++ c!:pqputv compiled, 13 + 20 bytes
Compile: c!:preloadenv
+++ c!:preloadenv compiled, 9 + 20 bytes
Compile: c!:print!-init
+++ c!:print!-init compiled, 75 + 76 bytes
Compile: c!:print_error_return
+++ c!:print_error_return compiled, 201 + 112 bytes
Compile: c!:print_exit_condition
+++ c!:print_exit_condition compiled, 558 + 228 bytes
Compile: c!:print_opcode
+++ c!:print_opcode compiled, 42 + 16 bytes
Compile: c!:printf
+++ c!:printf_emdg6vqyz4j7 compiled, 13 + 16 bytes
Compile: c!:printf1
+++ c!:printf1 compiled, 149 + 92 bytes
Compile: c!:pstrglob
+++ c!:pstrglob compiled, 10 + 16 bytes
Compile: c!:pushpop
+++ c!:pushpop compiled, 73 + 44 bytes
Compile: c!:remove_nops
+++ c!:remove_nops compiled, 179 + 60 bytes
Compile: c!:reset_gensyms
+++ c!:reset_gensyms compiled, 100 + 64 bytes
Compile: c!:safeprin
+++ c!:safeprin compiled, 28 + 20 bytes
Compile: c!:small_number
+++ c!:small_number compiled, 17 + 16 bytes
Compile: c!:startblock
+++ c!:startblock compiled, 5 + 16 bytes
Compile: c!:two_operands
+++ c!:two_operands compiled, 21 + 32 bytes
Compile: c!:valid_cond
+++ c!:valid_cond compiled, 13 + 16 bytes
Compile: c!:valid_expr
+++ c!:valid_expr compiled, 53 + 36 bytes
Compile: c!:valid_fndef
+++ c!:valid_fndef compiled, 14 + 20 bytes
Compile: c!:valid_function
+++ c!:valid_function compiled, 33 + 24 bytes
Compile: c!:valid_let
+++ c!:valid_let compiled, 12 + 20 bytes
Compile: c!:valid_list
+++ c!:valid_list compiled, 16 + 16 bytes
Compile: c!:valid_prog
+++ c!:valid_prog compiled, 3 + 12 bytes
Compile: c!:valid_quote
+++ c!:valid_quote compiled, 2 + 12 bytes
Compile: c!:valid_specform
+++ c!:valid_specform compiled, 1 + 8 bytes
Compile: c_end
+++ c_end compiled, 17 + 32 bytes
Compile: c_out
+++ c_out compiled, 68 + 72 bytes
Compile: carcheck
+++ carcheck compiled, 12 + 12 bytes
Compile: clear_source_database
+++ clear_source_database compiled, 9 + 28 bytes
Compile: compd
+++ compd compiled, 30 + 36 bytes
Compile: compile
+++ compile compiled, 32 + 20 bytes
Compile: compile!-all
+++ compile!-all compiled, 53 + 44 bytes
Compile: compile!-file!*
+++ compile!-file!* compiled, 10 + 16 bytes
Compile: copy
+++ copy compiled, 16 + 8 bytes
Compile: dated!-name
+++ dated!-name compiled, 28 + 28 bytes
Compile: deflist
+++ deflist compiled, 22 + 12 bytes
Compile: display_source_database
+++ display_source_database compiled, 39 + 28 bytes
Compile: do
+++ do_ifsyfnlv3gaa compiled, 6 + 20 bytes
Compile: do!*
+++ do!*_i9y0sevcmoo6 compiled, 6 + 20 bytes
Compile: dolist
+++ dolist_4lacfnj6revd compiled, 6 + 12 bytes
Compile: dotimes
+++ dotimes_666oiwz1c1ig compiled, 6 + 12 bytes
Compile: expand
+++ expand compiled, 14 + 8 bytes
Compile: faslend
+++ faslend compiled, 361 + 208 bytes
Compile: faslout
+++ faslout compiled, 100 + 112 bytes
Compile: fetch!-url
+++ fetch!-url compiled, 67 + 40 bytes
Compile: fluid
+++ fluid compiled, 18 + 8 bytes
Compile: format
+++ format_f7zdxrydeas4 compiled, 17 + 16 bytes
Compile: global
+++ global compiled, 18 + 8 bytes
Compile: hashtagged!-name
+++ hashtagged!-name compiled, 16 + 24 bytes
Compile: lastcar
+++ lastcar compiled, 12 + 8 bytes
Compile: load_source_database
+++ load_source_database compiled, 31 + 28 bytes
Compile: map
+++ map compiled, 9 + 8 bytes
Compile: mapc
+++ mapc compiled, 10 + 8 bytes
Compile: mapcan
+++ mapcan compiled, 27 + 8 bytes
Compile: mapcar
+++ mapcar compiled, 17 + 8 bytes
Compile: mapcon
+++ mapcon compiled, 26 + 8 bytes
Compile: maplist
+++ maplist compiled, 16 + 8 bytes
Compile: oblist
+++ oblist compiled, 8 + 28 bytes
Compile: oem!-supervisor
+++ oem!-supervisor compiled, 7 + 8 bytes
Compile: open
+++ open compiled, 35 + 48 bytes
Compile: pipe!-open
+++ pipe!-open compiled, 20 + 36 bytes
Compile: prettyprint
+++ prettyprint compiled, 8 + 12 bytes
Compile: princl
+++ princl compiled, 4 + 16 bytes
Compile: prinl
+++ prinl compiled, 4 + 16 bytes
Compile: printcl
+++ printcl compiled, 5 + 12 bytes
Compile: printl
+++ printl compiled, 5 + 12 bytes
Compile: printprompt
+++ printprompt compiled, 1 + 8 bytes
Compile: psetq
+++ psetq_k5gcx5dfcnt4 compiled, 18 + 24 bytes
Compile: putc
+++ putc compiled as link to put
Compile: putd
+++ putd compiled, 89 + 64 bytes
Compile: rassoc
+++ rassoc compiled, 14 + 8 bytes
Compile: rplacw
+++ rplacw compiled, 9 + 8 bytes
Compile: s!:ad_name
+++ s!:ad_name compiled, 19 + 28 bytes
Compile: s!:add_pending
+++ s!:add_pending compiled, 31 + 16 bytes
Compile: s!:alist_eq_safe
+++ s!:alist_eq_safe compiled, 24 + 16 bytes
Compile: s!:alist_eq_unsafe
+++ s!:alist_eq_unsafe compiled, 33 + 16 bytes
Compile: s!:alwayseasy
+++ s!:alwayseasy compiled, 2 + 12 bytes
Compile: s!:any_fluid
+++ s!:any_fluid compiled, 13 + 16 bytes
Compile: s!:blankcount
+++ s!:blankcount_ro7olsyfqx0b compiled, 7 + 12 bytes
Compile: s!:blanklist
+++ s!:blanklist_uucedjja44w6 compiled, 7 + 12 bytes
Compile: s!:blankp
+++ s!:blankp_op70q7g59tha compiled, 10 + 16 bytes
Compile: s!:c_supervisor
+++ s!:c_supervisor compiled, 103 + 60 bytes
Compile: s!:cancel_local_decs
+++ s!:cancel_local_decs compiled as link to unfluid
Compile: s!:casebranch
+++ s!:casebranch compiled, 226 + 116 bytes
Compile: s!:comand
+++ s!:comand compiled, 30 + 32 bytes
Compile: s!:comapply
+++ s!:comapply compiled, 88 + 48 bytes
Compile: s!:comassoc
+++ s!:comassoc compiled, 38 + 36 bytes
Compile: s!:comatom
+++ s!:comatom compiled, 189 + 124 bytes
Compile: s!:comatsoc
+++ s!:comatsoc compiled, 49 + 48 bytes
Compile: s!:comblock
+++ s!:comblock compiled, 25 + 28 bytes
Compile: s!:combool
+++ s!:combool compiled, 50 + 32 bytes
Compile: s!:comcall
+++ s!:comcall compiled, 539 + 276 bytes
Compile: s!:comcarcdr3
+++ s!:comcarcdr3 compiled, 29 + 28 bytes
Compile: s!:comcarcdr4
+++ s!:comcarcdr4 compiled, 24 + 16 bytes
Compile: s!:comcase
+++ s!:comcase compiled, 348 + 100 bytes
Compile: s!:comcatch
+++ s!:comcatch compiled, 49 + 56 bytes
Compile: s!:comcond
+++ s!:comcond compiled, 88 + 52 bytes
Compile: s!:comcons
+++ s!:comcons compiled, 113 + 52 bytes
Compile: s!:comdeclare
+++ s!:comdeclare compiled, 14 + 20 bytes
Compile: s!:comdeleq
+++ s!:comdeleq compiled, 49 + 48 bytes
Compile: s!:comdelete
+++ s!:comdelete compiled, 27 + 32 bytes
Compile: s!:comdifference
+++ s!:comdifference compiled, 74 + 44 bytes
Compile: s!:comeq
+++ s!:comeq compiled, 49 + 40 bytes
Compile: s!:comeqcar
+++ s!:comeqcar compiled, 36 + 36 bytes
Compile: s!:comequal
+++ s!:comequal compiled, 22 + 20 bytes
Compile: s!:comeval!-when
+++ s!:comeval!-when compiled, 53 + 36 bytes
Compile: s!:comflagp
+++ s!:comflagp compiled, 52 + 44 bytes
Compile: s!:comfunction
+++ s!:comfunction compiled, 159 + 120 bytes
Compile: s!:comget
+++ s!:comget compiled, 91 + 68 bytes
Compile: s!:comgetv
+++ s!:comgetv compiled, 14 + 24 bytes
Compile: s!:comgo
+++ s!:comgo compiled, 63 + 44 bytes
Compile: s!:comicase
+++ s!:comicase compiled, 84 + 36 bytes
Compile: s!:comidifference
+++ s!:comidifference compiled, 53 + 36 bytes
Compile: s!:comif
+++ s!:comif compiled, 55 + 40 bytes
Compile: s!:comilessp
+++ s!:comilessp compiled, 25 + 28 bytes
Compile: s!:comiminusp
+++ s!:comiminusp compiled, 20 + 28 bytes
Compile: s!:comiplus
+++ s!:comiplus compiled, 7 + 20 bytes
Compile: s!:comiplus2
+++ s!:comiplus2 compiled, 64 + 36 bytes
Compile: s!:comitimes
+++ s!:comitimes compiled, 7 + 20 bytes
Compile: s!:comlambda
+++ s!:comlambda compiled, 245 + 100 bytes
Compile: s!:comlessp
+++ s!:comlessp compiled, 25 + 28 bytes
Compile: s!:comlet
+++ s!:comlet compiled, 11 + 20 bytes
Compile: s!:comlet!*
+++ s!:comlet!* compiled, 16 + 20 bytes
Compile: s!:comlist
+++ s!:comlist compiled, 74 + 36 bytes
Compile: s!:comlist!*
+++ s!:comlist!* compiled, 72 + 28 bytes
Compile: s!:commap
+++ s!:commap compiled, 279 + 128 bytes
Compile: s!:commember
+++ s!:commember compiled, 27 + 32 bytes
Compile: s!:commemq
+++ s!:commemq compiled, 49 + 48 bytes
Compile: s!:comminus
+++ s!:comminus compiled, 33 + 24 bytes
Compile: s!:comminusp
+++ s!:comminusp compiled, 20 + 28 bytes
Compile: s!:comor
+++ s!:comor compiled, 30 + 32 bytes
Compile: s!:compile!-file!*
+++ s!:compile!-file!* compiled, 123 + 68 bytes
Compile: s!:compile0
+++ s!:compile0 compiled, 224 + 100 bytes
Compile: s!:compile1
+++ s!:compile1 compiled, 916 + 248 bytes
Compile: s!:compile2
+++ s!:compile2 compiled, 505 + 172 bytes
Compile: s!:complus
+++ s!:complus compiled, 7 + 20 bytes
Compile: s!:complus2
+++ s!:complus2 compiled, 82 + 40 bytes
Compile: s!:comprog
+++ s!:comprog compiled, 333 + 132 bytes
Compile: s!:comprog1
+++ s!:comprog1 compiled, 65 + 44 bytes
Compile: s!:comprog2
+++ s!:comprog2 compiled, 31 + 24 bytes
Compile: s!:comprogn
+++ s!:comprogn compiled, 40 + 20 bytes
Compile: s!:comqgetv
+++ s!:comqgetv compiled, 37 + 36 bytes
Compile: s!:comquote
+++ s!:comquote compiled, 11 + 16 bytes
Compile: s!:comreturn
+++ s!:comreturn compiled, 9 + 16 bytes
Compile: s!:comreturn!-from
+++ s!:comreturn!-from compiled, 58 + 48 bytes
Compile: s!:comsetq
+++ s!:comsetq compiled, 221 + 136 bytes
Compile: s!:comspecform
+++ s!:comspecform compiled, 7 + 20 bytes
Compile: s!:comsubla
+++ s!:comsubla compiled, 36 + 40 bytes
Compile: s!:comsublis
+++ s!:comsublis compiled, 17 + 24 bytes
Compile: s!:comtagbody
+++ s!:comtagbody compiled, 110 + 44 bytes
Compile: s!:comthe
+++ s!:comthe compiled, 6 + 12 bytes
Compile: s!:comthrow
+++ s!:comthrow compiled, 33 + 40 bytes
Compile: s!:comtimes
+++ s!:comtimes compiled, 7 + 20 bytes
Compile: s!:comtimes2
+++ s!:comtimes2 compiled, 72 + 32 bytes
Compile: s!:comunless
+++ s!:comunless compiled, 13 + 20 bytes
Compile: s!:comunwind!-protect
+++ s!:comunwind!-protect compiled, 68 + 68 bytes
Compile: s!:comval
+++ s!:comval compiled, 98 + 44 bytes
Compile: s!:comwhen
+++ s!:comwhen compiled, 41 + 44 bytes
Compile: s!:cout0
+++ s!:cout0 compiled, 4 + 12 bytes
Compile: s!:cout1
+++ s!:cout1 compiled, 402 + 164 bytes
Compile: s!:depth
+++ s!:depth_27sidb7hahjd compiled, 7 + 12 bytes
Compile: s!:destination_label
+++ s!:destination_label compiled, 49 + 20 bytes
Compile: s!:dir
+++ s!:dir compiled, 33 + 24 bytes
Compile: s!:do!-bindings
+++ s!:do!-bindings compiled, 42 + 12 bytes
Compile: s!:do!-endtest
+++ s!:do!-endtest compiled, 5 + 8 bytes
Compile: s!:do!-result
+++ s!:do!-result compiled, 5 + 8 bytes
Compile: s!:do!-updates
+++ s!:do!-updates compiled, 25 + 8 bytes
Compile: s!:easygetv
+++ s!:easygetv compiled, 25 + 24 bytes
Compile: s!:easyifarg
+++ s!:easyifarg compiled, 16 + 12 bytes
Compile: s!:easyqgetv
+++ s!:easyqgetv compiled, 22 + 20 bytes
Compile: s!:endlist
+++ s!:endlist compiled, 5 + 12 bytes
Compile: s!:endprocedure
+++ s!:endprocedure compiled, 220 + 116 bytes
Compile: s!:eval_to_alist_eq_safe
+++ s!:eval_to_alist_eq_safe compiled, 52 + 28 bytes
Compile: s!:eval_to_alist_eq_unsafe
+++ s!:eval_to_alist_eq_unsafe compiled, 44 + 32 bytes
Compile: s!:eval_to_car_eq_safe
+++ s!:eval_to_car_eq_safe compiled, 21 + 24 bytes
Compile: s!:eval_to_car_eq_unsafe
+++ s!:eval_to_car_eq_unsafe compiled, 21 + 24 bytes
Compile: s!:eval_to_eq_safe
+++ s!:eval_to_eq_safe compiled, 48 + 24 bytes
Compile: s!:eval_to_eq_unsafe
+++ s!:eval_to_eq_unsafe compiled, 53 + 24 bytes
Compile: s!:eval_to_list_all_eq_safe
+++ s!:eval_to_list_all_eq_safe compiled, 52 + 28 bytes
Compile: s!:eval_to_list_some_eq_unsafe
+++ s!:eval_to_list_some_eq_unsafe compiled, 44 + 28 bytes
Compile: s!:expand!-do
+++ s!:expand!-do compiled, 116 + 48 bytes
Compile: s!:expand!-dolist
+++ s!:expand!-dolist compiled, 90 + 48 bytes
Compile: s!:expand!-dotimes
+++ s!:expand!-dotimes compiled, 94 + 52 bytes
Compile: s!:expand_jump
+++ s!:expand_jump compiled, 225 + 100 bytes
Compile: s!:expand_let
+++ s!:expand_let compiled, 56 + 12 bytes
Compile: s!:expand_let!*
+++ s!:expand_let!* compiled, 102 + 24 bytes
Compile: s!:expandblock
+++ s!:expandblock compiled, 10 + 12 bytes
Compile: s!:expandcase
+++ s!:expandcase compiled, 34 + 16 bytes
Compile: s!:expandcond
+++ s!:expandcond compiled, 24 + 12 bytes
Compile: s!:expanddeclare
+++ s!:expanddeclare compiled, 1 + 8 bytes
Compile: s!:expandeval!-when
+++ s!:expandeval!-when compiled, 10 + 12 bytes
Compile: s!:expandflet
+++ s!:expandflet compiled, 31 + 16 bytes
Compile: s!:expandfletvars
+++ s!:expandfletvars compiled, 10 + 12 bytes
Compile: s!:expandfunction
+++ s!:expandfunction compiled, 1 + 8 bytes
Compile: s!:expandgo
+++ s!:expandgo compiled, 1 + 8 bytes
Compile: s!:expandlabels
+++ s!:expandlabels compiled as link to s:expandflet
Compile: s!:expandlet
+++ s!:expandlet compiled, 31 + 12 bytes
Compile: s!:expandlet!*
+++ s!:expandlet!* compiled as link to s:expandlet
Compile: s!:expandmacrolet
+++ s!:expandmacrolet compiled as link to s:expandflet
Compile: s!:expandmv!-call
+++ s!:expandmv!-call compiled, 10 + 12 bytes
Compile: s!:expandprog
+++ s!:expandprog compiled, 10 + 12 bytes
Compile: s!:expandprogv
+++ s!:expandprogv compiled, 14 + 12 bytes
Compile: s!:expandreturn!-from
+++ s!:expandreturn!-from compiled, 10 + 12 bytes
Compile: s!:expandtagbody
+++ s!:expandtagbody compiled as link to s:fully_macroexpand_list
Compile: s!:expandthe
+++ s!:expandthe compiled, 10 + 12 bytes
Compile: s!:explodes
+++ s!:explodes compiled as link to explode
Compile: s!:fasl_supervisor
+++ s!:fasl_supervisor compiled, 103 + 60 bytes
Compile: s!:file
+++ s!:file compiled, 28 + 20 bytes
Compile: s!:find_lexical
+++ s!:find_lexical compiled, 34 + 12 bytes
Compile: s!:find_local_decs
+++ s!:find_local_decs compiled, 45 + 12 bytes
Compile: s!:finishpending
+++ s!:finishpending compiled, 46 + 28 bytes
Compile: s!:format
+++ s!:format compiled, 221 + 48 bytes
Compile: s!:fslout0
+++ s!:fslout0 compiled, 4 + 12 bytes
Compile: s!:fslout1
+++ s!:fslout1 compiled, 515 + 244 bytes
Compile: s!:fslout2
+++ s!:fslout2 compiled, 61 + 48 bytes
Compile: s!:fully_macroexpand
+++ s!:fully_macroexpand compiled, 58 + 28 bytes
Compile: s!:fully_macroexpand_list
+++ s!:fully_macroexpand_list compiled, 24 + 12 bytes
Compile: s!:imp_difference
+++ s!:imp_difference compiled, 26 + 24 bytes
Compile: s!:imp_funcall
+++ s!:imp_funcall compiled, 56 + 52 bytes
Compile: s!:imp_idifference
+++ s!:imp_idifference compiled, 26 + 24 bytes
Compile: s!:imp_itimes
+++ s!:imp_itimes compiled, 69 + 32 bytes
Compile: s!:imp_minus
+++ s!:imp_minus compiled, 53 + 28 bytes
Compile: s!:imp_times
+++ s!:imp_times compiled, 69 + 32 bytes
Compile: s!:improve
+++ s!:improve compiled, 23 + 16 bytes
Compile: s!:indenting
+++ s!:indenting_gkajni9ceiyg compiled, 7 + 12 bytes
Compile: s!:instate_local_decs
+++ s!:instate_local_decs compiled, 40 + 20 bytes
Compile: s!:invent_exit
+++ s!:invent_exit compiled, 36 + 16 bytes
Compile: s!:is_lose_and_exit
+++ s!:is_lose_and_exit compiled, 52 + 24 bytes
Compile: s!:iseasy
+++ s!:iseasy compiled, 18 + 16 bytes
Compile: s!:islocal
+++ s!:islocal compiled, 36 + 20 bytes
Compile: s!:jumpif
+++ s!:jumpif compiled, 310 + 148 bytes
Compile: s!:jumpliteql
+++ s!:jumpliteql compiled, 55 + 72 bytes
Compile: s!:list_all_eq_safe
+++ s!:list_all_eq_safe compiled, 18 + 12 bytes
Compile: s!:list_some_eq_unsafe
+++ s!:list_some_eq_unsafe compiled, 14 + 16 bytes
Compile: s!:literal_order
+++ s!:literal_order compiled, 17 + 8 bytes
Compile: s!:load2
+++ s!:load2 compiled, 228 + 108 bytes
Compile: s!:loadliteral
+++ s!:loadliteral compiled, 27 + 36 bytes
Compile: s!:make!-psetq!-assignments
+++ s!:make!-psetq!-assignments compiled, 21 + 16 bytes
Compile: s!:make!-psetq!-bindings
+++ s!:make!-psetq!-bindings compiled, 20 + 12 bytes
Compile: s!:make!-psetq!-vars
+++ s!:make!-psetq!-vars compiled, 24 + 24 bytes
Compile: s!:negate_jump
+++ s!:negate_jump compiled, 13 + 12 bytes
Compile: s!:newframe
+++ s!:newframe_ym6zjxmzdeo4 compiled, 12 + 16 bytes
Compile: s!:nilargs
+++ s!:nilargs compiled, 16 + 20 bytes
Compile: s!:oblist
+++ s!:oblist compiled, 52 + 20 bytes
Compile: s!:oblist1
+++ s!:oblist1 compiled, 17 + 12 bytes
Compile: s!:only_loadlit
+++ s!:only_loadlit compiled, 18 + 16 bytes
Compile: s!:outexit
+++ s!:outexit compiled, 46 + 36 bytes
Compile: s!:outjump
+++ s!:outjump compiled, 81 + 52 bytes
Compile: s!:outlexref
+++ s!:outlexref compiled, 141 + 92 bytes
Compile: s!:outlose
+++ s!:outlose compiled, 136 + 68 bytes
Compile: s!:outopcode0
+++ s!:outopcode0 compiled, 29 + 36 bytes
Compile: s!:outopcode1
+++ s!:outopcode1 compiled, 34 + 40 bytes
Compile: s!:outopcode1lit
+++ s!:outopcode1lit compiled, 36 + 44 bytes
Compile: s!:outopcode2
+++ s!:outopcode2 compiled, 38 + 40 bytes
Compile: s!:outopcode2lit
+++ s!:outopcode2lit compiled, 42 + 44 bytes
Compile: s!:outstack
+++ s!:outstack compiled, 136 + 68 bytes
Compile: s!:overflow
+++ s!:overflow compiled, 301 + 128 bytes
Compile: s!:plant_basic_block
+++ s!:plant_basic_block compiled, 125 + 64 bytes
Compile: s!:plant_bytes
+++ s!:plant_bytes compiled, 149 + 68 bytes
Compile: s!:plant_exit_code
+++ s!:plant_exit_code compiled, 144 + 52 bytes
Compile: s!:prindent
+++ s!:prindent compiled, 326 + 148 bytes
Compile: s!:prinhex1
+++ s!:prinhex1 compiled, 9 + 20 bytes
Compile: s!:prinhex2
+++ s!:prinhex2 compiled, 7 + 20 bytes
Compile: s!:prinhex4
+++ s!:prinhex4 compiled, 7 + 20 bytes
Compile: s!:prinl0
+++ s!:prinl0 compiled, 30 + 44 bytes
Compile: s!:prinl1
+++ s!:prinl1 compiled, 123 + 48 bytes
Compile: s!:prinl2
+++ s!:prinl2 compiled, 312 + 136 bytes
Compile: s!:prvector
+++ s!:prvector compiled, 73 + 52 bytes
Compile: s!:putblank
+++ s!:putblank compiled, 32 + 24 bytes
Compile: s!:putch
+++ s!:putch compiled, 64 + 56 bytes
Compile: s!:quotep
+++ s!:quotep compiled, 26 + 20 bytes
Compile: s!:r2i
+++ s!:r2i compiled, 75 + 40 bytes
Compile: s!:r2i1
+++ s!:r2i1 compiled, 173 + 96 bytes
Compile: s!:r2i2
+++ s!:r2i2 compiled, 143 + 76 bytes
Compile: s!:r2i2cond
+++ s!:r2i2cond compiled, 94 + 28 bytes
Compile: s!:r2i2if
+++ s!:r2i2if compiled, 51 + 12 bytes
Compile: s!:r2i2progn
+++ s!:r2i2progn compiled, 29 + 12 bytes
Compile: s!:r2i2when
+++ s!:r2i2when compiled, 15 + 12 bytes
Compile: s!:r2i3
+++ s!:r2i3 compiled, 311 + 72 bytes
Compile: s!:r2i_dependson
+++ s!:r2i_dependson compiled, 49 + 36 bytes
Compile: s!:r2i_list_dependson
+++ s!:r2i_list_dependson compiled, 14 + 16 bytes
Compile: s!:r2i_safestep
+++ s!:r2i_safestep compiled, 18 + 16 bytes
Compile: s!:r2iand
+++ s!:r2iand compiled, 18 + 16 bytes
Compile: s!:r2icond
+++ s!:r2icond compiled, 102 + 32 bytes
Compile: s!:r2icons
+++ s!:r2icons compiled, 82 + 48 bytes
Compile: s!:r2icons2
+++ s!:r2icons2 compiled, 79 + 44 bytes
Compile: s!:r2iif
+++ s!:r2iif compiled, 51 + 12 bytes
Compile: s!:r2ior
+++ s!:r2ior compiled, 28 + 12 bytes
Compile: s!:r2iprogn
+++ s!:r2iprogn compiled, 29 + 12 bytes
Compile: s!:r2isteps
+++ s!:r2isteps compiled, 97 + 40 bytes
Compile: s!:r2iwhen
+++ s!:r2iwhen compiled, 15 + 12 bytes
Compile: s!:record_literal
+++ s!:record_literal compiled, 48 + 36 bytes
Compile: s!:record_literal_for_jump
+++ s!:record_literal_for_jump compiled, 51 + 36 bytes
Compile: s!:remcall
+++ s!:remcall compiled, 207 + 88 bytes
Compile: s!:remlose
+++ s!:remlose compiled, 59 + 36 bytes
Compile: s!:residual_local_decs
+++ s!:residual_local_decs compiled, 46 + 20 bytes
Compile: s!:resolve_labels
+++ s!:resolve_labels compiled, 116 + 36 bytes
Compile: s!:resolve_literals
+++ s!:resolve_literals compiled, 240 + 64 bytes
Compile: s!:restore_stack
+++ s!:restore_stack compiled, 126 + 84 bytes
Compile: s!:set_label
+++ s!:set_label compiled, 50 + 40 bytes
Compile: s!:setblankcount
+++ s!:setblankcount_3x1bxp1p2084 compiled, 12 + 16 bytes
Compile: s!:setblanklist
+++ s!:setblanklist_4636m2i0ikl compiled, 12 + 16 bytes
Compile: s!:setindenting
+++ s!:setindenting_2bxyxdemv8x8 compiled, 12 + 16 bytes
Compile: s!:should_be_fluid
+++ s!:should_be_fluid compiled, 33 + 36 bytes
Compile: s!:stamp
+++ s!:stamp compiled, 39 + 32 bytes
Compile: s!:start_procedure
+++ s!:start_procedure compiled, 53 + 56 bytes
Compile: s!:subargs
+++ s!:subargs compiled, 20 + 16 bytes
Compile: s!:testatom
+++ s!:testatom compiled, 41 + 44 bytes
Compile: s!:testconsp
+++ s!:testconsp compiled, 41 + 44 bytes
Compile: s!:testeq
+++ s!:testeq compiled, 219 + 104 bytes
Compile: s!:testeq1
+++ s!:testeq1 compiled, 167 + 72 bytes
Compile: s!:testeqcar
+++ s!:testeqcar compiled, 143 + 116 bytes
Compile: s!:testequal
+++ s!:testequal compiled, 115 + 52 bytes
Compile: s!:testflagp
+++ s!:testflagp compiled, 96 + 88 bytes
Compile: s!:testneq
+++ s!:testneq compiled, 11 + 20 bytes
Compile: s!:testnot
+++ s!:testnot compiled, 10 + 16 bytes
Compile: s!:tidy_exits
+++ s!:tidy_exits compiled, 22 + 12 bytes
Compile: s!:tidy_exits_1
+++ s!:tidy_exits_1 compiled, 128 + 56 bytes
Compile: s!:tidy_flowgraph
+++ s!:tidy_flowgraph compiled, 327 + 48 bytes
Compile: s!:too_many_literals
+++ s!:too_many_literals compiled, 206 + 60 bytes
Compile: s!:top
+++ s!:top_qlcxrhmrbv1c compiled, 4 + 12 bytes
Compile: s!:trim!.c
+++ s!:trim!.c compiled, 22 + 20 bytes
Compile: s!:try_tail_1
+++ s!:try_tail_1 compiled, 199 + 92 bytes
Compile: s!:try_tailcall
+++ s!:try_tailcall compiled, 22 + 12 bytes
Compile: s!:vecof
+++ s!:vecof compiled, 33 + 12 bytes
Compile: sassoc
+++ sassoc compiled, 16 + 8 bytes
Compile: save_source_database
+++ save_source_database compiled, 46 + 32 bytes
Compile: sort
+++ sort compiled, 7 + 12 bytes
Compile: sortip
+++ sortip compiled as link to stable-sortip
Compile: stable!-sort
+++ stable!-sort compiled, 7 + 12 bytes
Compile: stable!-sortip
+++ stable!-sortip compiled, 129 + 8 bytes
Compile: superprinm
+++ superprinm compiled, 105 + 96 bytes
Compile: superprintm
+++ superprintm compiled, 12 + 20 bytes
Compile: symerr
+++ symerr compiled, 12 + 16 bytes
Compile: traceset
+++ traceset compiled, 12 + 12 bytes
Compile: traceset1
+++ traceset1 compiled, 43 + 48 bytes
Compile: unfluid
+++ unfluid compiled, 10 + 8 bytes
Compile: unglobal
+++ unglobal compiled, 10 + 8 bytes
Compile: untraceset
+++ untraceset compiled, 12 + 12 bytes
Compile: untraceset1
+++ untraceset1 compiled, 43 + 48 bytes

nil

t

nil

FASLOUT cslcompat: IN files;  or type in expressions
When all done, execute FASLEND;

Reading file "$srcdir/fastgets.lsp"
End of file "$srcdir/fastgets.lsp"

Reading file "$srcdir/compat.lsp"
+++ rplacw compiled, 9 + 8 bytes
+++ expand compiled, 14 + 8 bytes
+++ plus_4lcok6r6bp3g compiled, 11 + 20 bytes
+++ times_z6u5f3t8dwo4 compiled, 11 + 20 bytes
+++ mapcar compiled, 17 + 8 bytes
+++ maplist compiled, 16 + 8 bytes
+++ mapcan compiled, 27 + 8 bytes
+++ mapcon compiled, 26 + 8 bytes
+++ mapc compiled, 10 + 8 bytes
+++ map compiled, 9 + 8 bytes
+++ copy compiled, 16 + 8 bytes
+++ sassoc compiled, 16 + 8 bytes
+++ rassoc compiled, 14 + 8 bytes
+++ lastcar compiled, 12 + 8 bytes
+++ open compiled, 35 + 48 bytes
+++ binopen compiled, 42 + 52 bytes
+++ pipe!-open compiled, 20 + 36 bytes
+++ putd compiled, 88 + 60 bytes
+++ putc compiled as link to put
+++ traceset1 compiled, 43 + 48 bytes
+++ untraceset1 compiled, 43 + 48 bytes
+++ traceset compiled, 12 + 12 bytes
+++ untraceset compiled, 12 + 12 bytes
+++ deflist compiled, 22 + 12 bytes
+++ global compiled, 18 + 8 bytes
+++ fluid compiled, 18 + 8 bytes
+++ unglobal compiled, 10 + 8 bytes
+++ unfluid compiled, 10 + 8 bytes
+++ printprompt compiled, 1 + 8 bytes
+++ carcheck compiled, 12 + 12 bytes
+++ symerr compiled, 12 + 16 bytes
+++ s!:oblist compiled, 52 + 20 bytes
+++ s!:oblist1 compiled, 17 + 12 bytes
+++ oblist compiled, 8 + 28 bytes
+++ s!:make!-psetq!-vars compiled, 24 + 24 bytes
+++ s!:make!-psetq!-bindings compiled, 20 + 12 bytes
+++ s!:make!-psetq!-assignments compiled, 21 + 16 bytes
+++ psetq_vg20v16gc5na compiled, 20 + 24 bytes
+++ s!:do!-bindings compiled, 42 + 12 bytes
+++ s!:do!-endtest compiled, 5 + 8 bytes
+++ s!:do!-result compiled, 5 + 8 bytes
+++ s!:do!-updates compiled, 25 + 8 bytes
+++ s!:expand!-do compiled, 116 + 48 bytes
+++ do_tys294e5sboe compiled, 8 + 20 bytes
+++ do!*_z2tw2evoft83 compiled, 8 + 20 bytes
+++ s!:expand!-dolist compiled, 90 + 48 bytes
+++ dolist_2oc4v2mwnrv2 compiled, 8 + 12 bytes
+++ s!:expand!-dotimes compiled, 94 + 52 bytes
+++ dotimes_cm3wu6zfgv79 compiled, 8 + 12 bytes
End of file "$srcdir/compat.lsp"

Reading file "$srcdir/extras.lsp"
+++ oem!-supervisor compiled, 7 + 8 bytes
+++ break!-loop compiled, 109 + 72 bytes
+++ s!:stamp compiled, 39 + 32 bytes
+++ dated!-name compiled, 28 + 28 bytes
+++ hashtagged!-name compiled, 16 + 24 bytes
+++ sort compiled, 7 + 12 bytes
+++ stable!-sort compiled, 7 + 12 bytes
+++ sortip compiled as link to stable-sortip
+++ stable!-sortip compiled, 129 + 8 bytes
+++ s!:prinl0 compiled, 30 + 44 bytes
+++ s!:prinl1 compiled, 123 + 48 bytes
+++ s!:prinl2 compiled, 313 + 96 bytes
+++ printl compiled, 5 + 12 bytes
+++ printcl compiled, 5 + 12 bytes
+++ princl compiled, 4 + 16 bytes
+++ prinl compiled, 4 + 16 bytes
+++ s!:format compiled, 221 + 48 bytes
+++ format_vqx39lgqssd1 compiled, 17 + 16 bytes
+++ prettyprint compiled, 8 + 12 bytes
+++ superprintm compiled, 12 + 20 bytes
+++ superprinm compiled, 105 + 96 bytes
+++ s!:top_su2dv6yphmp9 compiled, 4 + 12 bytes
+++ s!:depth_nywe93u7asd2 compiled, 7 + 12 bytes
+++ s!:indenting_uugpn161oe9g compiled, 7 + 12 bytes
+++ s!:blankcount_di4u8tiv3pra compiled, 7 + 12 bytes
+++ s!:blanklist_3grr8hhc8kse compiled, 7 + 12 bytes
+++ s!:setindenting_wlwn13x1f3y compiled, 12 + 16 bytes
+++ s!:setblankcount_wqtabtq2ayhf compiled, 12 + 16 bytes
+++ s!:setblanklist_yx45qh074fy7 compiled, 12 + 16 bytes
+++ s!:newframe_jj3e2mkec583 compiled, 12 + 16 bytes
+++ s!:blankp_q4md8q4t32hd compiled, 10 + 16 bytes
+++ s!:prindent compiled, 326 + 148 bytes
+++ s!:explodes compiled as link to explode
+++ s!:prvector compiled, 73 + 52 bytes
+++ s!:putblank compiled, 32 + 24 bytes
+++ s!:endlist compiled, 5 + 12 bytes
+++ s!:finishpending compiled, 46 + 28 bytes
+++ s!:quotep compiled, 26 + 20 bytes
+++ s!:putch compiled, 64 + 56 bytes
+++ s!:overflow compiled, 301 + 128 bytes
+++ fetch!-url compiled, 67 + 40 bytes
End of file "$srcdir/extras.lsp"
Completed FASL files for cslcompat
+++ FASLEND: hits = 1971, misses = 2128

nil

FASLOUT compiler: IN files;  or type in expressions
When all done, execute FASLEND;

Reading file "$srcdir/compiler.lsp"
+++ s!:vecof compiled, 33 + 12 bytes
+++ s!:prinhex1 compiled, 9 + 20 bytes
+++ s!:prinhex2 compiled, 7 + 20 bytes
+++ s!:prinhex4 compiled, 7 + 20 bytes
+++ s!:start_procedure compiled, 53 + 56 bytes
+++ s!:set_label compiled, 50 + 40 bytes
+++ s!:outjump compiled, 81 + 52 bytes
+++ s!:outexit compiled, 46 + 36 bytes
+++ s!:outopcode0 compiled, 29 + 36 bytes
+++ s!:outopcode1 compiled, 34 + 40 bytes
+++ s!:record_literal compiled, 48 + 36 bytes
+++ s!:record_literal_for_jump compiled, 51 + 36 bytes
+++ s!:outopcode1lit compiled, 36 + 44 bytes
+++ s!:outopcode2 compiled, 38 + 40 bytes
+++ s!:outopcode2lit compiled, 42 + 44 bytes
+++ s!:outlexref compiled, 141 + 92 bytes
+++ s!:literal_order compiled, 17 + 8 bytes
+++ s!:resolve_literals compiled, 240 + 64 bytes
+++ s!:only_loadlit compiled, 18 + 16 bytes
+++ s!:too_many_literals compiled, 206 + 60 bytes
+++ s!:endprocedure compiled, 218 + 112 bytes
+++ s!:add_pending compiled, 31 + 16 bytes
+++ s!:invent_exit compiled, 36 + 16 bytes
+++ s!:destination_label compiled, 49 + 20 bytes
+++ s!:remlose compiled, 59 + 36 bytes
+++ s!:remcall compiled, 207 + 88 bytes
+++ s!:is_lose_and_exit compiled, 52 + 24 bytes
+++ s!:try_tail_1 compiled, 199 + 92 bytes
+++ s!:try_tailcall compiled, 22 + 12 bytes
+++ s!:tidy_exits_1 compiled, 128 + 56 bytes
+++ s!:tidy_exits compiled, 22 + 12 bytes
+++ s!:tidy_flowgraph compiled, 327 + 48 bytes
+++ s!:negate_jump compiled, 13 + 12 bytes
+++ s!:resolve_labels compiled, 116 + 36 bytes
+++ s!:plant_basic_block compiled, 125 + 60 bytes
+++ s!:plant_bytes compiled, 147 + 64 bytes
+++ s!:plant_exit_code compiled, 144 + 52 bytes
+++ s!:expand_jump compiled, 225 + 100 bytes
+++ s!:comval compiled, 98 + 44 bytes
+++ s!:comspecform compiled, 7 + 20 bytes
+++ s!:improve compiled, 23 + 16 bytes
+++ s!:imp_minus compiled, 53 + 28 bytes
+++ s!:imp_times compiled, 69 + 32 bytes
+++ s!:imp_itimes compiled, 69 + 32 bytes
+++ s!:imp_difference compiled, 26 + 24 bytes
+++ s!:imp_idifference compiled, 26 + 24 bytes
+++ s!:alwayseasy compiled, 2 + 12 bytes
+++ s!:easyifarg compiled, 16 + 12 bytes
+++ s!:easygetv compiled, 25 + 24 bytes
+++ s!:easyqgetv compiled, 22 + 20 bytes
+++ s!:iseasy compiled, 18 + 16 bytes
+++ s!:instate_local_decs compiled, 40 + 20 bytes
+++ s!:residual_local_decs compiled, 46 + 20 bytes
+++ s!:cancel_local_decs compiled as link to unfluid
+++ s!:find_local_decs compiled, 45 + 12 bytes
+++ s!:comlambda compiled, 245 + 100 bytes
+++ s!:loadliteral compiled, 27 + 36 bytes
+++ s!:comquote compiled, 11 + 16 bytes
+++ s!:comfunction compiled, 159 + 120 bytes
+++ s!:should_be_fluid compiled, 33 + 36 bytes
+++ s!:find_lexical compiled, 34 + 12 bytes
+++ s!:comatom compiled, 189 + 124 bytes
+++ s!:islocal compiled, 36 + 20 bytes
+++ s!:load2 compiled, 228 + 100 bytes
+++ s!:comcall compiled, 539 + 268 bytes
+++ s!:ad_name compiled, 19 + 28 bytes
+++ s!:comcarcdr3 compiled, 29 + 28 bytes
+++ s!:comcarcdr4 compiled, 24 + 16 bytes
+++ s!:comgetv compiled, 14 + 24 bytes
+++ s!:comqgetv compiled, 37 + 36 bytes
+++ s!:comget compiled, 91 + 68 bytes
+++ s!:comflagp compiled, 52 + 44 bytes
+++ s!:complus compiled, 7 + 20 bytes
+++ s!:comtimes compiled, 7 + 20 bytes
+++ s!:comiplus compiled, 7 + 20 bytes
+++ s!:comitimes compiled, 7 + 20 bytes
+++ s!:complus2 compiled, 82 + 40 bytes
+++ s!:comdifference compiled, 74 + 44 bytes
+++ s!:comiplus2 compiled, 64 + 36 bytes
+++ s!:comidifference compiled, 53 + 36 bytes
+++ s!:comtimes2 compiled, 72 + 32 bytes
+++ s!:comminus compiled, 33 + 24 bytes
+++ s!:comminusp compiled, 20 + 28 bytes
+++ s!:comlessp compiled, 25 + 28 bytes
+++ s!:comiminusp compiled, 20 + 28 bytes
+++ s!:comilessp compiled, 25 + 28 bytes
+++ s!:comprogn compiled, 40 + 20 bytes
+++ s!:comprog1 compiled, 65 + 44 bytes
+++ s!:comprog2 compiled, 31 + 24 bytes
+++ s!:outstack compiled, 136 + 68 bytes
+++ s!:outlose compiled, 136 + 68 bytes
+++ s!:comprog compiled, 333 + 132 bytes
+++ s!:comtagbody compiled, 110 + 44 bytes
+++ s!:comblock compiled, 25 + 28 bytes
+++ s!:comcatch compiled, 49 + 56 bytes
+++ s!:comthrow compiled, 33 + 40 bytes
+++ s!:comunwind!-protect compiled, 68 + 68 bytes
+++ s!:comdeclare compiled, 14 + 20 bytes
+++ s!:expand_let compiled, 56 + 12 bytes
+++ s!:comlet compiled, 11 + 20 bytes
+++ s!:expand_let!* compiled, 102 + 24 bytes
+++ s!:comlet!* compiled, 16 + 20 bytes
+++ s!:restore_stack compiled, 126 + 84 bytes
+++ s!:comgo compiled, 63 + 44 bytes
+++ s!:comreturn!-from compiled, 58 + 48 bytes
+++ s!:comreturn compiled, 9 + 16 bytes
+++ s!:jumpif compiled, 310 + 148 bytes
+++ s!:testnot compiled, 10 + 16 bytes
+++ s!:testatom compiled, 41 + 44 bytes
+++ s!:testconsp compiled, 41 + 44 bytes
+++ s!:comcond compiled, 88 + 52 bytes
+++ s!:comif compiled, 55 + 40 bytes
+++ s!:comwhen compiled, 41 + 44 bytes
+++ s!:comunless compiled, 13 + 20 bytes
+++ s!:comicase compiled, 84 + 36 bytes
+++ s!:jumpliteql compiled, 55 + 72 bytes
+++ s!:casebranch compiled, 226 + 112 bytes
+++ s!:comcase compiled, 348 + 100 bytes
+++ s!:comeval!-when compiled, 53 + 36 bytes
+++ s!:comthe compiled, 6 + 12 bytes
+++ s!:comand compiled, 30 + 32 bytes
+++ s!:comor compiled, 30 + 32 bytes
+++ s!:combool compiled, 50 + 32 bytes
+++ s!:testeq compiled, 219 + 104 bytes
+++ s!:testeq1 compiled, 167 + 72 bytes
+++ s!:testequal compiled, 115 + 52 bytes
+++ s!:testneq compiled, 11 + 20 bytes
+++ s!:testeqcar compiled, 143 + 116 bytes
+++ s!:testflagp compiled, 96 + 88 bytes
+++ s!:comsetq compiled, 221 + 136 bytes
+++ s!:comlist compiled, 74 + 36 bytes
+++ s!:comlist!* compiled, 72 + 28 bytes
+++ s!:comcons compiled, 113 + 52 bytes
+++ s!:comapply compiled, 88 + 48 bytes
+++ s!:imp_funcall compiled, 56 + 52 bytes
+++ s!:eval_to_eq_safe compiled, 48 + 24 bytes
+++ s!:eval_to_eq_unsafe compiled, 53 + 24 bytes
+++ s!:list_all_eq_safe compiled, 18 + 12 bytes
+++ s!:eval_to_list_all_eq_safe compiled, 52 + 28 bytes
+++ s!:list_some_eq_unsafe compiled, 14 + 16 bytes
+++ s!:eval_to_list_some_eq_unsafe compiled, 44 + 28 bytes
+++ s!:eval_to_car_eq_safe compiled, 21 + 24 bytes
+++ s!:eval_to_car_eq_unsafe compiled, 21 + 24 bytes
+++ s!:alist_eq_safe compiled, 24 + 16 bytes
+++ s!:eval_to_alist_eq_safe compiled, 52 + 28 bytes
+++ s!:alist_eq_unsafe compiled, 33 + 16 bytes
+++ s!:eval_to_alist_eq_unsafe compiled, 44 + 32 bytes
+++ s!:comequal compiled, 22 + 20 bytes
+++ s!:comeq compiled, 49 + 40 bytes
+++ s!:comeqcar compiled, 36 + 36 bytes
+++ s!:comsublis compiled, 17 + 24 bytes
+++ s!:comsubla compiled, 36 + 40 bytes
+++ s!:comassoc compiled, 38 + 36 bytes
+++ s!:comatsoc compiled, 49 + 48 bytes
+++ s!:commember compiled, 27 + 32 bytes
+++ s!:commemq compiled, 49 + 48 bytes
+++ s!:comdelete compiled, 27 + 32 bytes
+++ s!:comdeleq compiled, 49 + 48 bytes
+++ s!:commap compiled, 279 + 128 bytes
+++ s!:nilargs compiled, 16 + 20 bytes
+++ s!:subargs compiled, 20 + 16 bytes
+++ clear_source_database compiled, 9 + 28 bytes
+++ load_source_database compiled, 31 + 28 bytes
+++ save_source_database compiled, 46 + 32 bytes
+++ display_source_database compiled, 39 + 28 bytes
+++ s!:r2i compiled, 75 + 40 bytes
+++ s!:r2i1 compiled, 173 + 96 bytes
+++ s!:r2iand compiled, 18 + 16 bytes
+++ s!:r2ior compiled, 28 + 12 bytes
+++ s!:r2icond compiled, 102 + 32 bytes
+++ s!:r2iif compiled, 51 + 12 bytes
+++ s!:r2iwhen compiled, 15 + 12 bytes
+++ s!:r2iprogn compiled, 29 + 12 bytes
+++ s!:r2icons compiled, 82 + 48 bytes
+++ s!:r2icons2 compiled, 79 + 44 bytes
+++ s!:r2isteps compiled, 97 + 40 bytes
+++ s!:r2i_safestep compiled, 18 + 16 bytes
+++ s!:r2i_dependson compiled, 49 + 36 bytes
+++ s!:r2i_list_dependson compiled, 14 + 16 bytes
+++ s!:r2i2 compiled, 143 + 76 bytes
+++ s!:r2i2cond compiled, 94 + 28 bytes
+++ s!:r2i2if compiled, 51 + 12 bytes
+++ s!:r2i2when compiled, 15 + 12 bytes
+++ s!:r2i2progn compiled, 29 + 12 bytes
+++ s!:r2i3 compiled, 311 + 72 bytes
+++ s!:any_fluid compiled, 13 + 16 bytes
+++ s!:compile1 compiled, 916 + 244 bytes
+++ s!:compile2 compiled, 505 + 172 bytes
+++ compile!-all compiled, 53 + 44 bytes
+++ s!:fasl_supervisor compiled, 103 + 60 bytes
+++ s!:fslout0 compiled, 4 + 12 bytes
+++ s!:fslout1 compiled, 510 + 228 bytes
+++ s!:fslout2 compiled, 61 + 48 bytes
+++ faslend compiled, 361 + 204 bytes
+++ s!:file compiled, 28 + 20 bytes
+++ s!:trim!.c compiled, 22 + 20 bytes
+++ s!:dir compiled, 33 + 24 bytes
+++ faslout compiled, 100 + 112 bytes
+++ s!:c_supervisor compiled, 103 + 60 bytes
+++ s!:cout0 compiled, 4 + 12 bytes
+++ s!:cout1 compiled, 402 + 164 bytes
+++ c_end compiled, 17 + 32 bytes
+++ c_out compiled, 68 + 72 bytes
+++ s!:compile!-file!* compiled, 123 + 68 bytes
+++ compile!-file!* compiled, 10 + 16 bytes
+++ compd compiled, 30 + 36 bytes
+++ s!:compile0 compiled, 222 + 92 bytes
+++ s!:fully_macroexpand_list compiled, 24 + 12 bytes
+++ s!:fully_macroexpand compiled, 58 + 28 bytes
+++ s!:expandfunction compiled, 1 + 8 bytes
+++ s!:expandflet compiled, 31 + 16 bytes
+++ s!:expandfletvars compiled, 10 + 12 bytes
+++ s!:expandlabels compiled as link to s:expandflet
+++ s!:expandmacrolet compiled as link to s:expandflet
+++ s!:expandprog compiled, 10 + 12 bytes
+++ s!:expandtagbody compiled as link to s:fully_macroexpand_list
+++ s!:expandprogv compiled, 14 + 12 bytes
+++ s!:expandblock compiled, 10 + 12 bytes
+++ s!:expanddeclare compiled, 1 + 8 bytes
+++ s!:expandlet compiled, 31 + 12 bytes
+++ s!:expandlet!* compiled as link to s:expandlet
+++ s!:expandgo compiled, 1 + 8 bytes
+++ s!:expandreturn!-from compiled, 10 + 12 bytes
+++ s!:expandcond compiled, 24 + 12 bytes
+++ s!:expandcase compiled, 34 + 16 bytes
+++ s!:expandeval!-when compiled, 10 + 12 bytes
+++ s!:expandthe compiled, 10 + 12 bytes
+++ s!:expandmv!-call compiled, 10 + 12 bytes
+++ compile compiled, 32 + 20 bytes
+++ c!:printf_w69wci2a15ld compiled, 13 + 16 bytes
+++ c!:printf1 compiled, 149 + 92 bytes
+++ c!:safeprin compiled, 28 + 20 bytes
+++ c!:valid_fndef compiled, 14 + 20 bytes
+++ c!:valid_list compiled, 16 + 16 bytes
+++ c!:valid_expr compiled, 53 + 36 bytes
+++ c!:cspecform compiled, 7 + 20 bytes
+++ c!:valid_specform compiled, 1 + 8 bytes
+++ c!:reset_gensyms compiled, 100 + 64 bytes
+++ c!:my_gensym compiled, 40 + 28 bytes
+++ c!:newreg compiled, 7 + 16 bytes
+++ c!:startblock compiled, 5 + 16 bytes
+++ c!:outop compiled, 15 + 16 bytes
+++ c!:endblock compiled, 31 + 36 bytes
+++ c!:cval_inner compiled, 69 + 48 bytes
+++ c!:cval compiled, 20 + 28 bytes
+++ c!:clambda compiled, 196 + 72 bytes
+++ c!:locally_bound compiled, 5 + 8 bytes
+++ c!:find_literal compiled, 27 + 16 bytes
+++ c!:catom compiled, 81 + 56 bytes
+++ c!:cjumpif compiled, 65 + 48 bytes
+++ c!:ccall compiled as link to c:ccall1
+++ c!:has_calls compiled, 7 + 16 bytes
+++ c!:has_calls_1 compiled, 70 + 36 bytes
+++ c!:can_reach compiled, 23 + 24 bytes
+++ c!:any_can_reach compiled, 14 + 16 bytes
+++ c!:pareval compiled, 117 + 28 bytes
+++ c!:ccall1 compiled, 64 + 36 bytes
+++ c!:cfndef compiled, 478 + 224 bytes
+++ c!:ccompilesupervisor compiled, 84 + 56 bytes
+++ c!:inv_name compiled, 102 + 36 bytes
+++ c!:ccmpout1 compiled, 20 + 20 bytes
+++ c!:ccmpout1a compiled, 170 + 92 bytes
+++ c!:concat compiled, 18 + 16 bytes
+++ c!:ccompilestart compiled, 252 + 176 bytes
+++ c!:print!-init compiled, 72 + 64 bytes
+++ c!-end compiled, 3 + 16 bytes
+++ c!-end1 compiled, 407 + 220 bytes
+++ c!-compile compiled, 47 + 56 bytes
+++ c!:print_opcode compiled, 42 + 16 bytes
+++ c!:print_exit_condition compiled, 549 + 184 bytes
+++ c!:pmovr compiled, 8 + 16 bytes
+++ c!:pmovk compiled, 9 + 16 bytes
+++ c!:pmovk1 compiled, 30 + 32 bytes
+++ c!:preloadenv compiled, 9 + 20 bytes
+++ c!:pldrglob compiled, 9 + 16 bytes
+++ c!:pstrglob compiled, 10 + 16 bytes
+++ c!:pnilglob compiled, 7 + 16 bytes
+++ c!:pnull compiled, 8 + 16 bytes
+++ c!:pfastget compiled, 74 + 60 bytes
+++ c!:pfastflag compiled, 82 + 64 bytes
+++ c!:pcar compiled, 26 + 36 bytes
+++ c!:pcdr compiled, 26 + 36 bytes
+++ c!:pqcar compiled, 8 + 16 bytes
+++ c!:pqcdr compiled, 8 + 16 bytes
+++ c!:patom compiled, 8 + 16 bytes
+++ c!:pnumberp compiled, 8 + 16 bytes
+++ c!:pfixp compiled, 8 + 16 bytes
+++ c!:piminusp compiled, 8 + 16 bytes
+++ c!:pilessp compiled, 9 + 16 bytes
+++ c!:pigreaterp compiled, 9 + 16 bytes
+++ c!:piminus compiled, 8 + 16 bytes
+++ c!:piadd1 compiled, 8 + 16 bytes
+++ c!:pisub1 compiled, 8 + 16 bytes
+++ c!:piplus2 compiled, 9 + 16 bytes
+++ c!:pidifference compiled, 9 + 16 bytes
+++ c!:pitimes2 compiled, 9 + 16 bytes
+++ c!:pmodular_plus compiled, 20 + 28 bytes
+++ c!:pmodular_difference compiled, 20 + 28 bytes
+++ c!:pmodular_minus compiled, 20 + 28 bytes
+++ c!:passoc compiled, 9 + 16 bytes
+++ c!:patsoc compiled, 9 + 16 bytes
+++ c!:pmember compiled, 9 + 16 bytes
+++ c!:pmemq compiled, 9 + 16 bytes
+++ c!:pget compiled, 9 + 16 bytes
+++ c!:pqgetv compiled, 12 + 20 bytes
+++ c!:pqputv compiled, 13 + 20 bytes
+++ c!:peq compiled, 9 + 16 bytes
+++ c!:pequal compiled, 15 + 16 bytes
+++ c!:pfluidbind compiled, 2 + 8 bytes
+++ c!:pcall compiled, 323 + 140 bytes
+++ c!:fix_nargs compiled, 28 + 12 bytes
+++ c!:pgoto compiled, 40 + 36 bytes
+++ c!:pifnull compiled, 6 + 16 bytes
+++ c!:pifatom compiled, 6 + 16 bytes
+++ c!:pifsymbol compiled, 6 + 16 bytes
+++ c!:pifnumber compiled, 6 + 16 bytes
+++ c!:pifizerop compiled, 6 + 16 bytes
+++ c!:pifeq compiled, 8 + 16 bytes
+++ c!:pifequal compiled, 14 + 16 bytes
+++ c!:pifilessp compiled, 8 + 16 bytes
+++ c!:pifigreaterp compiled, 8 + 16 bytes
+++ c!:display_flowgraph compiled, 97 + 64 bytes
+++ c!:branch_chain compiled, 143 + 44 bytes
+++ c!:one_operand compiled, 16 + 28 bytes
+++ c!:two_operands compiled, 21 + 32 bytes
+++ c!:live_variable_analysis compiled, 384 + 148 bytes
+++ c!:insert1 compiled, 8 + 8 bytes
+++ c!:clash compiled, 37 + 20 bytes
+++ c!:build_clash_matrix compiled, 219 + 88 bytes
+++ c!:allocate_registers compiled, 129 + 28 bytes
+++ c!:remove_nops compiled, 179 + 60 bytes
+++ c!:find_error_label compiled, 22 + 16 bytes
+++ c!:assign compiled, 28 + 24 bytes
+++ c!:insert_tailcall compiled, 171 + 72 bytes
+++ c!:does_return compiled, 67 + 32 bytes
+++ c!:pushpop compiled, 73 + 44 bytes
+++ c!:optimise_flowgraph compiled, 554 + 272 bytes
+++ c!:print_error_return compiled, 197 + 96 bytes
+++ c!:cand compiled, 46 + 24 bytes
+++ c!:ccatch compiled, 4 + 20 bytes
+++ c!:ccompile_let compiled, 4 + 20 bytes
+++ c!:ccond compiled, 105 + 56 bytes
+++ c!:valid_cond compiled, 13 + 16 bytes
+++ c!:cdeclare compiled, 4 + 20 bytes
+++ c!:cde compiled, 4 + 20 bytes
+++ c!:cdefun compiled, 4 + 20 bytes
+++ c!:ceval_when compiled, 4 + 20 bytes
+++ c!:cflet compiled, 4 + 20 bytes
+++ c!:cfunction compiled, 46 + 52 bytes
+++ c!:valid_function compiled, 33 + 24 bytes
+++ c!:cgo compiled, 32 + 32 bytes
+++ c!:cif compiled, 78 + 44 bytes
+++ c!:clabels compiled, 4 + 20 bytes
+++ c!:expand!-let compiled, 67 + 20 bytes
+++ c!:clet compiled, 8 + 16 bytes
+++ c!:valid_let compiled, 12 + 20 bytes
+++ c!:expand!-let!* compiled, 43 + 24 bytes
+++ c!:clet!* compiled, 8 + 16 bytes
+++ c!:clist compiled, 98 + 44 bytes
+++ c!:clist!* compiled, 30 + 16 bytes
+++ c!:ccons compiled, 89 + 48 bytes
+++ c!:cget compiled, 53 + 44 bytes
+++ c!:cflag compiled, 53 + 44 bytes
+++ c!:cgetv compiled, 14 + 24 bytes
+++ c!:cputv compiled, 14 + 24 bytes
+++ c!:cqputv compiled, 19 + 20 bytes
+++ c!:cmacrolet compiled, 4 + 20 bytes
+++ c!:cmultiple_value_call compiled, 4 + 20 bytes
+++ c!:cmultiple_value_prog1 compiled, 4 + 20 bytes
+++ c!:cor compiled, 63 + 44 bytes
+++ c!:cprog compiled, 316 + 108 bytes
+++ c!:valid_prog compiled, 3 + 12 bytes
+++ c!:cprog!* compiled, 4 + 20 bytes
+++ c!:cprog1 compiled, 31 + 32 bytes
+++ c!:cprog2 compiled, 39 + 32 bytes
+++ c!:cprogn compiled, 25 + 16 bytes
+++ c!:cprogv compiled, 4 + 20 bytes
+++ c!:cquote compiled, 39 + 36 bytes
+++ c!:valid_quote compiled, 2 + 12 bytes
+++ c!:creturn compiled, 34 + 44 bytes
+++ c!:csetq compiled, 63 + 56 bytes
+++ c!:cprivate_tagbody compiled, 47 + 28 bytes
+++ c!:cthe compiled, 5 + 12 bytes
+++ c!:cthrow compiled, 4 + 20 bytes
+++ c!:cunless compiled, 65 + 52 bytes
+++ c!:cunwind_protect compiled, 4 + 20 bytes
+++ c!:cwhen compiled, 65 + 52 bytes
+++ c!:expand_map compiled, 242 + 120 bytes
+++ c!:expand_carcdr compiled, 37 + 20 bytes
+++ c!:builtin_one compiled, 17 + 20 bytes
+++ c!:builtin_two compiled, 25 + 20 bytes
+++ c!:narg compiled, 9 + 20 bytes
+++ c!:cplus2 compiled, 69 + 40 bytes
+++ c!:ciplus2 compiled, 66 + 40 bytes
+++ c!:cdifference compiled, 63 + 44 bytes
+++ c!:cidifference compiled, 60 + 44 bytes
+++ c!:ctimes2 compiled, 71 + 36 bytes
+++ c!:citimes2 compiled, 68 + 36 bytes
+++ c!:cminus compiled, 29 + 24 bytes
+++ c!:ceq compiled, 45 + 36 bytes
+++ c!:cequal compiled, 56 + 44 bytes
+++ c!:is_fixnum compiled, 17 + 16 bytes
+++ c!:certainlyatom compiled, 30 + 20 bytes
+++ c!:atomlist1 compiled, 18 + 12 bytes
+++ c!:atomlist compiled, 52 + 28 bytes
+++ c!:atomcar compiled, 21 + 24 bytes
+++ c!:atomkeys1 compiled, 24 + 20 bytes
+++ c!:atomkeys compiled, 52 + 28 bytes
+++ c!:comsublis compiled, 10 + 16 bytes
+++ c!:comassoc compiled, 15 + 20 bytes
+++ c!:commember compiled, 15 + 20 bytes
+++ c!:comdelete compiled, 15 + 20 bytes
+++ c!:ctestif compiled, 33 + 20 bytes
+++ c!:ctestnull compiled, 9 + 12 bytes
+++ c!:ctestatom compiled, 15 + 20 bytes
+++ c!:ctestconsp compiled, 15 + 20 bytes
+++ c!:ctestsymbol compiled, 15 + 20 bytes
+++ c!:ctestnumberp compiled, 15 + 20 bytes
+++ c!:ctestizerop compiled, 15 + 20 bytes
+++ c!:ctesteq compiled, 44 + 24 bytes
+++ c!:ctesteqcar compiled, 48 + 40 bytes
+++ c!:small_number compiled, 17 + 16 bytes
+++ c!:eqvalid compiled, 26 + 28 bytes
+++ c!:ctestequal compiled, 59 + 36 bytes
+++ c!:ctestilessp compiled, 19 + 20 bytes
+++ c!:ctestigreaterp compiled, 19 + 20 bytes
+++ c!:ctestand compiled, 34 + 28 bytes
+++ c!:ctestor compiled, 34 + 28 bytes
End of file "$srcdir/compiler.lsp"
Completed FASL files for compiler
+++ FASLEND: hits = 15848, misses = 19280

nil

t
+++ concat compiled, 21 + 12 bytes

concat

nil

cslprolo

cslrend

t

nil

nil

nil

nil

nil

nil

(nil !*semicol!*)

(nil !*lpar!*)

(nil !*rpar!*)

(nil !*comma!*)

(nil cons)

(((!= nil setq)) !*colon!*)

1

2

3

nil

nil

blockstat

ifstat

procstat
+++ begin2 compiled, 18 + 36 bytes

begin2
+++ form compiled, 1 + 8 bytes

form
+++ xread compiled, 4 + 16 bytes

xread
+++ xread1 compiled, 174 + 56 bytes

xread1

+++ eqcar not defined because of LOSE flag

nil
+++ mksetq compiled, 5 + 12 bytes

mksetq
+++ mkvar compiled, 1 + 8 bytes

mkvar
+++ rread compiled, 13 + 28 bytes

rread
+++ rrdls compiled, 35 + 32 bytes

rrdls
+++ token compiled, 185 + 88 bytes

token

! 
+++ delcp compiled, 10 + 16 bytes

delcp
+++ mkstrng compiled, 1 + 8 bytes

mkstrng

+++ seprp not defined because of LOSE flag

nil
+++ scan compiled, 99 + 64 bytes

scan
+++ ifstat compiled, 41 + 40 bytes

ifstat
+++ procstat compiled, 58 + 56 bytes

procstat
+++ blockstat compiled, 54 + 56 bytes

blockstat
+++ mkprog compiled, 5 + 12 bytes

mkprog
+++ gostat compiled, 9 + 16 bytes

gostat

gostat
+++ rlis compiled, 13 + 24 bytes

rlis
+++ endstat compiled, 7 + 16 bytes

endstat
(/usr/local/etc/reduce/csl/cslbase/../..)(#F[synonym-stream nil *terminal-io*
00000000 004b3f70 004b4020 00000050 00000000 004bf2e0 004c0830 00040000])(nil)(
nil)
+++ mkfil compiled, 16 + 24 bytes
(mkfil)
+++ string!-downcase compiled, 37 + 20 bytes
(string-downcase)
+++ charassoc!* declared fluid
+++ red!-char!-downcase compiled, 11 + 12 bytes
(red-char-downcase)(((a . a) (b . b) (c . c) (d . d) (e . e) (f . f) (g . g) (h
. h) (i . i) (j . j) (k . k) (l . l) (m . m) (n . n) (o . o) (p . p) (q . q) (r
. r) (s . s) (t . t) (u . u) (v . v) (w . w) (x . x) (y . y) (z . z)))
+++ concat redefined
+++ concat compiled, 21 + 12 bytes
(concat)
+++ module2!-to!-file compiled, 16 + 28 bytes
(module2-to-file)
+++ inmodule compiled, 30 + 44 bytes
(inmodule)
+++ load!-package!-sources compiled, 30 + 24 bytes
(load-package-sources)(nil)
nil

nil
+++ create!-package compiled, 16 + 28 bytes
create-package
+++ evload compiled, 10 + 8 bytes
evloadnil
+++ copyd compiled, 50 + 48 bytes
copydnilniltnil
nil
nilrlispnil15-Sep-2008REDUCE((t (load-package (quote rlisp88)) (rlisp88_on)))nil
nilnilnilsymbolicnilnilnil
+++ exports compiled, 5 + 16 bytes
exports
+++ imports compiled, 5 + 16 bytes
imports
+++ module compiled, 7 + 20 bytes
module
+++ endmodule compiled, 18 + 32 bytes
endmodule(exports imports module)endstatnilnilmodulerlisformload
+++ formload compiled, 34 + 40 bytes
formload
+++ loaded!-modules!* declared fluid
+++ load!-package compiled, 136 + 72 bytes
load-packagenilnil
+++ load_package compiled, 12 + 12 bytes
load_package
+++ packages_to_load compiled, 6 + 16 bytes
packages_to_loadrlisrlisnil
+++ patchstat compiled, 144 + 72 bytes
patchstat
+++ name!-for!-patched!-version compiled, 10 + 24 bytes
name-for-patched-version
+++ instate!-patches compiled, 24 + 32 bytes
instate-patches
+++ install!-patches compiled, 20 + 20 bytes
install-patches
+++ patches!-load!-check compiled, 14 + 24 bytes
patches-load-checkpatchstat
+++ formpatch compiled, 4 + 12 bytes
formpatchformpatchnilnilnilnil(where *comma* setq)(or and member memq equal neq
eq geq greaterp leq lessp freeof plus difference times quotient expt cons)(plus
difference minus times quotient recip)nilnil(minus recip)
+++ mkprec compiled, 61 + 40 bytes
mkprecnil
+++ newtok compiled, 78 + 60 bytes
newtok
+++ newtok1 compiled, 32 + 28 bytes
newtok1
+++ newtok2 compiled, 35 + 16 bytes
newtok2
+++ consescc compiled, 18 + 16 bytes
consescc
+++ lstchr compiled, 17 + 8 bytes
lstchrnilnilnilnilnilnilnilnilnilnilnilnilnilnilnilnilnilnilnilnilnilnilnil**nil
nilnilnilnilnilnil
+++ aconc compiled, 6 + 8 bytes
aconc
+++ arrayp compiled, 6 + 16 bytes
arraypnilnilnil
+++ errorset!* compiled, 7 + 12 bytes
errorset*
+++ errorset2 compiled, 10 + 12 bytes
errorset2nil
+++ idlistp compiled, 20 + 12 bytes
idlistp
+++ listp compiled, 16 + 8 bytes
listp
+++ mkprog redefined
+++ mkprog compiled, 5 + 12 bytes
mkprognil
+++ mksetq redefined
+++ mksetq compiled, 22 + 24 bytes
mksetq
+++ pairvars compiled, 40 + 32 bytes
pairvars
+++ prin2t compiled, 5 + 12 bytes
prin2tnil
+++ putc redefined
+++ putc compiled, 19 + 24 bytes
putcnilnil
+++ subsetp compiled, 16 + 8 bytes
subsetp
+++ union redefined
+++ union compiled, 22 + 8 bytes
union
+++ intersection redefined
+++ intersection compiled, 30 + 12 bytes
intersectionnilnilnil
+++ setdiff compiled, 15 + 8 bytes
setdiff
+++ aconc!* compiled, 6 + 8 bytes
aconc*
+++ nconc!* compiled as link to nconc
nconc*
+++ reversip!* compiled as link to reversip
reversip*
+++ rplaca!* compiled as link to rplaca
rplaca*
+++ rplacd!* compiled as link to rplacd
rplacd*
+++ lispapply compiled, 14 + 28 bytes
lispapply
+++ lispeval compiled as link to eval
lispevalnilnilnil
+++ gettype compiled, 68 + 68 bytes
gettypenilnilnilnil((abs 1) (add1 1) (append 2) (apply 2) (assoc 2) (atom 1) (
car 1) (cdr 1) (caar 1) (cadr 1) (cdar 1) (cddr 1) (caaar 1) (caadr 1) (cadar 1)
(caddr 1) (cdaar 1) (cdadr 1) (cddar 1) (cdddr 1) (caaaar 1) (caaadr 1) (caadar
1) (caaddr 1) (cadaar 1) (cadadr 1) (caddar 1) (cadddr 1) (cdaaar 1) (cdaadr 1)
(cdadar 1) (cdaddr 1) (cddaar 1) (cddadr 1) (cdddar 1) (cddddr 1) (close 1) (
codep 1) (compress 1) (cons 2) (constantp 1) (de 3) (deflist 2) (delete 2) (
difference 2) (digit 1) (divide 2) (dm 3) (eject 0) (eq 2) (eqn 2) (equal 2) (
error 2) (errorset 3) (eval 1) (evlis 1) (expand 2) (explode 1) (expt 2) (fix 1)
(fixp 1) (flag 2) (flagp 2) (float 1) (floatp 1) (fluid 1) (fluidp 1) (function
1) (gensym 0) (get 2) (getd 1) (getv 2) (global 1) (globalp 1) (go 1) (greaterp
2) (idp 1) (intern 1) (length 1) (lessp 2) (linelength 1) (liter 1) (lposn 0) (
map 2) (mapc 2) (mapcan 2) (mapcar 2) (mapcon 2) (maplist 2) (max2 2) (member 2)
(memq 2) (minus 1) (minusp 1) (min2 2) (mkvect 1) (nconc 2) (not 1) (null 1) (
numberp 1) (onep 1) (open 2) (pagelength 1) (pair 2) (pairp 1) (plus2 2) (posn 0
) (print 1) (prin1 1) (prin2 1) (prog2 2) (put 3) (putd 3) (putv 3) (quote 1) (
quotient 2) (rds 1) (read 0) (readch 0) (remainder 2) (remd 1) (remflag 2) (
remob 1) (remprop 2) (return 1) (reverse 1) (rplaca 2) (rplacd 2) (sassoc 3) (
set 2) (setq 2) (stringp 1) (sublis 2) (subst 3) (sub1 1) (terpri 0) (times2 2)
(unfluid 1) (upbv 1) (vectorp 1) (wrs 1) (zerop 1))(abs add1 append apply assoc
atom car cdr caar cadr cdar cddr caaar caadr cadar caddr cdaar cdadr cddar cdddr
caaaar caaadr caadar caaddr cadaar cadadr caddar cadddr cdaaar cdaadr cdadar
cdaddr cddaar cddadr cdddar cddddr close codep compress cons constantp de
deflist delete difference digit divide dm eject eq eqn equal error errorset eval
evlis expand explode expt fix fixp flag flagp float floatp fluid fluidp function
gensym get getd getv global globalp go greaterp idp intern length lessp
linelength liter lposn map mapc mapcan mapcar mapcon maplist max2 member memq
minus minusp min2 mkvect nconc not null numberp onep open pagelength pair pairp
plus2 posn print prin1 prin2 prog2 put putd putv quote quotient rds read readch
remainder remd remflag remob remprop return reverse rplaca rplacd sassoc set
setq stringp sublis subst sub1 terpri times2 unfluid upbv vectorp wrs zerop)nil
nilnilnilnilt0(fname* outl*)0
+++ errorp compiled, 8 + 8 bytes
errorpnil
+++ setcloc!* compiled, 14 + 24 bytes
setcloc*
+++ commdemo compiled, 101 + 64 bytes
commdemo
+++ command1 compiled, 8 + 28 bytes
command1
+++ command compiled, 205 + 164 bytes
command
+++ update_prompt compiled, 32 + 44 bytes
update_prompt
+++ begin1 compiled, 308 + 268 bytes
begin1
+++ begin11 compiled, 389 + 264 bytes
begin11
+++ getsetvarlis compiled, 63 + 32 bytes
getsetvarlis
+++ getsetvars compiled, 39 + 28 bytes
getsetvarsnil
+++ close!-input!-files compiled, 20 + 16 bytes
close-input-files
+++ close!-output!-files compiled, 19 + 16 bytes
close-output-files
+++ add2buflis compiled, 28 + 20 bytes
add2buflis
+++ add2inputbuf compiled, 15 + 24 bytes
add2inputbuf
+++ add2resultbuf compiled, 38 + 44 bytes
add2resultbuf
+++ condterpri compiled, 34 + 36 bytes
condterpri
+++ eofcheck compiled, 15 + 28 bytes
eofcheck
+++ resetparser compiled, 6 + 20 bytes
resetparser
+++ terminalp compiled, 8 + 16 bytes
terminalp
+++ dfprint compiled, 27 + 28 bytes
dfprintnil
+++ showtime compiled, 58 + 56 bytes
showtime
+++ sinitl compiled, 9 + 12 bytes
sinitl
+++ !*rlisp88 declared fluid
+++ read!-init!-file compiled, 172 + 124 bytes
read-init-filenilnilnilnilnilnilt 1
+++ prin2x compiled, 5 + 12 bytes
prin2x
+++ mkstrng redefined
+++ mkstrng compiled, 1 + 8 bytes
mkstrng
+++ readch1 compiled, 34 + 28 bytes
readch1
+++ tokquote compiled, 12 + 36 bytes
tokquotetokquote
+++ token!-number compiled, 195 + 116 bytes
token-number(0 1 2 3 4 5 6 7 8 9 a b c d e f a b c d e f)
+++ token1 compiled, 287 + 144 bytes
token1
+++ tokbquote compiled, 13 + 36 bytes
tokbquotetokbquote
+++ token redefined
+++ token compiled as link to token1
token
+++ filenderr compiled, 23 + 36 bytes
filenderr
+++ ptoken compiled, 25 + 32 bytes
ptoken
+++ rread1 compiled, 85 + 80 bytes
rread1
+++ rrdls redefined
+++ rrdls compiled, 49 + 48 bytes
rrdls
+++ rread redefined
+++ rread compiled, 4 + 20 bytes
rread
+++ delcp redefined
+++ delcp compiled, 4 + 12 bytes
delcpnil
+++ toknump compiled, 14 + 16 bytes
toknump
+++ addcomment compiled, 3 + 12 bytes
addcomment
+++ scan redefined
+++ scan compiled, 404 + 192 bytes
scan
+++ read!-comment1 compiled, 28 + 40 bytes
read-comment1nilnilnilnilnilnil
+++ chknewnam compiled, 18 + 16 bytes
chknewnam
+++ mkvar redefined
+++ mkvar compiled, 1 + 8 bytes
mkvar
+++ remcomma compiled, 9 + 12 bytes
remcomma
+++ eolcheck compiled, 19 + 36 bytes
eolcheck
+++ xcomment compiled, 11 + 16 bytes
xcomment
+++ xread1 redefined
+++ xread1 compiled, 684 + 292 bytes
xread1nilnilnil
+++ xread redefined
+++ xread compiled, 11 + 28 bytes
xread
+++ expread compiled, 3 + 16 bytes
expreadnilnilnilnilnilnil
+++ lpri compiled, 11 + 16 bytes
lpri
+++ lpriw compiled, 43 + 28 bytes
lpriw
+++ lprim compiled, 8 + 20 bytes
lprim
+++ lprie compiled, 21 + 32 bytes
lprie
+++ printty compiled, 23 + 20 bytes
printty
+++ rerror compiled, 5 + 16 bytes
rerror
+++ rederr compiled, 7 + 16 bytes
rederr
+++ symerr redefined
+++ symerr compiled, 88 + 76 bytes
symerr
+++ typerr compiled, 11 + 24 bytes
typerrnilnilnilnilnil
+++ comm1 compiled, 33 + 40 bytes
comm1
+++ ifstat redefined
+++ ifstat compiled, 47 + 52 bytes
ifstatifstatnil
+++ functionstat compiled, 32 + 44 bytes
functionstatfunctionstat
+++ lamstat compiled, 18 + 24 bytes
lamstatlamstat
+++ readprogn compiled, 16 + 36 bytes
readprognreadprognnilnil
+++ endstat redefined
+++ endstat compiled, 8 + 20 bytes
endstatendstatendstatendstatendstatnilendstatnilnilnilnilnilnil
+++ gostat redefined
+++ gostat compiled, 14 + 24 bytes
gostatgostatgo
+++ decl compiled, 78 + 72 bytes
decl0
+++ decstat compiled, 31 + 56 bytes
decstatnil
+++ blocktyperr compiled, 9 + 24 bytes
blocktyperr
+++ mapovercar compiled, 14 + 12 bytes
mapovercar
+++ blockstat redefined
+++ blockstat compiled, 84 + 100 bytes
blockstat
+++ mkblock compiled, 5 + 12 bytes
mkblock
+++ rblock_pn78o1tlo0tc compiled, 9 + 16 bytes
rblock
+++ symbvarlst compiled, 51 + 44 bytes
symbvarlst
+++ formblock compiled, 29 + 24 bytes
formblock
+++ initprogvars compiled, 38 + 20 bytes
initprogvars
+++ formprog compiled, 20 + 20 bytes
formprog
+++ formprog1 compiled, 73 + 44 bytes
formprog1formblockformprogblockstat
+++ retstat compiled, 22 + 40 bytes
retstatretstatnilnilnilnilnilaevalnil
+++ formcond compiled, 8 + 16 bytes
formcond
+++ formcond1 compiled, 29 + 20 bytes
formcond1formcond
+++ formlamb compiled, 20 + 20 bytes
formlambformlamb
+++ formprogn compiled, 8 + 16 bytes
formprognformprogn
+++ expdrmacro compiled, 20 + 28 bytes
expdrmacro
+++ getrmacro compiled, 24 + 24 bytes
getrmacro
+++ applmacro compiled, 6 + 8 bytes
applmacroapplmacronil
+++ set!-global!-mode compiled, 13 + 24 bytes
set-global-mode
+++ form1 compiled, 294 + 188 bytes
form1
+++ form2 compiled, 18 + 20 bytes
form2formlis
+++ argnochk compiled, 58 + 56 bytes
argnochk
+++ argsofopr compiled, 4 + 12 bytes
argsofopr
+++ intexprnp compiled, 35 + 24 bytes
intexprnp
+++ intexprlisp compiled, 15 + 12 bytes
intexprlispnil
+++ formlis compiled, 18 + 16 bytes
formlis
+++ formclis compiled, 18 + 16 bytes
formclis
+++ form redefined
+++ form compiled, 49 + 52 bytes
form
+++ macrochk compiled, 30 + 28 bytes
macrochksymbid
+++ symbid compiled, 55 + 60 bytes
symbidalgid
+++ algid compiled, 12 + 16 bytes
algidintid
+++ intid compiled, 42 + 40 bytes
intid
+++ convertmode compiled, 13 + 16 bytes
convertmode
+++ convertmode1 compiled, 58 + 32 bytes
convertmode1**a2s**s2a
+++ !*!*a2s compiled, 37 + 48 bytes
**a2s
+++ !*!*s2a compiled, 1 + 8 bytes
**s2a
+++ formc compiled, 31 + 44 bytes
formc
+++ intargfn compiled, 35 + 32 bytes
intargfn**a2i
+++ !*!*a2i compiled, 9 + 16 bytes
**a2i
+++ ieval compiled, 4 + 16 bytes
ievalnilnil**s2i
+++ !*!*s2i compiled, 9 + 12 bytes
**s2i
+++ !*s2i compiled, 9 + 16 bytes
*s2iidentity
+++ identity compiled, 1 + 8 bytes
identity
+++ formbool compiled, 140 + 76 bytes
formbool
+++ formboollis compiled, 33 + 20 bytes
formboollis
+++ bool!-eval compiled as link to lispeval
bool-evalnilnilnil
+++ boolvalue!* compiled, 9 + 12 bytes
boolvalue*
+++ formc!* compiled, 12 + 24 bytes
formc*
+++ revalx compiled, 12 + 16 bytes
revalx
+++ formrerror compiled, 65 + 44 bytes
formrerror(rerror)
+++ formrederr compiled, 10 + 16 bytes
formrederrformrederr
+++ formreturn compiled, 10 + 16 bytes
formreturnformreturn
+++ rsverr compiled, 9 + 24 bytes
rsverr
+++ mksetshare compiled, 9 + 20 bytes
mksetshare
+++ formsetq compiled, 248 + 152 bytes
formsetqformsetq
+++ setcar compiled, 4 + 8 bytes
setcar
+++ setcdr compiled, 4 + 8 bytes
setcdr(lambda (u v) (setcar u v))(lambda (u v) (setcdr u v))(lambda (u v) (
setcar (car u) v))(lambda (u v) (setcar (cdr u) v))(lambda (u v) (setcdr (car u)
v))(lambda (u v) (setcdr (cdr u) v))(lambda (u v) (setcar (caar u) v))(lambda (u
v) (setcar (cadr u) v))(lambda (u v) (setcar (cdar u) v))(lambda (u v) (setcar (
cddr u) v))(lambda (u v) (setcdr (caar u) v))(lambda (u v) (setcdr (cadr u) v))(
lambda (u v) (setcdr (cdar u) v))(lambda (u v) (setcdr (cddr u) v))(lambda (u v)
(setcar (caaar u) v))(lambda (u v) (setcar (caadr u) v))(lambda (u v) (setcar (
cadar u) v))(lambda (u v) (setcar (caddr u) v))(lambda (u v) (setcar (cdaar u) v
))(lambda (u v) (setcar (cdadr u) v))(lambda (u v) (setcar (cddar u) v))(lambda
(u v) (setcar (cdddr u) v))(lambda (u v) (setcdr (caaar u) v))(lambda (u v) (
setcdr (caadr u) v))(lambda (u v) (setcdr (cadar u) v))(lambda (u v) (setcdr (
caddr u) v))(lambda (u v) (setcdr (cdaar u) v))(lambda (u v) (setcdr (cdadr u) v
))(lambda (u v) (setcdr (cddar u) v))(lambda (u v) (setcdr (cdddr u) v))(lambda
(l i x) (setcar (pnth l i) x))(lambda (v i x) (putv v i x))(lambda (v i x) (
iputv v i x))
+++ formfunc compiled, 37 + 44 bytes
formfuncformfunc
+++ rlis redefined
+++ rlis compiled, 30 + 40 bytes
rlis
+++ flagop compiled, 8 + 12 bytes
flagop
+++ rlistat compiled, 13 + 20 bytes
rlistatnil
+++ formrlis compiled, 69 + 56 bytes
formrlis
+++ mkarg compiled, 43 + 24 bytes
mkargdnform
+++ dnform compiled, 50 + 44 bytes
dnformintform
+++ intform compiled, 19 + 20 bytes
intformnilnilnilnilnilnilt(expr fexpr macro)
+++ mkprogn compiled, 15 + 12 bytes
mkprogn
+++ formproc compiled, 302 + 172 bytes
formprocformproc
+++ pairxvars compiled, 73 + 36 bytes
pairxvars
+++ procstat1 compiled, 220 + 132 bytes
procstat1
+++ procstat redefined
+++ procstat compiled, 3 + 12 bytes
procstat(procedure expr fexpr emb macro smacro)procstat(lisp)nilnilnilnilnil(do
collect conc product sum)nil(product sum)(product sum)
+++ forstat compiled, 21 + 40 bytes
forstatforstat
+++ forloop compiled, 176 + 88 bytes
forloop
+++ formfor compiled, 255 + 100 bytes
formforformfor
+++ algmodep compiled, 12 + 16 bytes
algmodep
+++ aminusp!: compiled, 33 + 48 bytes
aminusp:
+++ aminusp!:1 compiled, 70 + 44 bytes
aminusp:1
+++ foreachstat compiled, 75 + 56 bytes
foreachstatforeachstat
+++ formforeach compiled, 95 + 52 bytes
formforeachformforeach
+++ forformat compiled, 214 + 144 bytes
forformatnil
+++ unreval compiled, 11 + 12 bytes
unrevalnilconcnilnilnilnilnil
+++ repeatstat compiled, 42 + 48 bytes
repeatstat
+++ repeat_tf4oldpkog0h compiled, 30 + 28 bytes
repeatrepeatstatnil
+++ formrepeat compiled, 27 + 32 bytes
formrepeatformrepeat
+++ whilstat compiled, 42 + 48 bytes
whilstat
+++ while_h3uq52sfkd98 compiled, 36 + 32 bytes
whilewhilstatnil
+++ formwhile compiled, 27 + 32 bytes
formwhileformwhilenilnilnilnil
+++ define compiled, 36 + 32 bytes
define(define)nil
+++ formwrite compiled, 95 + 56 bytes
formwriterlisformwritenilrlisformechopr
+++ formechopr compiled, 33 + 40 bytes
formechoprnilnilnil
+++ applsmacro compiled, 250 + 64 bytes
applsmacro
+++ no!-side!-effectp compiled, 33 + 40 bytes
no-side-effectp
+++ no!-side!-effect!-listp compiled, 13 + 12 bytes
no-side-effect-listpnil
+++ one!-entryp compiled, 23 + 12 bytes
one-entryp
+++ one!-entry!-listp compiled, 15 + 12 bytes
one-entry-listp
+++ subla!-q compiled, 30 + 12 bytes
subla-qapplsmacronilnilnilnilnil
+++ file!-transform compiled, 35 + 32 bytes
file-transform
+++ infile compiled, 7 + 20 bytes
infile
+++ in compiled as link to in_non_empty_list
in
+++ in_non_empty_list compiled, 60 + 56 bytes
in_non_empty_list
+++ mkfil!* compiled, 29 + 28 bytes
mkfil*
+++ in_list1 compiled, 92 + 80 bytes
in_list1
+++ out compiled as link to out_non_empty_list
out
+++ out_non_empty_list compiled, 88 + 64 bytes
out_non_empty_list
+++ shut compiled as link to shut_non_empty_list
shut
+++ shut_non_empty_list compiled, 120 + 80 bytes
shut_non_empty_list(in out shut)nilnilnilnilnilnilnil
+++ forminfix compiled, 68 + 28 bytes
forminfixforminfix
+++ infix compiled, 27 + 16 bytes
infix
+++ precedence compiled, 48 + 40 bytes
precedence(infix precedence)nilnilnilnilnil
+++ on compiled, 15 + 12 bytes
on
+++ off compiled, 15 + 12 bytes
off
+++ off1 compiled, 4 + 12 bytes
off1
+++ on1 compiled, 4 + 16 bytes
on1
+++ onoff compiled, 80 + 64 bytes
onoff
+++ switch compiled, 64 + 40 bytes
switch(switch)nilrlisrlisnilnil((t (flag (list $eol$) (quote delchar))) (nil (
remflag (list $eol$) (quote delchar))))nil((t (load-package (quote reduce4)) (
%reduce4)))nilnilnil
+++ formwhere compiled, 87 + 52 bytes
formwhereformwherenilnilnilnilnillistquotelist
+++ quotelist compiled, 2 + 12 bytes
quotelist
+++ xreadlist compiled, 55 + 56 bytes
xreadlistxreadlistnilnilnilnillistevalsimpiden
+++ getrlist compiled, 19 + 28 bytes
getrlist
+++ listeval compiled, 123 + 72 bytes
listeval
+++ makelist compiled, 4 + 12 bytes
makelistlengthcdr
+++ lengthcdr compiled, 3 + 8 bytes
lengthcdrlistpri
+++ listpri compiled, 66 + 76 bytes
listpri
+++ treesizep compiled, 5 + 16 bytes
treesizep
+++ treesizep1 compiled, 19 + 12 bytes
treesizep1
+++ listeval0 compiled, 51 + 48 bytes
listeval0rlistp
+++ rfirst compiled, 30 + 40 bytes
rfirstrfirst
+++ parterr compiled, 10 + 24 bytes
parterr
+++ rsecond compiled, 34 + 40 bytes
rsecondrsecond
+++ rthird compiled, 39 + 40 bytes
rthirdrthird(first second third part)
+++ rrest compiled, 71 + 44 bytes
rrestrrest(first second third rest)
+++ rappend compiled, 35 + 40 bytes
rappendrappend
+++ rcons compiled, 54 + 64 bytes
rconsrcons
+++ rreverse compiled, 20 + 36 bytes
rreverserreverse
+++ listmap compiled, 68 + 24 bytes
listmaplistmapnil
+++ lambda_8umob4nurre8 compiled, 12 + 24 bytes
+++ listsort compiled, 50 + 52 bytes
listsortlistsortnilnilnilnilnil
+++ getel compiled, 27 + 36 bytes
getel
+++ getel1 compiled, 36 + 32 bytes
getel1
+++ setel compiled, 28 + 36 bytes
setel
+++ setel1 compiled, 44 + 32 bytes
setel1
+++ dimension compiled, 4 + 8 bytes
dimension
+++ typechk compiled, 27 + 28 bytes
typechk
+++ arrayfn compiled, 88 + 48 bytes
arrayfnnil
+++ add1lis compiled, 15 + 12 bytes
add1lis
+++ mkarray_6ue7bj94uh3d compiled, 13 + 28 bytes
mkarray
+++ mkarray1 compiled, 41 + 16 bytes
mkarray1rlisnil
+++ formarray compiled, 90 + 44 bytes
formarrayformarrayarraychk
+++ arraychk compiled, 5 + 12 bytes
arraychkarrayeval
+++ arrayeval compiled, 9 + 24 bytes
arrayevalarraylength
+++ arraylength compiled, 6 + 16 bytes
arraylengthnilnilnilnilnil
+++ pause compiled, 13 + 20 bytes
pause
+++ pause1 compiled, 110 + 88 bytes
pause1
+++ assoccar compiled, 14 + 8 bytes
assoccar
+++ yesp compiled, 71 + 60 bytes
yesp
+++ yesp1 compiled, 38 + 40 bytes
yesp1
+++ cont compiled, 73 + 60 bytes
cont(cont pause retry)nilnilnil
nil
nilcslrendnilnilA C Hearn, 2008Codemist Ltd, 2008(algint applysym arnum assist
atensor avector boolean cali camal cantens cedit cgb changevr cl compact conlaw
crack cvit defint desir dfpart dummy dvfsf eds excalc ezgcd factor fide fmprint
fps ftr gentran geoprover ghyper gnuplot groebner hephys ideals ineq int invbase
laplace lie liepde limits linalg mathml matrix meijerg misc modsr mrvlimit
ncpoly normform numeric odesolve ofsf orthovec pf physop plot pm polydiv pretty
qsum randpoly rataprx ratint rcref reacteqn redlog reset residue rlfi rlisp88
rltools roots rprint rsolve rtrace scope sets sfgamma solve sparse spde specfn
sum support susy2 symmetry taylor tps tri trigint trigsimp wu xcolor xideal
zeilberg ztrans)(acinfo adjprec again algint algpri allbranch allfac allowdfint
allpoly anticom arbvars arnum asterisk backtrace balanced_mod balanced_was_on
batch_mode bcsimp bezout bfspace boese both carcheckflag carefuleq centergrid
cgbcheckg cgbcontred cgbcounthf cgbfullred cgbgen cgbgs cgbreal cgbsgreen
cgbstat cgbupdb cgbverbose coates combineexpt combinelogs commutedf commuteint
comp complex compxroots contract cramer cref cvit debug debug_times defn demo
derexp detectunits dfint dfprint diffsoln dispjacobian distribute div double
downcase dummypri echo edsdebug edsdisjoint edssloppy edsverbose eqfu errcont
essl evallhseqp exdelt exp expanddf expandexpt expandlogs ezgcd f90 factor
factorprimes factorunits failhard fancy fancy_tex fast_la fastfor faststructs
fastvector force fort fortupper fourier ftch fulleq fullpoly fullprec
fullprecision fullroots gbltbasis gc gcd gendecs genpos gentranopt gentranseg
getdecs gltbasis groebfac groebfullreduction groebopt groebprot groebrm
groebstat groebweak gsugar hardzerotest heugcd horner hyperbolic ifactor
imaginary imsl inputc int int_test intern intstr keepdecs lasimp latex lcm
lessspace lexefgb lhyp limitedfactors list listargs lmon looking_good lower
lower_matrix ltrig makecalls mathml mcd mod_was_on modular msg multiplicities
multiroot mymatch nag nat nero nested noacn noarg nocommutedf nocompile
noconvert noetherian noint nointint nolnr nonlnr nopowers nosplit nosturm
not_negative notailcall novarmsg numval odesolve_basis odesolve_check
odesolve_diff odesolve_equidim_y odesolve_expand odesolve_explicit odesolve_fast
odesolve_full odesolve_implicit odesolve_noint odesolve_norecurse
odesolve_noswap odesolve_simp_arbparam odesolve_verbose onespace only_integer
optdecs ord outerzeroscheck output overview partialint partialintdf
partialintint period pgwd plap plotkeep plotusepipe prapprox precise prefix pret
prfourmat pri priall primat prlinineq psen pvector pwrds qgosper_down
qgosper_specials qsum_nullspace qsum_trace qsumrecursion_certificate
qsumrecursion_down qsumrecursion_exp qsumrecursion_profile quotenewnam r2i raise
ranpos rat ratarg rational rationalize ratpri ratroot red_total reduce4 reduced
revpri rladdcond rlanuexdebug rlanuexdifferentroots rlanuexgcdnormalize
rlanuexpsremseq rlanuexsgnopt rlanuexverbose rlbnfsac rlbnfsm rlbrop rlcadaproj
rlcadaprojalways rlcadbaseonly rlcaddebug rlcaddecdeg rlcaddnfformula
rlcadextonly rlcadfac rlcadfasteval rlcadfulldimonly rlcadhongproj
rlcadisoallroots rlcadmc3 rlcadmcproj rlcadpartial rlcadpbfvs rlcadpreponly
rlcadprojonly rlcadrawformula rlcadte rlcadtrimtree rlcadverbose rldavgcd
rlgsbnf rlgserf rlgsprod rlgsrad rlgsred rlgssub rlgsutord rlgsvb rlidentify
rlisp88 rlnzden rlopt1s rlourdet rlparallel rlposden rlpscsgen rlqedfs rlqefb
rlqegen1 rlqegenct rlqegsd rlqeheu rlqepnf rlqeqsc rlqesqsc rlqesr rlqevarsel
rlrealtime rlsiatadv rlsichk rlsiexpl rlsiexpla rlsifac rlsiidem rlsimpl rlsipd
rlsipo rlsipw rlsism rlsiso rlsitsqspl rlsusi rlsusiadd rlsusigs rlsusimult
rltabib rltnft rlverbose rlvmatvb rlxopt rlxoptpl rlxoptri rlxoptric rlxoptrir
rlxoptsb rlxoptses rootmsg roundall roundbf rounded rtrace saveactives savedef
savesfs savestructr semantic sfto_musser sfto_tobey sfto_yun show_grid sidrel
simpnoncomdf solvesingular symmetric taylorautocombine taylorautoexpand
taylorkeeporiginal taylornocache taylorprintorder tdusetorder tensor test_plot
testecho tex texbreak texindent time tr_lie tra tracefps tracelimit traceratint
tracespecfns tracetrig trallfac trchrstrem trcompact trdesir trdint trfac
trfield trgroeb trgroeb1 trgroebr trgroebs trham trigform trint trinvbase
trlinineq trlinineqint trlinrec trmin trnonlnr trnumeric trode trplot trpm
trroot trsolve trsum trtaylor trwu trxideal trxmod twogrid twosided unsafecar
upcase upper_matrix useold usetaylor usez varopt vectorc verbatim verboseload
vtrace web windexpri wrchri xfullreduce xpartialint xpartialintdf xpartialintint
zb_factor zb_inhomogeneous zb_proof zb_timer zb_trace zeilberg)nil	endstat
+++ bye compiled, 5 + 16 bytes
bye(bye)endstat
+++ quit compiled, 5 + 16 bytes
quit(quit)nil
+++ filetype compiled, 51 + 24 bytes
filetype
+++ mkfil redefined
+++ mkfil compiled, 16 + 24 bytes
mkfil
+++ savesession compiled, 3 + 16 bytes
savesessionnilnilnilnilendstatnil16777215nil1nilnil$HOME
+++ load!-patches!-file compiled, 116 + 100 bytes
load-patches-file
+++ load!-latest!-patches compiled as link to load-patches-file
load-latest-patchesnil
+++ outputhandler!* declared fluid
+++ begin compiled, 204 + 192 bytes
beginnilnil
+++ string!-downcase redefined
+++ string!-downcase compiled, 11 + 16 bytes
string-downcasenil
+++ igetv compiled as link to getv
igetv
+++ iputv compiled as link to putv
iputv
+++ first compiled as link to car
first
+++ second compiled as link to cadr
second
+++ third compiled as link to caddr
third
+++ fourth compiled as link to cadddr
fourth
+++ rest compiled as link to cdr
rest0tgensym
+++ initreduce compiled as link to initrlisp
initreduce
+++ initrlisp compiled, 12 + 32 bytes
initrlisp
+++ rlispmain compiled, 3 + 16 bytes
rlispmainnilnilnil(load reload)
+++ load_9t5ilq315iib compiled, 4 + 12 bytes
load
+++ reload_jppsbty7qfk6 compiled, 4 + 16 bytes
reloadnilnil
+++ psl!-load compiled, 30 + 20 bytes
psl-load
+++ tr_09w8ppd3nvl2 compiled, 7 + 16 bytes
tr
+++ untr_t5yzfgwircf7 compiled, 7 + 16 bytes
untr
+++ trst_ms5j819loxo1 compiled, 7 + 16 bytes
trst
+++ untrst_6mkqp9df0dv7 compiled, 7 + 16 bytes
untrstnil(tr trst untr untrst)
+++ prop compiled as link to plist
propnilnilnilnil(imports)nilnil
+++ concat2 compiled as link to concat
concat2
+++ concat redefined
+++ concat compiled, 21 + 12 bytes
concat
+++ dated!-gensym compiled as link to dated-name
dated-gensymnilnilnilnilnil
+++ add_patch_url compiled, 5 + 12 bytes
add_patch_url(http://reduce-algebra.com/support/patches/patches.fsl)
+++ get!-checksum compiled, 44 + 44 bytes
get-checksum
+++ write!-patch!-file compiled, 121 + 72 bytes
write-patch-file
+++ rename!-home!-patch!-file compiled, 16 + 32 bytes
rename-home-patch-file
+++ update_reduce compiled, 191 + 124 bytes
update_reducenilnilnilnilnilnilnilnilfix2lshiftashiftlandmsd:make:ibfnilrndpwr
+++ csl_normbf compiled, 46 + 28 bytes
csl_normbfnormbf
+++ csl_timbf compiled, 29 + 28 bytes
csl_timbftimbf
+++ fl2bf compiled, 27 + 28 bytes
fl2bfnil15nilnil
+++ find!!maxbflexp compiled, 13 + 36 bytes
find!maxbflexpnilnil
+++ copyd redefined
+++ copyd compiled, 48 + 44 bytes
copydnilint2idid2intbothtimescompiletimeloadtimecslpsl
+++ printf_xn4ttno3bvmd compiled, 11 + 16 bytes
printf
+++ printf1 compiled, 167 + 96 bytes
printf1
+++ bldmsg_b4ggxmn9mj09 compiled, 11 + 16 bytes
bldmsg
+++ bldstring compiled, 26 + 16 bytes
bldstring
+++ bldcolumn compiled, 15 + 12 bytes
bldcolumn
+++ bldmsg1 compiled, 243 + 104 bytes
bldmsg1((t (verbos t)) (nil (verbos nil)))nilnilnil
nil
nilpolynilnilnilnilnilnilnilniladdlcldegltmultmvarlpowpdegredtctdegtpowtvarnumr
denroverdomainp
+++ !*a2f compiled, 4 + 16 bytes
*a2f
+++ !*a2k compiled, 21 + 28 bytes
*a2k
+++ !*a2kwoweight compiled, 27 + 36 bytes
*a2kwoweight
+++ !*d2q compiled, 28 + 16 bytes
*d2q
+++ !*ff2a compiled, 12 + 24 bytes
*ff2a*f2a*f2q*k2f*kk2f*kk2q*k2q
+++ !*n2f compiled, 6 + 8 bytes
*n2f*p2f*p2q
+++ !*q2a compiled, 4 + 16 bytes
*q2a
+++ !*q2a1 compiled, 8 + 16 bytes
*q2a1
+++ !*q2f compiled, 10 + 24 bytes
*q2f
+++ !*q2k compiled, 13 + 24 bytes
*q2k*t2f*t2qtvarnilnilnilnilnil((t (rmsubs)))niltsubtrsq
+++ addsq compiled, 104 + 48 bytes
addsq
+++ multsq compiled, 56 + 28 bytes
multsq
+++ negsq compiled, 5 + 12 bytes
negsqmultpq
+++ cancel compiled, 29 + 32 bytes
cancelpeq
+++ addf compiled, 86 + 16 bytes
addf
+++ addd compiled, 27 + 12 bytes
addd
+++ adddm compiled, 29 + 36 bytes
adddm
+++ domainp compiled, 10 + 8 bytes
domainp
+++ noncomp compiled, 7 + 16 bytes
noncomp
+++ noncomp1 compiled, 25 + 20 bytes
noncomp1
+++ noncomlistp compiled, 13 + 12 bytes
noncomlistp
+++ multf compiled, 199 + 84 bytes
multf
+++ noncomfp compiled, 7 + 16 bytes
noncomfp
+++ noncomfp1 compiled, 25 + 16 bytes
noncomfp1
+++ multfnc compiled, 104 + 40 bytes
multfnc
+++ multd compiled, 38 + 20 bytes
multd
+++ multdm compiled, 26 + 28 bytes
multdmmultpf
+++ negf compiled, 42 + 28 bytes
negf
+++ degreef compiled, 26 + 16 bytes
degreef*sqlength
+++ !*sqlength compiled, 15 + 16 bytes
*sqlength
+++ terms compiled, 7 + 24 bytes
termsnilnil
+++ termsf compiled, 24 + 12 bytes
termsf
+++ tmsf compiled, 55 + 28 bytes
tmsf
+++ tmsf!* compiled, 16 + 20 bytes
tmsf*
+++ tms compiled, 5 + 16 bytes
tmsnilnilnil
+++ offexpchk compiled, 21 + 28 bytes
offexpchk
+++ freevarinexptchk compiled, 26 + 12 bytes
freevarinexptchk
+++ mkprod compiled, 169 + 84 bytes
mkprod
+++ expnd compiled, 24 + 32 bytes
expnd
+++ expnd1 compiled, 61 + 28 bytes
expnd1
+++ canprod compiled, 226 + 44 bytes
canprod
+++ sfpf compiled, 16 + 16 bytes
sfpf
+++ sfp compiled, 12 + 12 bytes
sfp
+++ reprod compiled, 14 + 16 bytes
reprod
+++ cprod1 compiled, 50 + 24 bytes
cprod1
+++ cprod2 compiled, 102 + 32 bytes
cprod2
+++ mkspm compiled, 25 + 32 bytes
mkspm
+++ sub2chk compiled, 19 + 28 bytes
sub2chk
+++ quotsq compiled, 6 + 16 bytes
quotsq
+++ quotf!* compiled, 26 + 28 bytes
quotf*
+++ quotf compiled, 11 + 24 bytes
quotf
+++ quotf1 compiled, 173 + 68 bytes
quotf1
+++ rnconc compiled, 30 + 20 bytes
rnconc
+++ quotfd compiled, 23 + 32 bytes
quotfd
+++ divd compiled, 55 + 40 bytes
divd
+++ divdm compiled, 26 + 28 bytes
divdm
+++ quotdd compiled, 44 + 24 bytes
quotdd
+++ quotk compiled, 28 + 12 bytes
quotk
+++ rank compiled, 47 + 20 bytes
rank
+++ lt!* compiled, 33 + 20 bytes
lt*
+++ remf compiled, 12 + 28 bytes
remfremf
+++ qremf compiled, 187 + 56 bytes
qremf
+++ praddf compiled, 10 + 12 bytes
praddf
+++ qremd compiled, 61 + 44 bytes
qremd
+++ lqremf compiled, 22 + 16 bytes
lqremf
+++ minusf compiled, 25 + 12 bytes
minusf
+++ absf!* compiled, 21 + 28 bytes
absf*
+++ absf compiled, 8 + 16 bytes
absf
+++ canonsq compiled, 117 + 64 bytes
canonsq
+++ fieldconv compiled, 103 + 48 bytes
fieldconv
+++ simpgd compiled, 24 + 28 bytes
simpgd
+++ lnc compiled, 15 + 12 bytes
lnc
+++ invsq compiled, 20 + 40 bytes
invsq
+++ gcdchk compiled, 18 + 20 bytes
gcdchknilnilnil
+++ quotfx compiled, 10 + 24 bytes
quotfx
+++ quotfx1 compiled, 188 + 68 bytes
quotfx1
+++ quotkx compiled, 28 + 12 bytes
quotkx
+++ quotfdx compiled, 23 + 32 bytes
quotfdx
+++ quotfxerr compiled, 3 + 16 bytes
quotfxerr
+++ cutf compiled, 11 + 16 bytes
cutf
+++ cutf1 compiled, 28 + 12 bytes
cutf1nilnilnilnilnil
+++ comfac compiled, 76 + 48 bytes
comfac
+++ degr compiled, 15 + 12 bytes
degrgcdf*2
+++ gcdf!* compiled, 9 + 24 bytes
gcdf*
+++ gcdf compiled, 50 + 48 bytes
gcdf
+++ free!-powerp compiled, 27 + 12 bytes
free-powerp
+++ gcdf1 compiled, 97 + 56 bytes
gcdf1
+++ gcdf2 compiled, 204 + 72 bytes
gcdf2
+++ gcdfnc compiled, 36 + 16 bytes
gcdfnc
+++ num!-exponents compiled, 25 + 8 bytes
num-exponents
+++ gcdfd compiled, 9 + 24 bytes
gcdfd
+++ gcdfd1 compiled, 20 + 12 bytes
gcdfd1
+++ gcddd compiled, 58 + 28 bytes
gcddd
+++ gcdk compiled, 208 + 68 bytes
gcdk
+++ addlc compiled, 24 + 20 bytes
addlc
+++ delallasc compiled, 22 + 12 bytes
delallasc
+++ kernord compiled, 12 + 16 bytes
kernord
+++ kernord!-split compiled, 73 + 12 bytes
kernord-split
+++ kernord!-sort compiled, 18 + 16 bytes
kernord-sort
+++ maxdeg compiled, 22 + 8 bytes
maxdeg
+++ powers compiled, 4 + 12 bytes
powers
+++ powers0 compiled, 49 + 12 bytes
powers0lcm*2
+++ lcm!* compiled, 9 + 24 bytes
lcm*
+++ lcm compiled, 22 + 24 bytes
lcm
+++ remk compiled, 58 + 36 bytes
remk
+++ prim!-part compiled, 7 + 20 bytes
prim-part
+++ comfac!-to!-poly compiled, 8 + 8 bytes
comfac-to-polynilnilnilnil
+++ exptsq compiled, 137 + 84 bytes
exptsq
+++ exptf compiled, 30 + 36 bytes
exptf
+++ exptf1 compiled, 22 + 20 bytes
exptf1
+++ exptf2 compiled, 37 + 24 bytes
exptf2nilnilnilnil
+++ fkern compiled, 59 + 36 bytes
fkern
+++ kernels compiled, 4 + 12 bytes
kernels
+++ kernels1 compiled, 29 + 8 bytes
kernels1
+++ kernp compiled, 37 + 16 bytes
kernpnilnilnilnilnil
+++ getpower compiled, 15 + 24 bytes
getpower
+++ mksp compiled, 5 + 16 bytes
mksp
+++ to compiled as link to cons
to
+++ mksp!* compiled, 36 + 36 bytes
mksp*
+++ mksfpf compiled, 61 + 40 bytes
mksfpf
+++ mksq compiled, 181 + 96 bytes
mksqnilnilnilnil(nil)
+++ reordsq compiled, 8 + 12 bytes
reordsq
+++ reorder compiled, 32 + 16 bytes
reorder
+++ raddf compiled, 77 + 16 bytes
raddf
+++ rmultpf compiled, 37 + 16 bytes
rmultpf
+++ reordop compiled, 15 + 20 bytes
reordop
+++ kernel!-list compiled, 59 + 24 bytes
kernel-list
+++ korder compiled, 13 + 24 bytes
kordernil
+++ setkorder compiled, 13 + 16 bytes
setkorder
+++ updkorder compiled, 19 + 16 bytes
updkordernilnilnilnilnil
+++ initdmode compiled, 30 + 32 bytes
initdmode
+++ setdmode compiled, 86 + 84 bytes
setdmode
+++ setdmode1 compiled, 117 + 68 bytes
setdmode1
+++ offmoderr compiled, 14 + 28 bytes
offmoderr
+++ dmodechk compiled, 171 + 100 bytes
dmodechk
+++ dmoderr compiled, 21 + 36 bytes
dmoderr
+++ mkdmoderr compiled, 15 + 24 bytes
mkdmoderrnilnilnilnil
+++ !:difference compiled, 25 + 20 bytes
:difference
+++ !:divide compiled, 26 + 36 bytes
:divide
+++ dividef compiled, 22 + 12 bytes
dividef
+++ !:expt compiled, 111 + 60 bytes
:expt
+++ !:gcd compiled, 30 + 24 bytes
:gcd
+++ !:minus compiled, 24 + 24 bytes
:minus
+++ !:minusp compiled, 12 + 12 bytes
:minusp
+++ !:onep compiled, 12 + 12 bytes
:onep
+++ !:plus compiled, 24 + 20 bytes
:plus
+++ !:quotient compiled, 50 + 48 bytes
:quotient
+++ !:recip compiled, 45 + 44 bytes
:recip
+++ !:rn2rd compiled, 8 + 20 bytes
:rn2rd
+++ !:times compiled, 18 + 16 bytes
:times
+++ !:zerop compiled, 16 + 20 bytes
:zerop
+++ fieldp compiled, 12 + 16 bytes
fieldp
+++ gettransferfn compiled, 9 + 12 bytes
gettransferfn
+++ dcombine compiled, 231 + 80 bytes
dcombine
+++ int!-equiv!-chk compiled, 43 + 32 bytes
int-equiv-chknilnilnilnilnil(:rn:):rn:rationalnil*i2rn*rn2ftrnminus:rnminusp:
rnplus:rntimes:rndifference:rnquotient:rnzerop:rnonep:rnfactor:rnexpt:rnprep:
rnprinrnequivrn:rootnil
+++ rnexpt!: compiled, 57 + 16 bytes
rnexpt:
+++ mkratnum compiled, 20 + 24 bytes
mkratnum
+++ mkrn compiled, 31 + 12 bytes
mkrn
+++ !*i2rn compiled, 6 + 16 bytes
*i2rn
+++ rnminus!: compiled, 9 + 12 bytes
rnminus:
+++ rnminusp!: compiled, 14 + 12 bytes
rnminusp:
+++ rnplus!: compiled, 22 + 12 bytes
rnplus:
+++ rntimes!: compiled, 14 + 12 bytes
rntimes:
+++ rndifference!: compiled, 22 + 12 bytes
rndifference:
+++ rnquotient!: compiled, 14 + 12 bytes
rnquotient:
+++ rnzerop!: compiled, 5 + 12 bytes
rnzerop:
+++ rnonep!: compiled, 12 + 12 bytes
rnonep:
+++ rnfactor!: compiled, 114 + 56 bytes
rnfactor:
+++ rnprep!: compiled, 18 + 20 bytes
rnprep:
+++ rnprin compiled, 9 + 16 bytes
rnprin
+++ rnequiv compiled, 8 + 12 bytes
rnequiv
+++ rn!:root compiled, 21 + 20 bytes
rn:rootnilnilnilnilnil(fix round ceiling floor factorial perm choose)nilnil(perm
choose)
+++ rnfix!* compiled, 7 + 8 bytes
rnfix*
+++ rnfixchk compiled, 20 + 24 bytes
rnfixchk
+++ rnfloor!* compiled, 16 + 8 bytes
rnfloor*
+++ rnceiling!* compiled, 17 + 12 bytes
rnceiling*
+++ rnround!* compiled, 41 + 48 bytes
rnround*
+++ rnilog2!* compiled, 4 + 16 bytes
rnilog2*
+++ rnfactorial!* compiled, 24 + 28 bytes
rnfactorial*
+++ rnperm!* compiled, 8 + 16 bytes
rnperm*
+++ perm compiled, 42 + 16 bytes
perm
+++ rnchoose!* compiled, 8 + 16 bytes
rnchoose*
+++ choose compiled, 9 + 16 bytes
choose
+++ simprn compiled, 54 + 28 bytes
simprn
+++ rnirootn!* compiled, 8 + 20 bytes
rnirootn*nilnilnilnilnilnil(:gi: :rn:)
+++ setcmpxmode compiled, 154 + 76 bytes
setcmpxmode
+++ intgcdd compiled, 44 + 8 bytes
intgcdd:gi:complex*i2gigiminusp:gizerop:gionep:giplus:gidifference:gitimes:
giquotient:gidivide:gigcd:gifactor:giprep:gintequiv:giprn:giprn:mkgi:gi:unitconv
+++ !:gi!:unitconv compiled, 9 + 20 bytes
:gi:unitconv(((:gi: 0 . 1) :gi: 0 . -1) ((:gi: 0 . -1) :gi: 0 . 1))
+++ unitconv compiled, 42 + 24 bytes
unitconv
+++ !*i2gi compiled, 6 + 16 bytes
*i2gi
+++ giminusp!: compiled, 14 + 12 bytes
giminusp:
+++ gizerop!: compiled, 12 + 12 bytes
gizerop:
+++ gionep!: compiled, 12 + 16 bytes
gionep:
+++ gintequiv!: compiled, 8 + 12 bytes
gintequiv:
+++ mkdgi compiled, 8 + 20 bytes
mkdgi
+++ mkgi compiled, 5 + 12 bytes
mkgi
+++ giplus!: compiled, 14 + 12 bytes
giplus:
+++ gidifference!: compiled, 14 + 12 bytes
gidifference:
+++ gitimes!: compiled, 33 + 12 bytes
gitimes:
+++ giquotient!: compiled, 71 + 20 bytes
giquotient:
+++ gidivide!: compiled, 138 + 20 bytes
gidivide:
+++ giremainder compiled, 136 + 20 bytes
giremainder
+++ gigcd!: compiled, 17 + 20 bytes
gigcd:
+++ fqa compiled, 59 + 16 bytes
fqa
+++ gifactor!: compiled, 358 + 108 bytes
gifactor:
+++ normalize!-lcgi compiled, 67 + 44 bytes
normalize-lcgi
+++ contains!-oddpower compiled, 14 + 12 bytes
contains-oddpower
+++ power!-sort compiled, 17 + 16 bytes
power-sort
+++ sqfrp compiled, 32 + 44 bytes
sqfrp
+++ realp compiled, 42 + 24 bytes
realp
+++ fd2f compiled, 43 + 36 bytes
fd2f
+++ giprep!: compiled, 38 + 24 bytes
giprep:
+++ giprim compiled, 11 + 20 bytes
giprim
+++ giprn!: compiled, 18 + 32 bytes
giprn:
+++ girationalize!: compiled, 57 + 64 bytes
girationalize:
+++ gigcdsq compiled, 29 + 24 bytes
gigcdsq
+++ giintgcd compiled, 40 + 16 bytes
giintgcd
+++ conjgd compiled, 83 + 32 bytes
conjgdnilnilnilnilnilnilnilniltnil(:crn: :gi: :rn:)nil:crn:complex-rationalnil
i2crn*crn:pluscrn:timescrn:differcrn:quotientcrn:zeropcrn:onepcrn:prepcrn:prin
crn:minuscrn:factorgirationalize:*crn2rn*rn2crn*rd2crn*crn2rd*gi2crnmkcrnmkdcrn
crnequiv:rn::crn:crn:minusp
+++ crn!:minusp compiled, 12 + 12 bytes
crn:minusp
+++ mkcrn compiled, 5 + 12 bytes
mkcrncrntagrntagcrnrlcrnim
+++ crn!:simp compiled, 6 + 16 bytes
crn:simpcrn:simp
+++ mkdcrn compiled, 13 + 20 bytes
mkdcrn
+++ i2crn!* compiled, 10 + 20 bytes
i2crn*
+++ !*crn2rn compiled, 12 + 20 bytes
*crn2rn
+++ !*rn2crn compiled, 7 + 20 bytes
*rn2crn
+++ !*crn2rd compiled, 14 + 28 bytes
*crn2rd
+++ !*rd2crn compiled, 12 + 28 bytes
*rd2crn
+++ !*gi2crn compiled, 12 + 16 bytes
*gi2crn
+++ crn!:plus compiled, 28 + 20 bytes
crn:plus
+++ crn!:differ compiled, 28 + 20 bytes
crn:differ
+++ crn!:times compiled, 44 + 28 bytes
crn:times
+++ crn!:quotient compiled, 58 + 32 bytes
crn:quotient
+++ crn!:minus compiled, 20 + 12 bytes
crn:minus
+++ crn!:zerop compiled, 14 + 12 bytes
crn:zerop
+++ crn!:onep compiled, 13 + 16 bytes
crn:onep
+++ crn!:prep compiled, 12 + 16 bytes
crn:prep
+++ crn!:factor compiled, 130 + 72 bytes
crn:factor
+++ crnprimp compiled, 22 + 32 bytes
crnprimp
+++ crnprep1 compiled, 39 + 36 bytes
crnprep1
+++ crn!:prin compiled, 24 + 36 bytes
crn:prin
+++ crnequiv compiled, 12 + 16 bytes
crnequivnilnilnilnilnilsimprepart
+++ simprepart compiled, 11 + 24 bytes
simprepart
+++ repartsq compiled, 37 + 24 bytes
repartsqsimpimpart
+++ simpimpart compiled, 11 + 24 bytes
simpimpart
+++ impartsq compiled, 38 + 28 bytes
impartsqsimpconj
+++ simpconj compiled, 4 + 16 bytes
simpconj
+++ conjsq compiled, 19 + 36 bytes
conjsqidomainp
+++ splitcomplex compiled, 51 + 56 bytes
splitcomplex
+++ expand!-imrepart compiled, 36 + 24 bytes
expand-imrepart
+++ expand!-imrepartpow compiled, 60 + 64 bytes
expand-imrepartpow
+++ mkrepart compiled, 29 + 36 bytes
mkrepart
+++ mkimpart compiled, 23 + 32 bytes
mkimpart
+++ take!-realpart compiled, 5 + 12 bytes
take-realpart
+++ repartf compiled, 74 + 52 bytes
repartf
+++ take!-impart compiled, 5 + 12 bytes
take-impart
+++ impartf compiled, 79 + 52 bytes
impartfnil
+++ realvalued compiled, 29 + 24 bytes
realvalued
+++ notrealvalued compiled, 27 + 24 bytes
notrealvaluednil
+++ realvaluedp compiled, 33 + 24 bytes
realvaluedp
+++ realvaluedlist compiled, 13 + 12 bytes
realvaluedlistnilnilnilnilreimsin
+++ reimsin compiled, 42 + 52 bytes
reimsinreimcos
+++ reimcos compiled, 45 + 56 bytes
reimcosreimexpt
+++ reimexpt compiled, 95 + 80 bytes
reimexptnilnilnilnilnilnil(:mod: :crn: :gi: :rn:):mod:modularnilnil*i2modmodcnv
modcnvmodminusp:modplus:modtimes:moddifference:modquotient:moddivide:modgcd:
modzerop:modonep:factormod:factormod:exptmod:modprep:(lambda (x) (prin2* (prepf
x))):mod:unitconv
+++ !*modular2f compiled, 44 + 24 bytes
*modular2f
+++ exptmod!: compiled, 5 + 16 bytes
exptmod:
+++ !:mod!:unitconv compiled, 51 + 44 bytes
:mod:unitconv
+++ !:mod!:units compiled, 42 + 20 bytes
:mod:units
+++ !*i2mod compiled, 4 + 16 bytes
*i2mod
+++ modcnv compiled, 13 + 32 bytes
modcnv
+++ modminusp!: compiled, 9 + 20 bytes
modminusp:
+++ modplus!: compiled, 5 + 16 bytes
modplus:
+++ modtimes!: compiled, 5 + 16 bytes
modtimes:
+++ moddifference!: compiled, 5 + 16 bytes
moddifference:
+++ moddivide!: compiled, 5 + 16 bytes
moddivide:
+++ modgcd!: compiled, 3 + 16 bytes
modgcd:
+++ modquotient!: compiled, 7 + 20 bytes
modquotient:
+++ modzerop!: compiled, 4 + 12 bytes
modzerop:
+++ modonep!: compiled, 4 + 12 bytes
modonep:
+++ factormod!: compiled, 12 + 32 bytes
factormod:
+++ modprep!: compiled as link to cdr
modprep:nil
+++ setmod compiled, 53 + 52 bytes
setmodsetmodnilnilevalmod
+++ evalmod compiled, 75 + 56 bytes
evalmodmod-domainvalchk
+++ mod!-domainvalchk compiled, 19 + 24 bytes
mod-domainvalchk
+++ mod!-expt!-fract compiled, 134 + 72 bytes
mod-expt-fract
+++ mod!-error compiled, 7 + 20 bytes
mod-errornilnilnilnilnil((t (rmsubs) (setq *exp nil)) (nil (rmsubs) (setq *exp t
)))
+++ fac!-merge compiled, 11 + 12 bytes
fac-merge
+++ factorize compiled, 113 + 104 bytes
factorize
+++ facform2list compiled, 169 + 76 bytes
facform2list
+++ facform2list2 compiled, 126 + 48 bytes
facform2list2
+++ old_factorize compiled, 11 + 24 bytes
old_factorizenil
+++ pairlist2list compiled, 39 + 16 bytes
pairlist2list
+++ fctrf compiled, 201 + 148 bytes
fctrf
+++ fctrf1 compiled, 125 + 72 bytes
fctrf1
+++ factorize!-form!-recursion compiled as link to fctrf1
factorize-form-recursion
+++ factor!-prim!-f compiled, 120 + 64 bytes
factor-prim-f
+++ factor!-prim!-sqfree!-f compiled, 198 + 80 bytes
factor-prim-sqfree-f
+++ unifactor compiled, 107 + 56 bytes
unifactor
+++ distribute!.multiplicity compiled, 34 + 8 bytes
distribute.multiplicity
+++ factorf compiled, 199 + 92 bytes
factorf
+++ factor!-prim!-sqfree!-f!-1 compiled, 48 + 16 bytes
factor-prim-sqfree-f-1
+++ sqfrf compiled, 291 + 120 bytes
sqfrf
+++ square_free compiled, 55 + 32 bytes
square_freenil
+++ diff compiled, 48 + 24 bytes
diff
+++ diffp1 compiled, 22 + 20 bytes
diffp1nilnilnil
+++ homogp compiled, 51 + 20 bytes
homogp
+++ subs0 compiled, 20 + 16 bytes
subs0
+++ varss compiled, 16 + 12 bytes
varss
+++ rconstnm compiled, 40 + 20 bytes
rconstnm
+++ rconst1 compiled, 29 + 16 bytes
rconst1
+++ rconst compiled, 78 + 48 bytes
rconstnilnilnil
+++ setunion compiled, 22 + 8 bytes
setunion
+++ searchtm compiled, 11 + 12 bytes
searchtm
+++ searchpl compiled, 28 + 16 bytes
searchpl
+++ qsort compiled, 41 + 12 bytes
qsort
+++ mapins compiled, 19 + 12 bytes
mapins
+++ mkzl compiled, 16 + 20 bytes
mkzl
+++ sq2sstm compiled, 52 + 24 bytes
sq2sstm
+++ sq2sscfpl compiled, 26 + 16 bytes
sq2sscfpl
+++ sq2sspl compiled, 30 + 12 bytes
sq2sspl
+++ sdlist compiled, 59 + 8 bytes
sdlist
+++ univsdl2sq compiled, 35 + 8 bytes
univsdl2sq
+++ mapdel compiled, 18 + 12 bytes
mapdel
+++ mulvsdl2sq compiled, 81 + 20 bytes
mulvsdl2sq
+++ sdl2sq compiled, 10 + 20 bytes
sdl2sq
+++ termorder1 compiled, 46 + 20 bytes
termorder1
+++ listsum compiled, 24 + 12 bytes
listsum
+++ termorder compiled, 44 + 24 bytes
termorder
+++ lambda_rh5q1wxdb66b compiled, 6 + 12 bytes
+++ xxsort compiled, 4 + 16 bytes
xxsort
+++ lambda_6wz8qijdlm96 compiled, 6 + 12 bytes
+++ lxsort compiled, 4 + 16 bytes
lxsort
+++ delet compiled, 32 + 12 bytes
delet
+++ lx2xx compiled, 32 + 20 bytes
lx2xx
+++ lastnondomain compiled, 22 + 16 bytes
lastnondomain
+++ xx2lx compiled, 32 + 20 bytes
xx2lx
+++ sf2ss compiled, 26 + 28 bytes
sf2ss
+++ ss2sf compiled, 14 + 20 bytes
ss2sfnilnilnilnil
+++ prsqfrfacf compiled, 138 + 60 bytes
prsqfrfacf
+++ factor!-ordered!-sqfree!-prim!-f compiled, 171 + 80 bytes
factor-ordered-sqfree-prim-f
+++ downpower compiled, 7 + 12 bytes
downpower
+++ downpower1 compiled, 34 + 12 bytes
downpower1
+++ uppower compiled, 15 + 16 bytes
uppower
+++ uppower1 compiled, 33 + 12 bytes
uppower1
+++ uppower2 compiled, 50 + 12 bytes
uppower2
+++ univariatep compiled, 17 + 16 bytes
univariatep
+++ univariatep1 compiled, 34 + 8 bytes
univariatep1
+++ special!-case!-factor compiled, 31 + 40 bytes
special-case-factor
+++ degreegcd compiled, 42 + 16 bytes
degreegcd
+++ factor!-coeffs compiled, 4 + 12 bytes
factor-coeffsnilnilnilnilnil
+++ coeffs compiled, 82 + 16 bytes
coeffs
+++ shift!-pol compiled, 86 + 40 bytes
shift-pol
+++ quadraticf!* compiled, 90 + 64 bytes
quadraticf*
+++ quadraticf compiled, 67 + 32 bytes
quadraticf
+++ quadraticf1 compiled, 173 + 76 bytes
quadraticf1
+++ rootxf compiled, 257 + 84 bytes
rootxf
+++ mkrootf compiled, 36 + 44 bytes
mkrootf
+++ nrootn!* compiled, 30 + 32 bytes
nrootn*
+++ cubicf compiled, 130 + 76 bytes
cubicf
+++ powsubsf compiled, 24 + 28 bytes
powsubsf
+++ quarticf compiled, 574 + 132 bytes
quarticfnilnilnil
+++ linfacf compiled, 4 + 16 bytes
linfacf
+++ quadfacf compiled, 4 + 16 bytes
quadfacf
+++ trykrf compiled, 241 + 44 bytes
trykrf
+++ subuf compiled, 44 + 20 bytes
subuf
+++ adddm!* compiled, 9 + 12 bytes
adddm*
+++ multdm!* compiled, 8 + 12 bytes
multdm*
+++ dfactors compiled, 39 + 36 bytes
dfactors
+++ combinationtimes compiled, 35 + 20 bytes
combinationtimes
+++ putin compiled, 16 + 8 bytes
putin
+++ search4facf compiled, 29 + 12 bytes
search4facf
+++ tryfactorf compiled, 48 + 28 bytes
tryfactorf
+++ linethroughf compiled, 39 + 24 bytes
linethroughf
+++ quadthroughf compiled, 96 + 28 bytes
quadthroughfnilnilnilnil((t (rmsubs)) (nil (rmsubs)))subtrf
+++ rationalizesq compiled, 67 + 56 bytes
rationalizesq
+++ lowertowerp compiled, 74 + 24 bytes
lowertowerp
+++ lowertowerp1 compiled, 30 + 24 bytes
lowertowerp1
+++ exprsize compiled, 20 + 12 bytes
exprsize
+++ rationalizef compiled, 86 + 64 bytes
rationalizef
+++ conjquadratic compiled, 31 + 40 bytes
conjquadratic
+++ conjcubic compiled, 113 + 52 bytes
conjcubic
+++ conj2 compiled, 23 + 28 bytes
conj2
+++ conjquartic compiled, 195 + 60 bytes
conjquartic
+++ mkmain compiled, 9 + 20 bytes
mkmainnilnilnilnilnilnilnil(dfint allowdfint)nil(commutedf nocommutedf
simpnoncomdf)nil(expanddf)
+++ simpdf compiled, 167 + 80 bytes
simpdf
+++ d2int compiled, 40 + 24 bytes
d2intsimpdf
+++ prekernp compiled, 28 + 20 bytes
prekernp
+++ diffsq compiled, 21 + 28 bytes
diffsq
+++ difff compiled, 59 + 28 bytes
difff
+++ depl!* declared fluid
+++ diffp compiled, 593 + 180 bytes
diffp
+++ !*intflag!* declared fluid
+++ dfform_int compiled, 78 + 64 bytes
dfform_int
+++ not_df_p compiled, 26 + 20 bytes
not_df_p
+++ dfn_prop compiled, 22 + 36 bytes
dfn_prop
+++ find_sub_df compiled, 13 + 12 bytes
find_sub_df
+++ is_sub_df compiled, 70 + 20 bytes
is_sub_df
+++ dot_df_args compiled, 30 + 12 bytes
dot_df_args
+++ merge!-ind!-vars compiled, 24 + 24 bytes
merge-ind-vars
+++ derad!* compiled, 33 + 12 bytes
derad*
+++ derad compiled, 73 + 16 bytes
derad
+++ letdf compiled, 251 + 112 bytes
letdf
+++ frlp compiled, 15 + 12 bytes
frlp
+++ lpos compiled, 11 + 12 bytes
lposnilnilnilnil
+++ deg compiled, 19 + 32 bytes
deg
+++ tstpolyarg2 compiled, 56 + 32 bytes
tstpolyarg2
+++ numrdeg compiled, 42 + 32 bytes
numrdeg
+++ lcofeval compiled, 84 + 56 bytes
lcofevallcofeval
+++ lcof compiled, 57 + 40 bytes
lcof
+++ lpower compiled, 63 + 40 bytes
lpower
+++ lterm compiled, 60 + 40 bytes
lterm
+++ mainvar compiled, 23 + 20 bytes
mainvar
+++ sfchk compiled, 8 + 16 bytes
sfchk
+++ reduct compiled, 56 + 40 bytes
reduct
+++ tstpolyarg compiled, 17 + 28 bytes
tstpolyargnilnilnilnilnildecomposesf
+++ decomposesf compiled, 23 + 40 bytes
decomposesf
+++ decomposef1 compiled, 6 + 16 bytes
decomposef1
+++ decomposef2 compiled, 227 + 92 bytes
decomposef2
+++ decomposesfvars compiled, 33 + 8 bytes
decomposesfvars
+++ decomposesfuni0 compiled, 35 + 16 bytes
decomposesfuni0
+++ decomposesfuni compiled, 163 + 64 bytes
decomposesfuni
+++ decomposefctrf compiled, 32 + 24 bytes
decomposefctrf
+++ decomposefctrf1 compiled, 166 + 28 bytes
decomposefctrf1
+++ decomposebacksubstuni compiled, 157 + 68 bytes
decomposebacksubstuni
+++ decomposedf compiled, 44 + 24 bytes
decomposedf
+++ decomposeint compiled, 55 + 24 bytes
decomposeint
+++ decomposecoeff compiled, 12 + 20 bytes
decomposecoeff
+++ decomposecoeff1 compiled, 27 + 8 bytes
decomposecoeff1
+++ decomposetdg compiled, 32 + 16 bytes
decomposetdg
+++ decomposedegr compiled, 30 + 12 bytes
decomposedegr
+++ compose compiled, 17 + 16 bytes
compose
+++ decomposesfmulti compiled, 203 + 100 bytes
decomposesfmulti
+++ decomposesfmulti1 compiled, 468 + 84 bytes
decomposesfmulti1
+++ decomposelmon compiled, 19 + 12 bytes
decomposelmon
+++ decomposenormfac compiled, 27 + 32 bytes
decomposenormfac
+++ decomposecont compiled, 29 + 12 bytes
decomposecont
+++ decomposesign compiled, 20 + 20 bytes
decomposesign
+++ decomposesfmnorm compiled, 222 + 60 bytes
decomposesfmnorm
+++ decomposehomog compiled, 25 + 16 bytes
decomposehomog
+++ decomposehomog1 compiled, 103 + 24 bytes
decomposehomog1
+++ decomposegensym compiled, 11 + 16 bytes
decomposegensymnilnilnil
+++ interpol compiled, 184 + 64 bytes
interpolnilnilnilnilnilnilnil
+++ subs2q compiled, 29 + 20 bytes
subs2q
+++ subs2f compiled, 57 + 60 bytes
subs2f
+++ subs2f1 compiled, 288 + 100 bytes
subs2f1
+++ subs2p compiled, 40 + 32 bytes
subs2p
+++ raddsq compiled, 12 + 24 bytes
raddsq
+++ mtchp compiled, 61 + 40 bytes
mtchp
+++ mtchp1 compiled, 81 + 32 bytes
mtchp1
+++ powmtch compiled, 29 + 8 bytes
powmtch
+++ mchk!* compiled, 25 + 24 bytes
mchk*nilnilnilnilnil
+++ subs3q compiled, 16 + 20 bytes
subs3q
+++ subs3f compiled, 6 + 20 bytes
subs3f
+++ subs3f1 compiled, 89 + 44 bytes
subs3f1
+++ subs3t compiled, 255 + 92 bytes
subs3t
+++ sizchk compiled, 24 + 12 bytes
sizchk
+++ mtchk compiled, 113 + 28 bytes
mtchk
+++ nocp compiled, 13 + 12 bytes
nocpnilnilnil
+++ subs4q compiled, 85 + 44 bytes
subs4qnilnilnilnil
+++ hornersq compiled, 37 + 40 bytes
hornersq
+++ hornerf compiled, 20 + 32 bytes
hornerf
+++ hornerf1 compiled, 160 + 36 bytes
hornerf1hornerfnilnil
nil
nilalgnil(cons nil nil)(eval_mode cardno* fortwidth* high_pow low_pow
root_multiplicities)nilnilnilnil
+++ forminput compiled, 30 + 36 bytes
forminputforminput
+++ formws compiled, 31 + 40 bytes
formwsformwsnilnilnilnilniltttsymbolicttttttt((*))(subfg* *sub2 tstack* fname*
outl*)02000t0t0
+++ mkid compiled, 41 + 24 bytes
mkidnil
+++ multiple!-result compiled, 338 + 160 bytes
multiple-result
+++ fillin compiled, 7 + 12 bytes
fillin
+++ fillin1 compiled, 35 + 16 bytes
fillin1
*** local variable pline* in procedure msgpri not used 
+++ msgpri compiled, 116 + 76 bytes
msgpri
+++ errach compiled, 19 + 52 bytes
errach
+++ errpri1 compiled, 10 + 24 bytes
errpri1
+++ errpri2 compiled, 10 + 20 bytes
errpri2
+++ redmsg compiled, 37 + 44 bytes
redmsg
+++ typerr redefined
+++ typerr compiled, 52 + 44 bytes
typerrnilnilnil(exp factor fort gcd intstr mcd nat numval rationalize reduced
val)nilnilnilnilnil0
+++ atomlis compiled, 14 + 8 bytes
atomlis
+++ carx compiled, 14 + 24 bytes
carx
+++ delasc compiled, 24 + 8 bytes
delasc
+++ eqexpr compiled, 22 + 16 bytes
eqexprnil
*** evenp not defined (LOSE flag) 
nilnil
*** lengthc not defined (LOSE flag) 
nil
+++ makearbcomplex compiled, 11 + 20 bytes
makearbcomplex
+++ mapcons compiled, 34 + 8 bytes
mapcons
+++ mappend compiled, 36 + 8 bytes
mappend
+++ nlist compiled, 16 + 16 bytes
nlist
+++ nth compiled, 4 + 12 bytes
nth
+++ pnth compiled, 19 + 28 bytes
pnth
+++ permp compiled, 25 + 16 bytes
permp
+++ permutations compiled, 52 + 16 bytes
permutations
+++ posintegerp compiled, 10 + 12 bytes
posintegerp
+++ remove compiled, 25 + 16 bytes
remove
+++ repasc compiled, 39 + 28 bytes
repasc
+++ repeats compiled, 23 + 12 bytes
repeats
+++ revpr compiled, 4 + 8 bytes
revpr
+++ smember compiled, 18 + 12 bytes
smember
+++ smemql compiled, 23 + 12 bytes
smemql
+++ smemqlp compiled, 27 + 12 bytes
smemqlp
*** spaces not defined (LOSE flag) 
nil
*** subla not defined (LOSE flag) 
nil
+++ xnp compiled, 14 + 8 bytes
xnpnilnilnil
*** iplus2 not defined (LOSE flag) 
nil
*** itimes2 not defined (LOSE flag) 
nil
*** isub1 not defined (LOSE flag) 
nil
*** iadd1 not defined (LOSE flag) 
nilnil
*** iminus not defined (LOSE flag) 
nil
*** idifference not defined (LOSE flag) 
nil
*** iquotient not defined (LOSE flag) 
nil
*** iremainder not defined (LOSE flag) 
nil
*** igreaterp not defined (LOSE flag) 
nil
*** ilessp not defined (LOSE flag) 
nil
*** iminusp not defined (LOSE flag) 
niliequalnilnilnilnilnilnilnilnilnilnilnilnilnilnilnilnil(idifference)(iminus)(
iminus)nilnilnil
*** gcdn not defined (LOSE flag) 
nilnilnilnilnilnil
+++ set!-general!-modulus compiled, 29 + 28 bytes
set-general-modulus
+++ general!-modular!-plus compiled, 13 + 12 bytes
general-modular-plus
+++ general!-modular!-difference compiled, 12 + 12 bytes
general-modular-difference
+++ general!-modular!-number compiled, 13 + 12 bytes
general-modular-number
+++ general!-modular!-times compiled, 15 + 12 bytes
general-modular-times
+++ general!-modular!-reciprocal compiled, 25 + 28 bytes
general-modular-reciprocal
+++ general!-modular!-quotient compiled, 6 + 16 bytes
general-modular-quotient
+++ general!-modular!-minus compiled, 8 + 16 bytes
general-modular-minus
+++ general!-reciprocal!-by!-gcd compiled, 46 + 36 bytes
general-reciprocal-by-gcd
+++ reverse!-num compiled, 29 + 20 bytes
reverse-numnil[nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil]841221061419513311715
+++ reverse!-num1 compiled, 81 + 32 bytes
reverse-num1nil(reverse-num)1simpiden
+++ rnreverse!-num!* compiled, 19 + 24 bytes
rnreverse-num*simpreverse-num
+++ simpreverse!-num compiled, 28 + 36 bytes
simpreverse-num
+++ general!-modular!-expt compiled, 93 + 52 bytes
general-modular-exptnilnilnilnilnilnil[nil nil nil nil nil nil nil nil nil nil
nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil nil nil nil]1000000001.0e-8nil
+++ random_new_seed compiled, 147 + 60 bytes
random_new_seed
+++ next!-random!-number compiled, 50 + 32 bytes
next-random-number
+++ random compiled, 76 + 32 bytes
randomnilnilnilnilnilnil
+++ set!-modulus compiled as link to set-general-modulus
set-modulus
*** set-small-modulus not defined (LOSE flag) 
nil
*** modular-plus not defined (LOSE flag) 
nil
*** modular-difference not defined (LOSE flag) 
nil
*** modular-number not defined (LOSE flag) 
nil
*** modular-times not defined (LOSE flag) 
nil
*** modular-reciprocal not defined (LOSE flag) 
nil
+++ reciprocal!-by!-gcd compiled, 49 + 36 bytes
reciprocal-by-gcd
*** modular-quotient not defined (LOSE flag) 
nil
*** modular-minus not defined (LOSE flag) 
nil
*** modular-expt not defined (LOSE flag) 
nilnilnilnilnilnilnilnil1040nil(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59
61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167
173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277
281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401
409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523
541 547 557 563 569 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653
659 661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797
809 811 821 823 827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937
941 947 953 967 971 977 983 991 997 1009 1013 1019 1021 1031 1033 1039 1049 1051
1061 1063 1069 1087 1091 1093 1097 1103 1109 1117 1123 1129 1151 1153 1163 1171
1181 1187 1193 1201 1213 1217 1223 1229 1231 1237 1249 1259 1277 1279 1283 1289
1291 1297 1301 1303 1307 1319 1321 1327 1361 1367 1373 1381 1399 1409 1423 1427
1429 1433 1439 1447 1451 1453 1459 1471 1481 1483 1487 1489 1493 1499 1511 1523
1531 1543 1549 1553 1559 1567 1571 1579 1583 1597 1601 1607 1609 1613 1619 1621
1627 1637 1657 1663 1667 1669 1693 1697 1699 1709 1721 1723 1733 1741 1747 1753
1759 1777 1783 1787 1789 1801 1811 1823 1831 1847 1861 1867 1871 1873 1877 1879
1889 1901 1907 1913 1931 1933 1949 1951 1973 1979 1987 1993 1997 1999 2003 2011
2017 2027 2029 2039 2053 2063 2069 2081 2083 2087 2089 2099 2111 2113 2129 2131
2137 2141 2143 2153 2161 2179 2203 2207 2213 2221 2237 2239 2243 2251 2267 2269
2273 2281 2287 2293 2297 2309 2311 2333 2339 2341 2347 2351 2357 2371 2377 2381
2383 2389 2393 2399 2411 2417 2423 2437 2441 2447 2459 2467 2473 2477 2503 2521
2531 2539 2543 2549 2551 2557 2579 2591 2593 2609 2617 2621 2633 2647 2657 2659
2663 2671 2677 2683 2687 2689 2693 2699 2707 2711 2713 2719 2729 2731 2741 2749
2753 2767 2777 2789 2791 2797 2801 2803 2819 2833 2837 2843 2851 2857 2861 2879
2887 2897 2903 2909 2917 2927 2939 2953 2957 2963 2969 2971 2999 3001 3011 3019
3023 3037 3041 3049 3061 3067 3079 3083 3089 3109 3119 3121 3137 3163 3167 3169
3181 3187 3191 3203 3209 3217 3221 3229 3251 3253 3257 3259 3271 3299 3301 3307
3313 3319 3323 3329 3331 3343 3347 3359 3361 3371 3373 3389 3391 3407 3413 3433
3449 3457 3461 3463 3467 3469 3491 3499 3511 3517 3527 3529 3533 3539 3541 3547
3557 3559 3571)357112752041
+++ add!-factor compiled, 33 + 12 bytes
add-factor
+++ zfactor compiled, 4 + 16 bytes
zfactor
+++ zfactor1 compiled, 104 + 36 bytes
zfactor1
+++ mcfactor!* compiled, 85 + 44 bytes
mcfactor*
+++ mcfactor compiled, 152 + 24 bytes
mcfactor
+++ primep compiled, 71 + 48 bytes
primepnil
+++ internal!-primep compiled, 11 + 20 bytes
internal-primep
+++ small!-primep compiled, 115 + 36 bytes
small-primep
+++ general!-primep compiled, 116 + 48 bytes
general-primep
+++ nextprime compiled, 61 + 48 bytes
nextprimenextprime
+++ nrootnn compiled, 175 + 44 bytes
nrootnnnilnilnil
*** sort not defined (LOSE flag) 
nil
*** stable-sort not defined (LOSE flag) 
nil
*** stable-sortip not defined (LOSE flag) 
nil
+++ idsort compiled, 4 + 16 bytes
idsort
+++ idcompare compiled, 10 + 12 bytes
idcompare
+++ idcomp1 compiled, 22 + 12 bytes
idcomp1
+++ lesspcar compiled, 4 + 8 bytes
lesspcar
+++ lesspcdr compiled, 4 + 8 bytes
lesspcdr
+++ lessppair compiled, 12 + 8 bytes
lessppair
+++ greaterpcdr compiled, 4 + 8 bytes
greaterpcdr
+++ lesspcdadr compiled, 6 + 8 bytes
lesspcdadr
+++ lesspdeg compiled, 19 + 12 bytes
lesspdeg
+++ ordopcar compiled, 4 + 12 bytes
ordopcar
+++ orderfactors compiled, 12 + 12 bytes
orderfactors
+++ sort!-factors compiled, 4 + 16 bytes
sort-factorsnilnilnilnilnilnil
+++ reval compiled, 4 + 16 bytes
reval
+++ aeval compiled, 4 + 12 bytes
aeval
+++ aeval!* compiled, 10 + 20 bytes
aeval*
+++ reval1 compiled, 288 + 148 bytes
reval1nil
+++ rmmbreval compiled, 164 + 64 bytes
rmmbreval
+++ remember compiled, 49 + 44 bytes
rememberrlis
+++ recursiveerror compiled, 9 + 20 bytes
recursiveerrorcar
+++ opfneval compiled, 148 + 36 bytes
opfnevalnil
+++ reval2 compiled, 24 + 32 bytes
reval2
+++ getrtype compiled, 97 + 52 bytes
getrtype
*** local variable u in procedure getrtype1 not used 
+++ getrtype1 compiled, 1 + 8 bytes
getrtype1
+++ getrtype2 compiled, 39 + 28 bytes
getrtype2nil
+++ rtypecar compiled, 19 + 20 bytes
rtypecar(rtypecar)nil(quotient times *sq)
+++ getrtypecar compiled, 3 + 12 bytes
getrtypecar
+++ getrtypeor compiled, 11 + 12 bytes
getrtypeor
+++ !*eqn2a compiled, 43 + 32 bytes
*eqn2a
+++ prepsqyy compiled, 9 + 16 bytes
prepsqyy
+++ getelv compiled, 40 + 16 bytes
getelv
+++ setelv compiled, 41 + 16 bytes
setelv
+++ reval_without_mod compiled, 15 + 24 bytes
reval_without_mod
+++ revlis compiled, 32 + 12 bytes
revlis
+++ revop1 compiled, 8 + 16 bytes
revop1
+++ mk!*sq compiled, 44 + 40 bytes
mk*sq
+++ !*sq_9w90xflmdime compiled, 4 + 12 bytes
*sq
+++ expchk compiled, 6 + 16 bytes
expchk
+++ lengthreval compiled, 79 + 72 bytes
lengthrevallengthreval
+++ yetunknowntypeeval compiled, 5 + 16 bytes
yetunknowntypeeval
+++ eval!-yetunknowntypeexpr compiled, 82 + 36 bytes
eval-yetunknowntypeexpryetunknowntypeevalnilnilnil
+++ evalequal compiled, 30 + 20 bytes
evalequalevalequalquoteequation
*** local variable u in procedure quoteequation not used 
+++ quoteequation compiled, 2 + 12 bytes
quoteequation
+++ evalgreaterp compiled, 36 + 40 bytes
evalgreaterpevalgreaterp
+++ evalgeq compiled, 4 + 16 bytes
evalgeqevalgeq
+++ evallessp compiled, 3 + 12 bytes
evallesspevallessp
+++ evalleq compiled, 4 + 16 bytes
evalleqevalleq
+++ evalneq compiled, 4 + 16 bytes
evalneqevalneq
+++ evalnumberp compiled, 32 + 20 bytes
evalnumberpevalnumberpnil
+++ ratnump compiled, 13 + 12 bytes
ratnumpnilnilnilnilnilnilnilnilt10000((t (rmsubs)))(cons nil nil)0(simpcount*
alglist* subfg* *sub2 tstack* fname* outl*)1000
+++ noncom compiled, 16 + 16 bytes
noncom
+++ noncom1 compiled, 8 + 20 bytes
noncom1rlis
+++ simp!* compiled, 106 + 92 bytes
simp*
+++ rationalizei compiled, 66 + 48 bytes
rationalizei
+++ subs2 compiled, 69 + 60 bytes
subs2
+++ simp compiled, 512 + 260 bytes
simp
+++ opmtchrevop compiled, 16 + 24 bytes
opmtchrevop
+++ simp_without_resimp compiled, 9 + 20 bytes
simp_without_resimpgetelvsetelv
+++ getinfix compiled, 8 + 12 bytes
getinfix
+++ !*ssave compiled, 17 + 24 bytes
*ssave
+++ numlis compiled, 13 + 8 bytes
numlis
+++ simpatom compiled, 149 + 112 bytes
simpatomnil
+++ mkop compiled, 41 + 52 bytes
mkop
+++ operatorp compiled, 5 + 16 bytes
operatorp
+++ simpcar compiled, 3 + 12 bytes
simpcarsimpcar
+++ share compiled, 100 + 64 bytes
share
*** boundp not defined (LOSE flag) 
nil
+++ setifngfl compiled, 11 + 16 bytes
setifngflnilnilnil
+++ simpexpon compiled, 4 + 16 bytes
simpexpon
+++ simpexpon1 compiled, 22 + 32 bytes
simpexpon1
+++ simpexpt compiled, 25 + 40 bytes
simpexpt
+++ simpexpt1 compiled, 281 + 128 bytes
simpexpt1
+++ simpexptfctr compiled, 33 + 24 bytes
simpexptfctr
+++ simpexpt11 compiled, 43 + 28 bytes
simpexpt11
+++ simpexpt2 compiled, 340 + 124 bytes
simpexpt2
+++ posnump compiled, 26 + 24 bytes
posnump
+++ posnumlistp compiled, 13 + 12 bytes
posnumlistpsimpexpt
+++ split!-sign compiled, 49 + 20 bytes
split-sign
+++ conv2gid compiled, 51 + 24 bytes
conv2gid
+++ conv2gi2 compiled, 116 + 40 bytes
conv2gi2
+++ simpx1 compiled, 497 + 140 bytes
simpx1
+++ expf compiled, 75 + 44 bytes
expf
+++ simprad compiled, 162 + 96 bytes
simprad
+++ radfa compiled, 50 + 28 bytes
radfa
+++ radfb compiled, 20 + 32 bytes
radfb
+++ mkrootlsq compiled, 16 + 36 bytes
mkrootlsq
+++ mkrootlsq1 compiled, 27 + 24 bytes
mkrootlsq1
+++ mkrootsq compiled, 105 + 76 bytes
mkrootsq
+++ mkrootsql compiled, 35 + 28 bytes
mkrootsql
+++ check!-radf!-sign compiled, 48 + 32 bytes
check-radf-sign
+++ radf compiled, 247 + 136 bytes
radf
+++ radf1 compiled, 59 + 36 bytes
radf1
+++ radd compiled, 72 + 44 bytes
radd
+++ iroot compiled, 12 + 12 bytes
iroot
+++ iroot!-ceiling compiled, 12 + 12 bytes
iroot-ceiling
+++ mkexpt compiled, 9 + 16 bytes
mkexpt
+++ nrootn compiled, 66 + 24 bytes
nrootn
+++ simpiden compiled, 340 + 120 bytes
simpidennil
+++ not_imag_num compiled, 73 + 76 bytes
not_imag_numnil
+++ domainvalchk compiled, 35 + 24 bytes
domainvalchk
+++ valuechk compiled, 67 + 52 bytes
valuechk
+++ znumrnil compiled, 9 + 16 bytes
znumrnil
+++ znumr compiled, 42 + 16 bytes
znumr
+++ opfchk!! compiled, 169 + 112 bytes
opfchk!
+++ intconv compiled, 14 + 20 bytes
intconv
+++ simpcr compiled, 37 + 40 bytes
simpcr
+++ simprd compiled, 14 + 24 bytes
simprd
+++ simplist compiled, 190 + 40 bytes
simplist
+++ mconv compiled, 5 + 20 bytes
mconv
+++ dmconv0 compiled, 15 + 24 bytes
dmconv0
+++ dmconv1 compiled, 57 + 20 bytes
dmconv1
+++ mconv1 compiled, 24 + 12 bytes
mconv1
+++ drnconv compiled, 24 + 12 bytes
drnconv
+++ simpabs compiled, 47 + 40 bytes
simpabs
+++ simpabs1 compiled, 183 + 72 bytes
simpabs1
+++ sign!-abs compiled, 26 + 24 bytes
sign-abs
+++ constant_exprp compiled, 66 + 52 bytes
constant_exprp
+++ constant_expr_listp compiled, 41 + 24 bytes
constant_expr_listp
+++ mkabsf0 compiled, 9 + 24 bytes
mkabsf0
+++ mkabsf1 compiled, 76 + 64 bytes
mkabsf1
+++ mkabsfd compiled, 33 + 48 bytes
mkabsfd
+++ positive!-sfp compiled, 43 + 36 bytes
positive-sfp
+++ positive!-powp compiled, 12 + 16 bytes
positive-powp
+++ split!-comfac!-part compiled, 6 + 16 bytes
split-comfac-part
+++ split!-comfac compiled, 71 + 32 bytes
split-comfacsimpabs
+++ simpdiff compiled, 10 + 24 bytes
simpdiffsimpdiff
+++ simpminus compiled, 6 + 24 bytes
simpminussimpminus
+++ simpplus compiled, 24 + 28 bytes
simpplussimpplus
+++ ckpreci!# compiled, 31 + 20 bytes
ckpreci#
+++ timesip compiled, 11 + 16 bytes
timesip
+++ ckprec2!# compiled, 46 + 24 bytes
ckprec2#nilmake:ibfi2bf:
+++ !?a2bf compiled, 19 + 20 bytes
?a2bf
+++ ckprec3!# compiled, 30 + 16 bytes
ckprec3#
+++ simpquot compiled, 102 + 80 bytes
simpquotsimpquot
+++ simprecip compiled, 15 + 36 bytes
simprecipsimprecip
+++ simpset compiled, 24 + 36 bytes
simpsetsimpset
+++ simpsqrt compiled, 80 + 80 bytes
simpsqrt
+++ xsimp compiled, 4 + 16 bytes
xsimp
+++ simptimes compiled, 70 + 36 bytes
simptimessimptimes
+++ resimp compiled, 9 + 20 bytes
resimp
+++ resimp1 compiled, 13 + 24 bytes
resimp1
+++ simp!*sq compiled, 11 + 16 bytes
simp*sqsimp*sqnilnilnilnilnil((t (rmsubs)) (nil (rmsubs)))
+++ exptchksq compiled, 28 + 24 bytes
exptchksq
+++ exptchk compiled, 22 + 20 bytes
exptchk
+++ exptchk0 compiled, 60 + 28 bytes
exptchk0
+++ expttermp compiled, 12 + 16 bytes
expttermp
+++ expttermp1 compiled, 24 + 12 bytes
expttermp1
+++ exptunwind compiled, 58 + 32 bytes
exptunwind
+++ mergex compiled, 96 + 36 bytes
mergex
+++ mergey compiled, 58 + 44 bytes
mergey
+++ intcoeff compiled, 26 + 12 bytes
intcoeff
+++ meldx compiled, 34 + 20 bytes
meldx
+++ meldx0 compiled, 22 + 12 bytes
meldx0
+++ meldx1 compiled, 26 + 12 bytes
meldx1nilnilnilnilnilnilnil
+++ simplog compiled, 47 + 56 bytes
simplogsimplognil((nil (rmsubs)) (t (rmsubs)))((nil (rmsubs)) (t (rmsubs)))
+++ simplogi compiled, 159 + 96 bytes
simplogi
+++ one_complexlist compiled, 25 + 20 bytes
one_complexlist
+++ multsq!* compiled, 8 + 20 bytes
multsq*
+++ simplogsq compiled, 56 + 60 bytes
simplogsq
+++ simplog2 compiled, 98 + 72 bytes
simplog2
+++ simplogn compiled, 52 + 36 bytes
simplogn
+++ mergeminus compiled, 35 + 16 bytes
mergeminus
+++ formlog compiled, 11 + 20 bytes
formlog
+++ formlogterm compiled, 81 + 52 bytes
formlogterm
+++ formlog2 compiled, 11 + 24 bytes
formlog2nilnilnilnilnilnil
+++ clogsq!* compiled, 30 + 52 bytes
clogsq*
+++ logsort compiled, 28 + 48 bytes
logsort
+++ comblog compiled, 61 + 40 bytes
comblog
+++ clogsq compiled, 8 + 12 bytes
clogsq
+++ clogf compiled, 48 + 32 bytes
clogf
+++ clogf1 compiled, 31 + 28 bytes
clogf1
+++ clogf2 compiled, 324 + 80 bytes
clogf2
+++ logarg compiled, 9 + 16 bytes
logarg
+++ coefgcd compiled, 20 + 12 bytes
coefgcdnilnilnilnil
+++ subeval compiled, 41 + 48 bytes
subeval
+++ subeval0 compiled, 157 + 76 bytes
subeval0
+++ subeval1 compiled, 62 + 60 bytes
subeval1subeval
+++ subsq compiled, 28 + 32 bytes
subsq
+++ subs2!* compiled, 10 + 20 bytes
subs2*
+++ subf compiled, 137 + 68 bytes
subf
+++ noncomexpf compiled, 25 + 16 bytes
noncomexpf
+++ subf1 compiled, 462 + 128 bytes
subf1
+++ wtchk compiled, 30 + 32 bytes
wtchk
+++ subsublis compiled, 146 + 40 bytes
subsublis
+++ subsubf compiled, 152 + 48 bytes
subsubf
+++ listsub compiled, 40 + 16 bytes
listsublistsubsubsubfsubsubfnilnilnilnil
+++ ordad compiled, 33 + 12 bytes
ordad
+++ ordn compiled, 22 + 16 bytes
ordn
+++ ord2 compiled, 10 + 12 bytes
ord2
*** ordp not defined (LOSE flag) 
nil
+++ ordpl compiled, 23 + 16 bytes
ordpl
+++ ordpv compiled, 16 + 16 bytes
ordpv
+++ ordpv1 compiled, 37 + 12 bytes
ordpv1
+++ ordop compiled, 23 + 20 bytes
ordop
+++ ordpp compiled, 35 + 20 bytes
ordpp
+++ ordpa compiled, 74 + 24 bytes
ordpanilnilnilnilnilnilnil(let match clear saveas such)nilnil
+++ forallstat compiled, 60 + 60 bytes
forallstat
+++ forall compiled, 61 + 36 bytes
forall
+++ arbstat compiled, 8 + 32 bytes
arbstatarbstat
+++ newvar compiled, 23 + 24 bytes
newvar
+++ formforall compiled, 71 + 60 bytes
formforall
+++ def compiled, 50 + 48 bytes
defrlis(forall)(forall)nil
+++ formlet1 compiled, 114 + 32 bytes
formlet1
+++ requote compiled, 15 + 20 bytes
requote
+++ requote1 compiled, 52 + 20 bytes
requote1
+++ !*s2arg compiled, 51 + 24 bytes
*s2argformletformclearformmatch
+++ formclear compiled, 9 + 16 bytes
formclear
+++ formclear1 compiled, 63 + 24 bytes
formclear1
+++ formlet compiled, 9 + 16 bytes
formlet
+++ formmatch compiled, 9 + 16 bytes
formmatch
+++ let compiled as link to let0
let
+++ let0 compiled, 9 + 20 bytes
let0
+++ let00 compiled, 23 + 36 bytes
let00
+++ let1 compiled, 109 + 80 bytes
let1
+++ revalruletst compiled, 14 + 24 bytes
revalruletst
+++ let2 compiled, 168 + 96 bytes
let2
+++ let3 compiled, 125 + 52 bytes
let3
+++ letscalar compiled, 249 + 168 bytes
letscalar
+++ letexprn compiled, 322 + 132 bytes
letexprnnil
+++ clearrules compiled, 10 + 20 bytes
clearrulesnil
+++ rule!-list compiled, 128 + 84 bytes
rule-list
+++ rule!* compiled, 111 + 64 bytes
rule*
+++ rule compiled, 127 + 64 bytes
ruleniltildepri
+++ tildepri compiled, 6 + 16 bytes
tildeprinilnilnil
+++ equalreplaceby compiled, 4 + 12 bytes
equalreplacebyequalreplacebynilnil
+++ formreplaceby compiled, 26 + 24 bytes
formreplacebyformreplacebynilnil
+++ formwhen compiled, 24 + 28 bytes
formwhenformwhennilevalwhereexp
+++ evalwhereexp compiled, 17 + 28 bytes
evalwhereexpnil
+++ evalletsub compiled, 15 + 32 bytes
evalletsub
+++ evalletsub2 compiled, 17 + 24 bytes
evalletsub2
+++ set_rules compiled, 88 + 56 bytes
set_rules
+++ restore_rules compiled, 99 + 56 bytes
restore_rules
+++ restore_props compiled, 32 + 16 bytes
restore_props
+++ resimpcar compiled, 3 + 12 bytes
resimpcar
+++ validrule compiled, 9 + 12 bytes
validrule
+++ validrule1 compiled, 56 + 20 bytes
validrule1
+++ remove!-free!-vars!* compiled, 11 + 24 bytes
remove-free-vars*
+++ remove!-free!-vars compiled, 98 + 52 bytes
remove-free-vars
+++ remove!-free!-vars!-l compiled, 25 + 20 bytes
remove-free-vars-l
+++ get!-free!-form compiled, 49 + 32 bytes
get-free-form
+++ term!-split compiled, 25 + 12 bytes
term-split
+++ tpowadd compiled, 19 + 8 bytes
tpowadd
+++ frvarsof compiled, 30 + 12 bytes
frvarsof
+++ simp0 compiled, 73 + 64 bytes
simp0nil
+++ let!-prepf compiled, 45 + 16 bytes
let-prepf
+++ match compiled, 9 + 20 bytes
match
+++ match00 compiled, 29 + 24 bytes
match00
+++ clear compiled, 24 + 40 bytes
clear
+++ clear1 compiled, 105 + 52 bytes
clear1
+++ typelet compiled, 191 + 84 bytes
typelet
+++ setk compiled, 34 + 28 bytes
setk
+++ setk0 compiled, 79 + 44 bytes
setk0
+++ setk1 compiled, 185 + 92 bytes
setk1
+++ put!-avalue compiled, 51 + 48 bytes
put-avalue
+++ sq_member compiled, 10 + 12 bytes
sq_member
+++ sf_member compiled, 29 + 12 bytes
sf_member
+++ mvar_member compiled, 16 + 12 bytes
mvar_member
+++ arglist_member compiled, 17 + 12 bytes
arglist_member
+++ put!-kvalue compiled, 31 + 36 bytes
put-kvalue
+++ klistt compiled, 17 + 20 bytes
klistt
+++ kernlp compiled, 15 + 8 bytes
kernlp
+++ xadd compiled, 75 + 20 bytes
xadd
+++ updoldrules compiled, 75 + 32 bytes
updoldrules
+++ xadd!* compiled, 120 + 44 bytes
xadd*
+++ powlisp compiled, 20 + 12 bytes
powlisp
+++ rsubla compiled, 25 + 12 bytes
rsublanilnilnilnilnilt
+++ equalreval compiled, 28 + 24 bytes
equalrevalequalrevalquoteequationeqnerr
+++ eqnerr compiled, 4 + 16 bytes
eqnerrevaleqn
+++ evaleqn compiled, 184 + 68 bytes
evaleqn
+++ evaleqn1 compiled, 27 + 20 bytes
evaleqn1
+++ lhs compiled, 4 + 16 bytes
lhs
+++ rhs compiled, 4 + 16 bytes
rhs
+++ lhs!-rhs compiled, 28 + 20 bytes
lhs-rhsnil
+++ eqnsub compiled, 61 + 24 bytes
eqnsubeqnsubeqnlength
+++ eqnlength compiled, 3 + 8 bytes
eqnlengthnilnilnilnilnil(t)
+++ rmsubs compiled, 11 + 20 bytes
rmsubsnilnilnilnil
+++ formopr compiled, 21 + 32 bytes
formoprformopr
+++ operator compiled, 15 + 12 bytes
operatornil
+++ remopr compiled, 66 + 60 bytes
remoprnil
+++ den compiled, 7 + 20 bytes
den
+++ num compiled, 7 + 20 bytes
numnilnilformsaveas
+++ formsaveas compiled, 9 + 16 bytes
formsaveas
+++ saveas compiled, 69 + 40 bytes
saveasnilnilnilnilnil5nilnilnilnilnil
+++ emtch compiled, 10 + 12 bytes
emtch
+++ opmtch compiled, 112 + 32 bytes
opmtch
+++ mcharg compiled, 70 + 32 bytes
mcharg
+++ mcharg1 compiled, 86 + 52 bytes
mcharg1
+++ reform!-minus compiled, 41 + 16 bytes
reform-minus
+++ reform!-minus2 compiled, 51 + 20 bytes
reform-minus2
+++ mchcomb compiled, 176 + 48 bytes
mchcomb
+++ mchcomb2 compiled, 82 + 16 bytes
mchcomb2
+++ comb compiled, 48 + 24 bytes
comb
+++ mcharg2 compiled, 78 + 24 bytes
mcharg2
+++ msappend compiled, 42 + 8 bytes
msappend
+++ updtemplate compiled, 71 + 12 bytes
updtemplate
+++ reval!-without compiled, 33 + 36 bytes
reval-without
+++ mchk compiled, 173 + 48 bytes
mchk
+++ mchkopt compiled, 12 + 16 bytes
mchkopt
+++ mchkopt1 compiled, 108 + 16 bytes
mchkopt1(0 0)(1 1)((rule_error fraction with optional numerator) 1)((rule_error
exponential with optional base) 1)
+++ rule_error compiled, 7 + 20 bytes
rule_errornil
+++ mchkminus compiled, 69 + 48 bytes
mchkminus
+++ mkbin compiled, 16 + 8 bytes
mkbin
+++ mtp compiled, 22 + 16 bytes
mtp
+++ mchsarg compiled, 114 + 40 bytes
mchsarg
+++ noncomfree compiled, 22 + 16 bytes
noncomfree
+++ noncomperm compiled, 66 + 24 bytes
noncomperm
+++ noncomdel compiled, 11 + 16 bytes
noncomdel
+++ noncomdel1 compiled, 30 + 20 bytes
noncomdel1
+++ noncomp!* compiled, 14 + 16 bytes
noncomp*nilnilnilnilnilnil
+++ prepsqxx compiled, 4 + 16 bytes
prepsqxx
+++ negnumberchk compiled, 15 + 12 bytes
negnumberchk
+++ prepsqx compiled, 8 + 20 bytes
prepsqx
+++ prepsq compiled, 9 + 20 bytes
prepsq
+++ sqform compiled, 17 + 16 bytes
sqform
+++ prepf compiled, 11 + 20 bytes
prepf
+++ prepf1 compiled, 39 + 28 bytes
prepf1
+++ prepd compiled, 39 + 32 bytes
prepd
+++ prepd1 compiled, 9 + 12 bytes
prepd1
+++ exchk compiled, 7 + 12 bytes
exchk
+++ exchk1 compiled, 127 + 40 bytes
exchk1
+++ exchk2 compiled, 59 + 36 bytes
exchk2
+++ assoc2 compiled, 14 + 8 bytes
assoc2
+++ replus compiled, 17 + 20 bytes
replus
+++ unplus compiled, 39 + 12 bytes
unplus
+++ retimes compiled, 30 + 32 bytes
retimes
+++ retimes1 compiled, 73 + 32 bytes
retimes1
+++ sqchk compiled, 19 + 16 bytes
sqchkprepcadrprepexpt
+++ prepcadr compiled, 4 + 12 bytes
prepcadr
+++ prepexpt compiled, 8 + 12 bytes
prepexptnilnilnilnilnilniltt
+++ factor compiled, 6 + 20 bytes
factor
+++ factor1 compiled, 105 + 44 bytes
factor1
+++ remfac compiled, 6 + 16 bytes
remfacnil
+++ order compiled, 40 + 24 bytes
ordernil
+++ up compiled, 6 + 20 bytes
up
+++ down compiled, 6 + 20 bytes
down
+++ formop compiled, 32 + 16 bytes
formop
+++ multop compiled, 16 + 28 bytes
multoplcx
+++ quotof compiled, 133 + 48 bytes
quotof
+++ quotofd compiled, 30 + 16 bytes
quotofd
+++ quotodd compiled, 11 + 20 bytes
quotodd
+++ lowest!-terms compiled, 65 + 36 bytes
lowest-terms
+++ dcombine!* compiled, 14 + 12 bytes
dcombine*
+++ ckrn compiled, 29 + 40 bytes
ckrn
+++ ckrn1 compiled, 50 + 16 bytes
ckrn1
+++ gck2 compiled, 111 + 40 bytes
gck2
+++ cdarx compiled, 5 + 16 bytes
cdarx
+++ negf!* compiled, 11 + 24 bytes
negf*
+++ prepsq!* compiled, 235 + 96 bytes
prepsq*
+++ prepsq!*0 compiled, 27 + 24 bytes
prepsq*0
+++ prepsq!*1 compiled, 377 + 124 bytes
prepsq*1
+++ addfactors compiled, 29 + 28 bytes
addfactors
+++ rmplus compiled, 9 + 12 bytes
rmplus
+++ prepsq!*2 compiled, 8 + 20 bytes
prepsq*2
+++ ckrn!* compiled, 36 + 24 bytes
ckrn*
+++ mkkl compiled, 15 + 8 bytes
mkkl
+++ quotfm compiled, 9 + 24 bytes
quotfmnilnilnilnil
+++ depend compiled, 4 + 16 bytes
depend
+++ nodepend compiled, 5 + 16 bytes
nodependnil
+++ depend1 compiled, 73 + 32 bytes
depend1
+++ depends compiled, 92 + 36 bytes
depends
+++ ldepends compiled, 18 + 12 bytes
ldepends
+++ dependsl compiled, 13 + 12 bytes
dependsl
+++ freeof compiled, 13 + 20 bytes
freeofnilnil
+++ depend0 compiled, 95 + 28 bytes
depend0nilnilnilnilnilansnilnil
+++ structr compiled, 189 + 104 bytes
structrnil
+++ structr1 compiled, 195 + 44 bytes
structr1
+++ structf compiled, 85 + 40 bytes
structf
+++ structk compiled, 45 + 20 bytes
structk
+++ subchk1 compiled, 27 + 12 bytes
subchk1
+++ subchk2 compiled, 34 + 16 bytes
subchk2
+++ structvar compiled, 26 + 20 bytes
structvarnilnilnilnilnilnilnil
+++ coeffeval compiled, 38 + 40 bytes
coeffevalcoeffeval
+++ coeff1 compiled, 175 + 96 bytes
coeff1
+++ coeffn compiled, 129 + 80 bytes
coeffnnilnilnilnilnilnilnil
+++ weight compiled, 223 + 68 bytes
weight
+++ wtlevel compiled, 56 + 40 bytes
wtlevelnilnilnilnilnilnil
+++ linear compiled, 28 + 20 bytes
linearnil
+++ formlnr compiled, 209 + 84 bytes
formlnr
+++ formseparate compiled, 57 + 24 bytes
formseparate
+++ expt!-separate compiled, 25 + 24 bytes
expt-separate
+++ expt!-separate1 compiled, 33 + 24 bytes
expt-separate1
+++ formlntms compiled, 36 + 24 bytes
formlntms
+++ formlnquot compiled, 264 + 60 bytes
formlnquot
+++ formlnrecip compiled, 107 + 52 bytes
formlnrecip
+++ mktimes compiled, 9 + 12 bytes
mktimes
+++ reval!* compiled, 9 + 24 bytes
reval*nilnilnilnilnil(sqrt)
+++ mksqrt compiled, 33 + 56 bytes
mksqrtnil
+++ sign!-of compiled, 11 + 12 bytes
sign-of
+++ simp!-sign compiled, 52 + 60 bytes
simp-sign
+++ simp!-sign!-times compiled, 67 + 36 bytes
simp-sign-times
+++ simp!-sign!-plus compiled, 61 + 28 bytes
simp-sign-plusnil
+++ rd!-sign compiled, 89 + 84 bytes
rd-signnilnilsimp-sign(list (replaceby (sign (~ x)) (when (cond ((evalgreaterp (
aeval (quote x)) 0) 1) ((evallessp (aeval (quote x)) 0) (minus 1)) (t 0)) (and (
numberp x) (equal (impart x) 0)))) (replaceby (sign (minus (~ x))) (minus (sign
x))) (replaceby (sign (quotient (~ x) (~ y))) (when (times (sign x) (sign y)) (
and (neq y 1) (or (numberp (sign x)) (numberp (sign y)))))) (replaceby (sign (
expt (~ x) (~ n))) (when 1 (and (fixp (quotient n 2)) (symbolic (not *complex)))
)) (replaceby (sign (expt (~ x) (~ n))) (when (expt (sign x) n) (and (fixp n) (
numberp (sign x))))) (replaceby (sign (expt (~ x) (~ n))) (when (sign x) (and (
fixp n) (symbolic (not *complex))))) (replaceby (sign (sqrt (~ a))) (when 1 (
equal (sign a) 1))) (replaceby (sign (expt (~ a) (~ x))) (when 1 (and (equal (
sign a) 1) (equal (impart x) 0)))) (replaceby (sign (~ a)) (when (rd-sign a) (
rd-sign a))) (replaceby (expt (abs (~ x)) 2) (when (expt x 2) (symbolic (not
*precise)))))nilnilnilnilnilnilnilnil(acos asin atan acosh asinh atanh acot cos
sin tan sec sech csc csch cot acot coth acoth cosh sinh tanh asec acsc asech
acsch)nilnilnilnilnilnilnilnilnilt
+++ knowledge_about compiled, 69 + 60 bytes
knowledge_aboutnil
+++ trigquot compiled, 72 + 36 bytes
trigquotnilnilnilnilnilnilnil(list (replaceby (acos 1) 0) (replaceby (acos (
quotient (plus (sqrt 6) (sqrt 2)) 4)) (quotient pi 12)) (replaceby (acos (
quotient (sqrt 3) 2)) (quotient pi 6)) (replaceby (acos (quotient (sqrt 2) 2)) (
quotient pi 4)) (replaceby (acos (quotient 1 2)) (quotient pi 3)) (replaceby (
acos (quotient (plus (sqrt 6) (minus (sqrt 2))) 4)) (quotient (times 5 pi) 12))
(replaceby (acos 0) (quotient pi 2)) (replaceby (acos (quotient (plus (minus (
sqrt 6)) (sqrt 2)) 4)) (quotient (times 7 pi) 12)) (replaceby (acos (quotient (
plus (minus (sqrt 6)) (minus (sqrt 2))) 4)) (quotient (times 11 pi) 12)))nilnil(
list (replaceby (atan (quotient (plus (sqrt 3) (minus 1)) (plus (sqrt 3) 1))) (
quotient pi 12)) (replaceby (atan (quotient 1 (sqrt 3))) (quotient pi 6)) (
replaceby (atan 1) (quotient pi 4)) (replaceby (atan (sqrt 3)) (quotient pi 3))
(replaceby (atan (quotient (plus (sqrt 3) 1) (plus (sqrt 3) (minus 1)))) (
quotient (times 5 pi) 12)))nilnil(*sq ((((pi . 1) . 1)) . 1) t)0nilnilnilnilnil
nilnilnilnilnilnilnilnil(list (replaceby (sin (atan (~ u))) (quotient u (sqrt (
plus 1 (expt u 2))))) (replaceby (cos (atan (~ u))) (quotient 1 (sqrt (plus 1 (
expt u 2))))) (replaceby (sin (times 2 (atan (~ u)))) (times 2 (quotient u (plus
1 (expt u 2))))) (replaceby (cos (times 2 (atan (~ u)))) (quotient (difference 1
(expt u 2)) (plus 1 (expt u 2)))) (replaceby (sin (times (~ n) (atan (~ u)))) (
when (plus (times (sin (times (difference n 2) (atan u))) (quotient (difference
1 (expt u 2)) (plus 1 (expt u 2)))) (times (cos (times (difference n 2) (atan u)
)) 2 (quotient u (plus 1 (expt u 2))))) (and (fixp n) (greaterp n 2)))) (
replaceby (cos (times (~ n) (atan (~ u)))) (when (difference (times (cos (times
(difference n 2) (atan u))) (quotient (difference 1 (expt u 2)) (plus 1 (expt u
2)))) (times (sin (times (difference n 2) (atan u))) 2 (quotient u (plus 1 (expt
u 2))))) (and (fixp n) (greaterp n 2)))) (replaceby (sin (acos (~ u))) (sqrt (
difference 1 (expt u 2)))) (replaceby (cos (asin (~ u))) (sqrt (difference 1 (
expt u 2)))) (replaceby (sin (times 2 (acos (~ u)))) (times 2 u (sqrt (
difference 1 (expt u 2))))) (replaceby (cos (times 2 (acos (~ u)))) (difference
(times 2 (expt u 2)) 1)) (replaceby (sin (times 2 (asin (~ u)))) (times 2 u (
sqrt (difference 1 (expt u 2))))) (replaceby (cos (times 2 (asin (~ u)))) (
difference 1 (times 2 (expt u 2)))) (replaceby (sin (times (~ n) (acos (~ u))))
(when (plus (times (sin (times (difference n 2) (acos u))) (difference (times 2
(expt u 2)) 1)) (times (cos (times (difference n 2) (acos u))) 2 u (sqrt (
difference 1 (expt u 2))))) (and (fixp n) (greaterp n 2)))) (replaceby (cos (
times (~ n) (acos (~ u)))) (when (difference (times (cos (times (difference n 2)
(acos u))) (difference (times 2 (expt u 2)) 1)) (times (sin (times (difference n
2) (acos u))) 2 u (sqrt (difference 1 (expt u 2))))) (and (fixp n) (greaterp n 2
)))) (replaceby (sin (times (~ n) (asin (~ u)))) (when (plus (times (sin (times
(difference n 2) (asin u))) (difference 1 (times 2 (expt u 2)))) (times (cos (
times (difference n 2) (asin u))) 2 u (sqrt (difference 1 (expt u 2))))) (and (
fixp n) (greaterp n 2)))) (replaceby (cos (times (~ n) (asin (~ u)))) (when (
difference (times (cos (times (difference n 2) (asin u))) (difference 1 (times 2
(expt u 2)))) (times (sin (times (difference n 2) (asin u))) 2 u (sqrt (
difference 1 (expt u 2))))) (and (fixp n) (greaterp n 2)))))(list (replaceby (
sinh (atanh (~ u))) (quotient u (sqrt (difference 1 (expt u 2))))) (replaceby (
cosh (atanh (~ u))) (quotient 1 (sqrt (difference 1 (expt u 2))))) (replaceby (
sinh (times 2 (atanh (~ u)))) (times 2 (quotient u (difference 1 (expt u 2)))))
(replaceby (cosh (times 2 (atanh (~ u)))) (quotient (plus 1 (expt u 2)) (
difference 1 (expt u 2)))) (replaceby (sinh (times (~ n) (atanh (~ u)))) (when (
plus (times (sinh (times (difference n 2) (atanh u))) (quotient (plus 1 (expt u
2)) (difference 1 (expt u 2)))) (times (cosh (times (difference n 2) (atanh u)))
2 (quotient u (difference 1 (expt u 2))))) (and (fixp n) (greaterp n 2)))) (
replaceby (cosh (times (~ n) (atanh (~ u)))) (when (plus (times (cosh (times (
difference n 2) (atanh u))) (quotient (plus 1 (expt u 2)) (difference 1 (expt u
2)))) (times (sinh (times (difference n 2) (atanh u))) 2 (quotient u (difference
1 (expt u 2))))) (and (fixp n) (greaterp n 2)))) (replaceby (sinh (acosh (~ u)))
(sqrt (difference (expt u 2) 1))) (replaceby (cosh (asinh (~ u))) (sqrt (plus 1
(expt u 2)))) (replaceby (sinh (times 2 (acosh (~ u)))) (times 2 u (sqrt (
difference (expt u 2) 1)))) (replaceby (cosh (times 2 (acosh (~ u)))) (
difference (times 2 (expt u 2)) 1)) (replaceby (sinh (times 2 (asinh (~ u)))) (
times 2 u (sqrt (plus 1 (expt u 2))))) (replaceby (cosh (times 2 (asinh (~ u))))
(plus 1 (times 2 (expt u 2)))) (replaceby (sinh (times (~ n) (acosh (~ u)))) (
when (plus (times (sinh (times (difference n 2) (acosh u))) (difference (times 2
(expt u 2)) 1)) (times (cosh (times (difference n 2) (acosh u))) 2 u (sqrt (
difference (expt u 2) 1)))) (and (fixp n) (greaterp n 2)))) (replaceby (cosh (
times (~ n) (acosh (~ u)))) (when (plus (times (cosh (times (difference n 2) (
acosh u))) (difference (times 2 (expt u 2)) 1)) (times (sinh (times (difference
n 2) (acosh u))) 2 u (sqrt (difference (expt u 2) 1)))) (and (fixp n) (greaterp
n 2)))) (replaceby (sinh (times (~ n) (asinh (~ u)))) (when (plus (times (sinh (
times (difference n 2) (asinh u))) (plus 1 (times 2 (expt u 2)))) (times (cosh (
times (difference n 2) (asinh u))) 2 u (sqrt (plus 1 (expt u 2))))) (and (fixp n
) (greaterp n 2)))) (replaceby (cosh (times (~ n) (asinh (~ u)))) (when (plus (
times (cosh (times (difference n 2) (asinh u))) (plus 1 (times 2 (expt u 2)))) (
times (sinh (times (difference n 2) (asinh u))) 2 u (sqrt (plus 1 (expt u 2)))))
(and (fixp n) (greaterp n 2)))) (replaceby (atanh (~ x)) (when (times (acosh (
quotient (plus 1 (expt x 2)) (difference 1 (expt x 2)))) (quotient (sign x) 2))
(and (symbolic (not *complex)) (freeof (acosh (quotient (plus 1 (expt x 2)) (
difference 1 (expt x 2)))) acosh)))))nil(list (replaceby (sin (times i (quotient
(~ (~ x)) (~ (~ y))))) (when (times i (sinh (quotient x y))) (equal (impart y) 0
))) (replaceby (cos (times i (quotient (~ (~ x)) (~ (~ y))))) (when (cosh (
quotient x y)) (equal (impart y) 0))) (replaceby (sinh (times i (quotient (~ (~
x)) (~ (~ y))))) (when (times i (sin (quotient x y))) (equal (impart y) 0))) (
replaceby (cosh (times i (quotient (~ (~ x)) (~ (~ y))))) (when (cos (quotient x
y)) (equal (impart y) 0))) (replaceby (asin (times i (quotient (~ (~ x)) (~ (~ y
))))) (when (times i (asinh (quotient x y))) (equal (impart y) 0))) (replaceby (
atan (times i (quotient (~ (~ x)) (~ (~ y))))) (when (times i (atanh (quotient x
y))) (and (equal (impart y) 0) (not (and (equal x 1) (equal y 1)))))) (replaceby
(asinh (times i (quotient (~ (~ x)) (~ (~ y))))) (when (times i (asin (quotient
x y))) (equal (impart y) 0))) (replaceby (atanh (times i (quotient (~ (~ x)) (~
(~ y))))) (when (times i (atan (quotient x y))) (equal (impart y) 0))))nil
*** arbint declared operator 
nilnilnilnilnilnil
+++ showrules compiled, 71 + 56 bytes
showrules
+++ showruleskvalue compiled, 78 + 24 bytes
showruleskvalue
+++ showonerule compiled, 32 + 28 bytes
showonerule
+++ showrulesopmtch compiled, 50 + 16 bytes
showrulesopmtch
+++ showrulesdfn compiled, 9 + 16 bytes
showrulesdfn
+++ showrulesdfn1 compiled, 39 + 24 bytes
showrulesdfn1
+++ showrulesdfn1!* compiled, 142 + 36 bytes
showrulesdfn1*
+++ mkrule compiled, 24 + 24 bytes
mkrule
+++ strip!~ compiled, 55 + 16 bytes
strip~
+++ separate!~ compiled, 53 + 16 bytes
separate~
+++ showrulesdfn2 compiled, 73 + 24 bytes
showrulesdfn2
+++ showrules!*match compiled, 140 + 36 bytes
showrules*match
+++ showrulespowlis!* compiled, 62 + 20 bytes
showrulespowlis*
+++ showrulespowlis1!* compiled, 82 + 20 bytes
showrulespowlis1*
+++ showrulesasymplis!* compiled, 46 + 24 bytes
showrulesasymplis*
+++ showrulespowlis!*opr compiled, 85 + 24 bytes
showrulespowlis*opr
+++ showrulespowlis1!*opr compiled, 105 + 24 bytes
showrulespowlis1*opr
+++ showrulesasymplis!*opr compiled, 70 + 28 bytes
showrulesasymplis*opr
+++ selectletvars compiled, 22 + 16 bytes
selectletvars
+++ simpletsymbolic compiled, 67 + 32 bytes
simpletsymbolic
+++ needs!-lisp!-tag compiled, 36 + 28 bytes
needs-lisp-tag
+++ needs!-lisp!-tag1 compiled, 11 + 12 bytes
needs-lisp-tag1nil((evalequal . equal) (evalgreaterp . greaterp) (evallessp .
lessp) (evalgeq . geq) (evalleq . leq) (evalneq . neq) (evalnumberp . numberp))
+++ isboolfn compiled, 13 + 16 bytes
isboolfn
+++ arbvars compiled, 54 + 12 bytes
arbvarsnilnilnilnilnil
+++ unnest!-sqrt!-sqrt!* compiled, 122 + 56 bytes
unnest-sqrt-sqrt*
+++ unnest!-sqrt!-sqrt compiled, 40 + 36 bytes
unnest-sqrt-sqrt
+++ chkabs compiled, 18 + 24 bytes
chkabsnilnil(list (replaceby (expt (plus (~ a) (times (~ b) (expt (~ c) (
quotient 1 2)))) (quotient 1 2)) (when **w (setq **w (unnest-sqrt-sqrt a b c))))
(replaceby (expt (plus (~ a) (expt (~ c) (quotient 1 2))) (quotient 1 2)) (when
**w (setq **w (unnest-sqrt-sqrt a 1 c)))))nilnilnilnilsimpmax
+++ simpmax compiled, 8 + 20 bytes
simpmaxsimpmin
+++ simpmin compiled, 8 + 20 bytes
simpminnildifflist
+++ s_simpmaxmin compiled, 188 + 60 bytes
s_simpmaxmin
+++ !*trim compiled, 23 + 12 bytes
*trim
+++ flattenmaxmin compiled, 167 + 20 bytes
flattenmaxminnilnilnilnil
+++ nssimp compiled, 163 + 104 bytes
nssimp
+++ dsimp compiled, 275 + 128 bytes
dsimp
+++ dsimptimes compiled, 58 + 24 bytes
dsimptimes
+++ addns compiled, 48 + 16 bytes
addns
+++ getelx compiled, 16 + 28 bytes
getelxnilnilnilnil
+++ revalpart compiled, 213 + 64 bytes
revalpart
+++ parterr2 compiled, 13 + 24 bytes
parterr2revalpartnil
+++ revalsetpart compiled, 28 + 28 bytes
revalsetpart
+++ revalsetp1 compiled, 92 + 44 bytes
revalsetp1
+++ ssl compiled, 38 + 20 bytes
sslrtypepart
+++ rtypepart compiled, 7 + 16 bytes
rtypepartrevalsetpart
+++ arglength compiled, 23 + 32 bytes
arglengthnilnilpartlengthreval
+++ partlengthreval compiled, 28 + 40 bytes
partlengthrevalnilnilnilmap~mapmap-evalgetrtypecadr
+++ getrtypecadr compiled, 4 + 12 bytes
getrtypecadr
+++ lambda_xwwv19lu7y09 compiled, 1 + 8 bytes
+++ map!-eval compiled, 18 + 36 bytes
map-eval
+++ lambda_m0ew1rqnw52h compiled, 6 + 16 bytes
+++ !~map compiled, 14 + 28 bytes
~map
+++ map!-eval1 compiled, 309 + 64 bytes
map-eval1
+++ map!-eval2 compiled, 30 + 32 bytes
map-eval2
+++ map!-frvarsof compiled, 25 + 12 bytes
map-frvarsof
+++ lambda_xwwv19lu7y09 compiled, 1 + 8 bytes
+++ select!-eval compiled, 166 + 100 bytes
select-eval
+++ freequote compiled, 34 + 24 bytes
freequoteselect-eval2nilnil
nil
nilarithnilnilnilnilnilmt:ep:make:ibfi2bf:make:rdrdpfloat-bfprd2flfl2rdbfp:retag
*** rndpwr not defined (LOSE flag) 
nil
*** msd: not defined (LOSE flag) 
nil
*** SMACRO ashift redefined 
+++ ashift compiled, 25 + 16 bytes
ashift
*** SMACRO lshift redefined 
+++ lshift compiled as link to ash1
lshiftoddintppreci:divbf
*** timbf not defined (LOSE flag) 
nilbfminuspbfzpbfnzpbfloatrdfl2rdbfrd:forcebfcrrlcrimmake:crcrptagrltagimgfrl
gfimmkgfgfzeropnilnil(:rd: 0 . 0)(:rd: 1 . -1)(:rd: 1 . 0)(:rd: 3 . -1)(:rd: 2 .
0)(:rd: 3 . 0)(:rd: 5 . 0)(:rd: 5 . 1)(:rd: 15 . 2)(:rd: 45 . 2)(:rd: 1 . -2)(
:rd: 1 . -4)(:rd: 215 . -9)
+++ dn!:simp compiled, 60 + 52 bytes
dn:simpdn:simp
+++ dn!:prin compiled, 6 + 12 bytes
dn:prindn:prinnilnilnilnilnilnilnilnilnilnil105
+++ bflerrmsg compiled, 7 + 20 bytes
bflerrmsg
+++ bfzerop!: compiled, 5 + 12 bytes
bfzerop:
*** fl2bf not defined (LOSE flag) 
nil
+++ bfprin!: compiled as link to bfprin0
bfprin:
+++ divide!-by!-power!-of!-ten compiled, 44 + 44 bytes
divide-by-power-of-ten
+++ multiply!-by!-power!-of!-ten compiled, 45 + 40 bytes
multiply-by-power-of-tennil
+++ round!:dec compiled, 79 + 56 bytes
round:dec
+++ round!:dec1 compiled, 247 + 120 bytes
round:dec1
+++ bfprin0 compiled, 24 + 32 bytes
bfprin0
+++ bfprin0x compiled, 18 + 20 bytes
bfprin0x
+++ bfexplode0 compiled, 23 + 32 bytes
bfexplode0
+++ bfexplode0x compiled, 134 + 48 bytes
bfexplode0x
+++ bfprin!:lst compiled, 303 + 84 bytes
bfprin:lst
+++ smallcompress compiled, 36 + 28 bytes
smallcompress
+++ smallsplit compiled, 27 + 16 bytes
smallsplit
+++ scientific_notation compiled, 78 + 48 bytes
scientific_notationnil
+++ order!: compiled, 18 + 16 bytes
order:decprec:incprec:
+++ conv!:mt compiled, 75 + 32 bytes
conv:mt
+++ round!:mt compiled, 57 + 32 bytes
round:mt
+++ round!:ep compiled, 49 + 28 bytes
round:ep
+++ round!:last compiled, 45 + 20 bytes
round:last
+++ cut!:mt compiled, 50 + 28 bytes
cut:mt
+++ cut!:ep compiled, 42 + 24 bytes
cut:ep
+++ bftrim!: compiled, 8 + 24 bytes
bftrim:
+++ decimal2internal compiled, 28 + 24 bytes
decimal2internal
+++ read!:num compiled, 225 + 80 bytes
read:num
+++ abs!: compiled, 17 + 16 bytes
abs:
+++ minus!: compiled, 10 + 12 bytes
minus:
+++ plus!: compiled, 64 + 20 bytes
plus:
+++ difference!: compiled, 66 + 24 bytes
difference:
+++ times!: compiled, 16 + 12 bytes
times:
+++ divide!: compiled, 32 + 24 bytes
divide:
+++ max2!: compiled, 6 + 12 bytes
max2:
+++ max!:_3gvzmduwzk4g compiled, 4 + 16 bytes
max:
+++ min2!: compiled, 6 + 12 bytes
min2:
+++ min!:_3upuhcca279a compiled, 4 + 16 bytes
min:
+++ greaterp!: compiled, 81 + 28 bytes
greaterp:
+++ equal!: compiled, 32 + 12 bytes
equal:
+++ lessp!: compiled, 3 + 12 bytes
lessp:
+++ leq!: compiled, 4 + 16 bytes
leq:
+++ minusp!: compiled, 17 + 16 bytes
minusp:
+++ make!:ratnum compiled, 30 + 32 bytes
make:ratnum
+++ ratnump!: compiled, 4 + 12 bytes
ratnump:numr:denm:
+++ conv!:r2bf compiled, 33 + 28 bytes
conv:r2bfnilnilnilnilnilnilnilnilnil
*** local variable r in procedure normbf not used 

*** local variable ep1 in procedure normbf not used 

*** SMACRO normbf redefined 
+++ normbf compiled, 89 + 48 bytes
normbf
+++ bfdivide compiled, 14 + 20 bytes
bfdivide
+++ bftimes compiled, 8 + 12 bytes
bftimes
+++ plubf compiled, 145 + 32 bytes
plubf
+++ bfplus compiled, 8 + 12 bytes
bfplus
+++ difbf compiled, 148 + 36 bytes
difbf
+++ bfdiffer compiled, 8 + 12 bytes
bfdiffer
+++ invbf compiled, 8 + 24 bytes
invbf
+++ bfinverse compiled, 10 + 16 bytes
bfinverse
+++ bfminus compiled, 9 + 12 bytes
bfminus
+++ bflessp compiled, 8 + 12 bytes
bflessp
+++ grpbf compiled, 99 + 24 bytes
grpbf
+++ !!shbinflp compiled, 28 + 40 bytes
!shbinflp
+++ vv!!!*1e10 compiled, 5 + 16 bytes
vv!*1e10nil
+++ bfsqrt compiled, 170 + 104 bytes
bfsqrt
+++ realrat compiled, 148 + 40 bytes
realratnil
+++ fl2int compiled, 15 + 20 bytes
fl2intnil
+++ cflot compiled, 14 + 12 bytes
cflot
+++ conv!:bf2i compiled, 6 + 12 bytes
conv:bf2i
+++ bf2flr compiled, 72 + 52 bytes
bf2flr
+++ gf2fl compiled, 29 + 16 bytes
gf2fl
+++ gf2bf compiled, 61 + 32 bytes
gf2bf
+++ r2bf compiled, 93 + 44 bytes
r2bf
+++ r2fl compiled, 58 + 32 bytes
r2fl
+++ gfplus compiled, 9 + 16 bytes
gfplus
+++ gffplus compiled, 10 + 8 bytes
gffplus
+++ gbfplus compiled, 10 + 12 bytes
gbfplus
+++ gfdiffer compiled, 9 + 16 bytes
gfdiffer
+++ gffdiff compiled, 10 + 8 bytes
gffdiff
+++ gbfdiff compiled, 10 + 12 bytes
gbfdiff
+++ gftimes compiled, 9 + 16 bytes
gftimes
+++ gfftimes compiled, 31 + 8 bytes
gfftimes
+++ gbftimes compiled, 31 + 20 bytes
gbftimes
+++ gfquotient compiled, 9 + 16 bytes
gfquotient
+++ gffquot compiled, 48 + 8 bytes
gffquot
+++ gbfquot compiled, 57 + 32 bytes
gbfquot
+++ gfminus compiled, 8 + 12 bytes
gfminus
+++ gfrotate compiled, 5 + 12 bytes
gfrotate
+++ gfdot compiled, 9 + 16 bytes
gfdot
+++ gffdot compiled, 10 + 8 bytes
gffdot
+++ gbfdot compiled, 10 + 16 bytes
gbfdot
+++ gfrsq compiled, 4 + 12 bytes
gfrsq
+++ gffrsq compiled, 10 + 8 bytes
gffrsq
+++ gbfrsq compiled, 10 + 16 bytes
gbfrsq
+++ gffmult compiled, 10 + 8 bytes
gffmult
+++ gffsqrt compiled, 68 + 52 bytes
gffsqrt
+++ gbfmult compiled, 37 + 32 bytes
gbfmult
+++ gbfsqrt compiled, 67 + 72 bytes
gbfsqrtrl2gfc
+++ gfsqrt compiled, 121 + 56 bytes
gfsqrt
+++ sgn compiled, 15 + 20 bytes
sgn
+++ exptbf compiled, 22 + 20 bytes
exptbf
+++ icbrt compiled, 6 + 16 bytes
icbrt
*** fix2 not defined (LOSE flag) 
nil
+++ ilog2 compiled, 64 + 20 bytes
ilog2
+++ isqrt compiled, 16 + 24 bytes
isqrt
+++ qroundup compiled, 21 + 8 bytes
qroundup
+++ irootn compiled, 80 + 44 bytes
irootn
+++ irootn!-power2 compiled, 84 + 36 bytes
irootn-power2
+++ irootn1 compiled, 102 + 24 bytes
irootn12nilnilnilnilnilnilnil
+++ find!!nfpd compiled, 47 + 36 bytes
find!nfpd
+++ find!!nbfpd compiled, 47 + 32 bytes
find!nbfpd
*** find!maxbflexp not defined (LOSE flag) 
nil
+++ infinityp compiled, 15 + 16 bytes
infinityp
+++ !!mfefix compiled, 38 + 48 bytes
!mfefix155310221.0e-81.0e159.007199254741e1553nilnilnilnilnilnil
Math package mod 1.7, 1 May 93
+++ terrlst compiled, 9 + 20 bytes
terrlstnilnil
*** sqrt not defined (LOSE flag) 
nil
*** cbrt not defined (LOSE flag) 
nil
*** hypot not defined (LOSE flag) 
nil
*** floor not defined (LOSE flag) 
nil
*** ceiling not defined (LOSE flag) 
nil
*** round not defined (LOSE flag) 
nil
+++ rounddec compiled, 55 + 28 bytes
rounddecnilnil1.41421356237310.4142135623731
*** log not defined (LOSE flag) 
nil
+++ sclogx!-1 compiled, 69 + 24 bytes
sclogx-10.69314718055995186.50939253252nilnilnil
*** atan not defined (LOSE flag) 
nil
*** atand not defined (LOSE flag) 
nil6.28318530717961.04719755119660.01745329251994357.295779513082nilnil
*** sin not defined (LOSE flag) 
nil
*** sind not defined (LOSE flag) 
nil
*** tan not defined (LOSE flag) 
nil
*** tand not defined (LOSE flag) 
nilnil10000000nil
+++ !!scalsintan compiled, 120 + 68 bytes
!scalsintan
+++ !!scalsintand compiled, 120 + 68 bytes
!scalsintand
+++ !!sints compiled, 103 + 36 bytes
!sints
+++ !!sinhts compiled, 77 + 36 bytes
!sinhtsnil
*** exp not defined (LOSE flag) 
nilnil2.718281828459nil2
+++ iexpt compiled, 49 + 28 bytes
iexpt
*** expt not defined (LOSE flag) 
nil
+++ fsplit compiled, 90 + 40 bytes
fsplit
+++ f_multiply compiled, 24 + 12 bytes
f_multiply
+++ fexpt compiled, 10 + 16 bytes
fexpt
+++ fexpt1 compiled, 45 + 32 bytes
fexpt1
+++ rexpt compiled, 289 + 84 bytes
rexpt
+++ ft2rn1 compiled, 19 + 16 bytes
ft2rn1
+++ ft2rn2 compiled, 113 + 32 bytes
ft2rn2
*** cos not defined (LOSE flag) 
nil
*** cot not defined (LOSE flag) 
nil
*** sec not defined (LOSE flag) 
nil
*** csc not defined (LOSE flag) 
nil
*** acot not defined (LOSE flag) 
nil
*** asin not defined (LOSE flag) 
nil
*** acos not defined (LOSE flag) 
nil
*** acsc not defined (LOSE flag) 
nil
*** asec not defined (LOSE flag) 
nil
*** cosd not defined (LOSE flag) 
nil
*** cotd not defined (LOSE flag) 
nil
*** secd not defined (LOSE flag) 
nil
*** cscd not defined (LOSE flag) 
nil
*** acotd not defined (LOSE flag) 
nil
*** asind not defined (LOSE flag) 
nil
*** acosd not defined (LOSE flag) 
nil
*** acscd not defined (LOSE flag) 
nil
*** asecd not defined (LOSE flag) 
nil
*** sinh not defined (LOSE flag) 
nil
*** cosh not defined (LOSE flag) 
nil
*** tanh not defined (LOSE flag) 
nil
*** coth not defined (LOSE flag) 
nil
*** asinh not defined (LOSE flag) 
nil
*** acosh not defined (LOSE flag) 
nil
*** atanh not defined (LOSE flag) 
nil
*** acoth not defined (LOSE flag) 
nil
*** sech not defined (LOSE flag) 
nil
*** csch not defined (LOSE flag) 
nil
*** asech not defined (LOSE flag) 
nil
*** acsch not defined (LOSE flag) 
nil
*** ln not defined (LOSE flag) 
nil
*** log10 not defined (LOSE flag) 
nil
*** logb not defined (LOSE flag) 
nil
*** atan2 not defined (LOSE flag) 
nil
*** atan2d not defined (LOSE flag) 
nil
+++ factorial compiled, 20 + 28 bytes
factorial
+++ nfactorial compiled, 29 + 20 bytes
nfactorial
+++ fac!-part compiled, 29 + 12 bytes
fac-partnilnilnilnilnilnilnilnilnilnilnilnilnil121.0e-14
+++ logfp compiled, 30 + 24 bytes
logfp
+++ roundconstants compiled, 47 + 72 bytes
roundconstantsnilnilt((t (roundbfon)) (nil (roundbfoff)))
+++ roundbfon compiled, 3 + 16 bytes
roundbfon
+++ roundbfoff compiled, 5 + 20 bytes
roundbfoff(:rd: :mod: :crn: :gi: :rn:):rd:roundednili2rd*rd:minusprd:plus
rd:timesrd:differencerd:quotientrd:zeroprd:oneprd:preprd:prinrd:minusrd:root
*rd2rn*rn2rd
+++ round!* compiled, 6 + 8 bytes
round*
+++ mkround compiled, 7 + 12 bytes
mkround
+++ print!-precision compiled, 36 + 32 bytes
print-precision
+++ print_precision compiled as link to print-precision
print_precision
+++ precision0 compiled, 59 + 68 bytes
precision0precision0
+++ precision compiled, 20 + 32 bytes
precision3.3219280948874
+++ decprec2internal compiled, 7 + 20 bytes
decprec2internal
+++ precision1 compiled, 95 + 84 bytes
precision1nilnil
*** local variable n in procedure *rd2rn not used 
+++ !*rd2rn compiled, 128 + 76 bytes
*rd2rn
+++ rd2rn1 compiled, 9 + 16 bytes
rd2rn1
+++ bf2rn1 compiled, 155 + 60 bytes
bf2rn1
+++ !*rn2rd compiled, 5 + 20 bytes
*rn2rd6nil5.6843418860808e-143.2311742677853e-27
+++ precmsg compiled, 20 + 28 bytes
precmsg
+++ rd!:simp compiled, 63 + 56 bytes
rd:simprd:simp
+++ rndbfon compiled, 21 + 44 bytes
rndbfon
+++ i2rd!* compiled, 4 + 16 bytes
i2rd*
+++ chkint!* compiled, 80 + 44 bytes
chkint*(:rd: 1 . -800)
+++ chkrn!* compiled, 6 + 16 bytes
chkrn*
+++ bf2flck compiled, 30 + 44 bytes
bf2flck
+++ convchk compiled, 38 + 36 bytes
convchk
+++ convprec!* compiled, 10 + 16 bytes
convprec*
+++ convprec compiled, 4 + 16 bytes
convprec
+++ rd!:minusp compiled, 10 + 12 bytes
rd:minusp
+++ convprc2 compiled, 68 + 40 bytes
convprc2
+++ rdzchk compiled, 89 + 40 bytes
rdzchk
+++ rd!:plus compiled, 126 + 76 bytes
rd:plus
+++ rd!:difference compiled, 139 + 80 bytes
rd:difference
+++ rd!:times compiled, 119 + 72 bytes
rd:times
+++ rd!:quotient compiled, 158 + 100 bytes
rd:quotient
+++ rdqoterr compiled, 4 + 20 bytes
rdqoterr
*** safe-fp-plus not defined (LOSE flag) 
nil
*** safe-fp-times not defined (LOSE flag) 
nil
*** safe-fp-quot not defined (LOSE flag) 
nil
+++ rd!:zerop compiled, 12 + 12 bytes
rd:zerop
+++ rd!:minus compiled, 12 + 16 bytes
rd:minus
+++ rd!:onep compiled, 17 + 28 bytes
rd:onep
+++ rd!:root compiled, 25 + 32 bytes
rd:root
+++ rd!:prep compiled, 21 + 32 bytes
rd:prep
+++ rdprep1 compiled, 8 + 16 bytes
rdprep1
+++ rd!:prin compiled, 11 + 20 bytes
rd:prin
+++ rd!:explode compiled, 11 + 20 bytes
rd:explodenilnilnilnilnilnilnilnilnilnil(:cr: :rd: :mod: :crn: :gi: :rn:)nil:cr:
complex-roundednili2cr*cr:pluscr:timescr:differcr:quotientcr:zeropcr:onepcr:prep
cr:princr:minuscr:minusp*cr2rn*rn2cr*rd2cr*cr2rd*cr2crn*crn2cr*gi2crmkcrmkdcrn
:rd::cr:
+++ cr!:minusp compiled, 27 + 8 bytes
cr:minusp
+++ striptag compiled, 5 + 8 bytes
striptag
+++ mkcr compiled, 10 + 16 bytes
mkcr
+++ gf2cr!: compiled, 10 + 16 bytes
gf2cr:
+++ crprcd compiled, 11 + 12 bytes
crprcd
+++ crprcd2 compiled, 7 + 16 bytes
crprcd2
+++ cr!:simp compiled, 6 + 20 bytes
cr:simpcr:simp
+++ i2cr!* compiled, 13 + 24 bytes
i2cr*
+++ trimcrrl compiled, 4 + 12 bytes
trimcrrl
+++ trimcr compiled, 41 + 32 bytes
trimcr
+++ cr2rderr compiled, 4 + 20 bytes
cr2rderr
+++ !*cr2rn compiled, 38 + 36 bytes
*cr2rn
+++ !*rn2cr compiled, 14 + 28 bytes
*rn2cr
+++ !*cr2crn compiled, 11 + 24 bytes
*cr2crn
+++ !*crn2cr compiled, 48 + 44 bytes
*crn2cr
+++ !*cr2rd compiled, 35 + 24 bytes
*cr2rd
+++ !*rd2cr compiled, 13 + 24 bytes
*rd2cr
+++ !*gi2cr compiled, 44 + 40 bytes
*gi2cr
+++ bfrsq compiled, 26 + 16 bytes
bfrsq
+++ crzchk compiled, 53 + 40 bytes
crzchk
+++ cr!:plus compiled, 63 + 52 bytes
cr:plus
+++ cr!:differ compiled, 68 + 60 bytes
cr:differ
+++ cr!:times compiled, 54 + 52 bytes
cr:times
+++ cr!:quotient compiled, 82 + 64 bytes
cr:quotient
+++ safe!-crfp!-plus compiled, 20 + 16 bytes
safe-crfp-plus
+++ safe!-crfp!-diff compiled, 28 + 20 bytes
safe-crfp-diff
+++ safe!-crfp!-times compiled, 68 + 20 bytes
safe-crfp-times
+++ safe!-crfp!-quot compiled, 88 + 20 bytes
safe-crfp-quot
+++ cr!:minus compiled, 5 + 20 bytes
cr:minus
+++ cr!:zerop compiled, 52 + 16 bytes
cr:zerop
+++ cr!:onep compiled, 43 + 24 bytes
cr:onep
+++ cr!:prep compiled, 15 + 20 bytes
cr:prep
+++ crprep1 compiled, 71 + 40 bytes
crprep1
+++ crprimp compiled, 19 + 28 bytes
crprimp
+++ cr!:prin compiled, 24 + 36 bytes
cr:prinnil
+++ crone!* compiled, 6 + 20 bytes
crone*
+++ crhalf!* compiled, 6 + 20 bytes
crhalf*
+++ cri!* compiled, 6 + 20 bytes
cri*
+++ cri!/2 compiled, 6 + 20 bytes
cri/2
+++ cr2i!* compiled, 6 + 20 bytes
cr2i*nilnilnilnilnilnilnil0.01745329251994357.295779513082nil(exp expt log sin
cos tan asin acos atan sqrt sinh cosh sec csc cot tanh coth sech csch asinh
acosh acot asec acsc atanh acoth asech acsch logb log10 ln atan2 hypot deg2rad
rad2deg deg2dms rad2dms dms2deg dms2rad norm arg e pi)nilnil(dms2deg* dms2rad*)(
atan2 hypot atan2d logb)nilnilnil
+++ rdexp!* compiled, 66 + 56 bytes
rdexp*
+++ rdsqrt!* compiled, 13 + 24 bytes
rdsqrt*
+++ rdexpt!* compiled, 156 + 68 bytes
rdexpt*
+++ rdlog!* compiled, 13 + 24 bytes
rdlog*
+++ rdatan2!* compiled, 32 + 44 bytes
rdatan2*
+++ atan2!* compiled, 55 + 52 bytes
atan2*
+++ rde!* compiled, 8 + 24 bytes
rde*
+++ rdpi!* compiled, 9 + 24 bytes
rdpi*
+++ pi!/2!* compiled, 5 + 20 bytes
pi/2*
+++ deg2rad!* compiled, 13 + 24 bytes
deg2rad*
+++ rad2deg!* compiled, 13 + 24 bytes
rad2deg*
+++ deg2rad compiled, 4 + 12 bytes
deg2rad
+++ rad2deg compiled, 4 + 12 bytes
rad2deg
+++ deg2rad!: compiled, 12 + 32 bytes
deg2rad:
+++ rad2deg!: compiled, 12 + 32 bytes
rad2deg:
+++ rdsin!* compiled, 13 + 24 bytes
rdsin*
+++ rdcos!* compiled, 13 + 24 bytes
rdcos*
+++ rdtan!* compiled, 13 + 24 bytes
rdtan*
+++ rdasin!* compiled, 13 + 24 bytes
rdasin*
+++ rdacos!* compiled, 13 + 24 bytes
rdacos*
+++ rdatan!* compiled, 14 + 20 bytes
rdatan*
+++ rdsinh!* compiled, 13 + 24 bytes
rdsinh*
+++ rdcosh!* compiled, 13 + 24 bytes
rdcosh*
+++ sinh!* compiled, 12 + 28 bytes
sinh*
+++ cosh!* compiled, 12 + 28 bytes
cosh*
+++ rdsec!* compiled, 14 + 28 bytes
rdsec*
+++ rdcsc!* compiled, 14 + 28 bytes
rdcsc*
+++ rdcot!* compiled, 17 + 32 bytes
rdcot*
+++ rdtanh!* compiled, 22 + 40 bytes
rdtanh*
+++ rdcoth!* compiled, 21 + 40 bytes
rdcoth*
+++ rdsech!* compiled, 14 + 28 bytes
rdsech*
+++ rdcsch!* compiled, 14 + 28 bytes
rdcsch*
+++ rdasinh!* compiled, 13 + 24 bytes
rdasinh*
+++ rdacosh!* compiled, 13 + 24 bytes
rdacosh*
+++ asinh!* compiled, 82 + 72 bytes
asinh*
+++ acosh!* compiled, 44 + 68 bytes
acosh*
+++ rdacot!* compiled, 19 + 32 bytes
rdacot*
+++ rdasec!* compiled, 20 + 36 bytes
rdasec*
+++ rdacsc!* compiled, 14 + 28 bytes
rdacsc*
+++ rdatanh!* compiled, 13 + 24 bytes
rdatanh*
+++ atanh!* compiled, 40 + 68 bytes
atanh*
+++ rdacoth!* compiled, 14 + 28 bytes
rdacoth*
+++ rdasech!* compiled, 33 + 48 bytes
rdasech*
+++ rdacsch!* compiled, 25 + 40 bytes
rdacsch*
+++ rdlogb!* compiled, 16 + 24 bytes
rdlogb*
+++ rdlog10!* compiled, 15 + 28 bytes
rdlog10*
+++ logb!* compiled, 55 + 64 bytes
logb*
+++ rdhypot!* compiled, 16 + 24 bytes
rdhypot*
+++ hypot!* compiled, 66 + 56 bytes
hypot*
+++ simpdms compiled, 83 + 24 bytes
simpdms
+++ round2a!* compiled, 6 + 12 bytes
round2a*
+++ dms2rad!* compiled, 4 + 16 bytes
dms2rad*
+++ dms2deg!* compiled, 25 + 28 bytes
dms2deg*
+++ dms2deg compiled, 14 + 12 bytes
dms2deg
+++ dms2deg!: compiled, 122 + 44 bytes
dms2deg:
+++ rad2dms compiled, 4 + 16 bytes
rad2dms
+++ rad2dms!* compiled, 4 + 16 bytes
rad2dms*
+++ deg2dms!* compiled, 13 + 24 bytes
deg2dms*
+++ mklist3!* compiled, 44 + 32 bytes
mklist3*
+++ deg2dms compiled, 28 + 16 bytes
deg2dms
+++ deg2dms!: compiled, 83 + 44 bytes
deg2dms:
+++ rdnorm!* compiled, 8 + 16 bytes
rdnorm*
+++ rdarg!* compiled, 8 + 20 bytes
rdarg*nil
+++ rdone!* compiled, 6 + 20 bytes
rdone*
+++ rdtwo!* compiled, 6 + 20 bytes
rdtwo*
+++ rdhalf!* compiled, 6 + 20 bytes
rdhalf*
+++ rdzero!* compiled, 6 + 20 bytes
rdzero*
+++ texpt!: compiled, 36 + 32 bytes
texpt:
+++ quotient!: compiled, 70 + 20 bytes
quotient:
+++ texpt!:any compiled, 226 + 132 bytes
texpt:any
+++ integerp!: compiled, 47 + 28 bytes
integerp:nilnilnilnilnilnil(expt sin cos tan asin acos atan cot acot sec asec
csc acsc sinh cosh asinh acosh tanh coth atanh acoth sech csch asech acsch atan2
arg sqrt norm arg log exp logb e pi)
+++ cre!* compiled, 6 + 20 bytes
cre*
+++ crpi!* compiled, 6 + 20 bytes
crpi*
+++ crexpt!* compiled, 17 + 36 bytes
crexpt*
+++ crnorm!* compiled, 12 + 16 bytes
crnorm*
+++ crarg!* compiled, 12 + 16 bytes
crarg*
+++ crsqrt!* compiled, 5 + 20 bytes
crsqrt*
+++ crr2d!* compiled, 14 + 20 bytes
crr2d*
+++ crd2r!* compiled, 14 + 20 bytes
crd2r*
+++ crsin!* compiled, 29 + 36 bytes
crsin*
+++ crcos!* compiled, 31 + 40 bytes
crcos*
+++ crtan!* compiled, 24 + 44 bytes
crtan*
+++ crcot!* compiled, 24 + 44 bytes
crcot*
+++ cratan2!* compiled, 148 + 84 bytes
cratan2*
+++ crlog!* compiled, 9 + 24 bytes
crlog*
+++ crlogb!* compiled, 8 + 16 bytes
crlogb*
+++ timesi!* compiled, 4 + 16 bytes
timesi*
+++ crasin!* compiled, 6 + 20 bytes
crasin*
+++ cracos!* compiled, 15 + 32 bytes
cracos*
+++ cratan!* compiled, 17 + 36 bytes
cratan*
+++ cracot!* compiled, 18 + 36 bytes
cracot*
+++ crsec!* compiled, 8 + 24 bytes
crsec*
+++ crcsc!* compiled, 8 + 24 bytes
crcsc*
+++ crasec!* compiled, 6 + 24 bytes
crasec*
+++ cracsc!* compiled, 6 + 24 bytes
cracsc*
+++ crsinh!* compiled, 16 + 36 bytes
crsinh*
+++ crcosh!* compiled, 16 + 36 bytes
crcosh*
+++ crtanh!* compiled, 20 + 40 bytes
crtanh*
+++ crcoth!* compiled, 20 + 40 bytes
crcoth*
+++ crsech!* compiled, 16 + 32 bytes
crsech*
+++ crcsch!* compiled, 16 + 32 bytes
crcsch*
+++ crasinh!* compiled, 44 + 52 bytes
crasinh*
+++ cracosh!* compiled, 16 + 36 bytes
cracosh*
+++ cratanh!* compiled, 20 + 40 bytes
cratanh*
+++ cracoth!* compiled, 20 + 40 bytes
cracoth*
+++ crasech!* compiled, 6 + 24 bytes
crasech*
+++ cracsch!* compiled, 6 + 24 bytes
cracsch*
+++ crexp!* compiled, 24 + 32 bytes
crexp*nilnilnilnilnilnilnilnil
+++ allfixp compiled, 14 + 8 bytes
allfixp
+++ read!:lnum compiled, 86 + 56 bytes
read:lnum
+++ exp!* compiled, 4 + 16 bytes
exp*
+++ log!* compiled, 4 + 16 bytes
log*
+++ sin!* compiled, 4 + 16 bytes
sin*
+++ cos!* compiled, 4 + 16 bytes
cos*
+++ tan!* compiled, 4 + 16 bytes
tan*
+++ asin!* compiled, 4 + 16 bytes
asin*
+++ acos!* compiled, 4 + 16 bytes
acos*
+++ atan!* compiled, 4 + 16 bytes
atan*
+++ sqrt!* compiled, 4 + 16 bytes
sqrt*
+++ pi!* compiled, 11 + 28 bytes
pi*
+++ e!* compiled, 3 + 16 bytes
e*
+++ !:pi compiled, 142 + 64 bytes
:pi
+++ !:bigpi compiled, 155 + 108 bytes
:bigpi
+++ !:e compiled, 82 + 48 bytes
:e
+++ !:e0625 compiled, 20 + 28 bytes
:e0625
+++ !:log2 compiled, 20 + 28 bytes
:log2
+++ !:log3 compiled, 20 + 28 bytes
:log3
+++ !:log5 compiled, 20 + 28 bytes
:log5
+++ !:log10 compiled, 20 + 28 bytes
:log10
+++ !:logpi compiled, 24 + 32 bytes
:logpi
+++ !:sqrt2 compiled, 20 + 28 bytes
:sqrt2
+++ !:sqrt3 compiled, 20 + 28 bytes
:sqrt3
+++ !:sqrt5 compiled, 20 + 28 bytes
:sqrt5
+++ !:sqrt10 compiled, 20 + 28 bytes
:sqrt10
+++ !:sqrtpi compiled, 24 + 32 bytes
:sqrtpi
+++ !:sqrte compiled, 24 + 32 bytes
:sqrte
+++ !:cbrt2 compiled, 20 + 28 bytes
:cbrt2
+++ !:cbrt3 compiled, 20 + 28 bytes
:cbrt3
+++ !:cbrt5 compiled, 20 + 28 bytes
:cbrt5
+++ !:cbrt10 compiled, 20 + 28 bytes
:cbrt10
+++ !:cbrtpi compiled, 24 + 32 bytes
:cbrtpi
+++ !:cbrte compiled, 24 + 32 bytes
:cbrte
+++ get!:const compiled, 39 + 28 bytes
get:const
+++ save!:const compiled, 26 + 28 bytes
save:const
+++ set!:const compiled, 6 + 16 bytes
set:const(693 :rd:
32275789658570886958156186740185430035207321153362338386082868836372441170262918772578584747851174923149878504151407927049194948238790383959946719335828357694428215050317306695934166355248914491511797113061591
. -691)(696 :rd:
223414559943812204541299691543817774952446626078955845183474074928994140646542202630297581777052042918617043584281846658404080952838738755044958604987321549025362902884163241093707622384220567344910829214455753
. -694)(345 :rd:
38147133879018916226726161754238056000235647349641966973643839209814212240981324997881509318028130379359
. -344)(344 :rd:
24839564051432105757030187307432255962232015093166539115572437354016218101313667760974422926251785557331
. -344)(346 :rd:
78739555111562328162466601559210101903369880761600796068692519487892757296836330825859826335560157422575
. -345)(343 :rd:
14418920408943590291895376801231811103435110839037170382760291138100527377344006226693362638634878438263
. -342)(347 :rd:
165030491374412933849223389024719000751944916898630441293227203812836655221379385335495746961582598620767
. -345)(346 :rd:
82044887777439745201490860134149724327740508022373333934496464660706775280894235524870788720107408621657
. -345)(345 :rd:
50679638250266908861395072713544592150266848458327253776136968282930880401586871730484368125324019459069
. -344)(347 :rd:
248278508123981609440413003268423058724784449908208567741775698889111072126561909541155538505338450234411
. -346)(347 :rd:
160263087864233938564171191044014407532380117773343723184267574989151211701991419780657973200450208209937
. -345)(351 :rd:
3626339718486249843935062318460017099107964674038984464624974694918453710375278122937439447990585581769517
. -349)(346 :rd:
127035014186189798996721691704828281211780805781345795619730198926133233346870142241668189685941500845293
. -345)(343 :rd:
14770859189469281038386275396043606714604333497923750655344249075728152412325839111562307376508616809399
. -342)(346 :rd:
90300849505957794917936684197096299653509935569780592611890608283374605465644997058723193304239168600451
. -345)(346 :rd:
103368668544134889415261896114643512957939173776229308377580129710844166070396271815119166661316221761795
. -345)(346 :rd:
122557108346228652131261462517363494874090099635843090514908752924083688145951822513240265180899973398035
. -345)(347 :rd:
154412280619660125997582582468881795918497944332658086037182090027508214848053363871814051517862045334163
. -345)(347 :rd:
209939966694540002189872523367163064276025630375546307290789337782432628385230387394034908651444438482047
. -346)(346 :rd:
100026098918546677906326139569715406271344101179735395193974120497220242360267604189519654265327644817783
. -345)
+++ sqrt!: compiled, 180 + 104 bytes
sqrt:
+++ cbrt!: compiled, 248 + 128 bytes
cbrt:
+++ exp!: compiled, 215 + 116 bytes
exp:
+++ log!: compiled, 274 + 136 bytes
log:
+++ sin!: compiled, 364 + 156 bytes
sin:
+++ cos!: compiled, 331 + 140 bytes
cos:
+++ tan!: compiled, 191 + 104 bytes
tan:
+++ asin!: compiled, 93 + 88 bytes
asin:
+++ acos!: compiled, 101 + 84 bytes
acos:
+++ atan!: compiled, 249 + 132 bytes
atan:nilnil
nil
nilnilentry
+++ safe!-putd compiled, 16 + 28 bytes
safe-putdmkfunction
+++ defautoload_go6i26uj9wu4 compiled, 205 + 108 bytes
defautoload
+++ defautoload_operator_p9wpei340v9 compiled, 20 + 20 bytes
defautoload_operator
+++ autoload_operator!* compiled, 38 + 28 bytes
autoload_operator*
+++ defautoload_value_nj0d4wyspvia compiled, 22 + 20 bytes
defautoload_value
+++ autoload_value!* compiled, 23 + 24 bytes
autoload_value*autoload_value*
*** Autoload stub for compile not defined 
nil
*** Autoload stub for faslout not defined 
nilnil((t (crefon)) (nil (crefoff)))
+++ crefon compiled, 8 + 20 bytes
crefon
+++ cedit compiled, 10 + 16 bytes
cedit
+++ display compiled, 9 + 20 bytes
displayrlis
+++ editdef compiled, 9 + 20 bytes
editdefrlisnilrlis
+++ ezgcdf compiled, 9 + 20 bytes
ezgcdf
+++ factorize!-primitive!-polynomial compiled, 9 + 20 bytes
factorize-primitive-polynomial
+++ pfactor compiled, 9 + 20 bytes
pfactor
+++ simpnprimitive compiled, 9 + 20 bytes
simpnprimitivesimpnprimitiverlisnilnilnilnilnilnilnil
+++ index compiled, 9 + 20 bytes
index
+++ mass compiled, 9 + 20 bytes
mass
+++ mshell compiled, 9 + 20 bytes
mshell
+++ vecdim compiled, 9 + 20 bytes
vecdim
+++ vector compiled, 9 + 20 bytes
vectorrlisrlisrlisrlisrlisnilnil
+++ simpint compiled, 9 + 20 bytes
simpintsimpint((t (load-package (quote algint))))nil((t (put (quote mat) (quote
lnrsolvefn) (quote clnrsolve)) (put (quote mat) (quote inversefn) (quote matinv)
)) (nil (put (quote mat) (quote lnrsolvefn) (quote lnrsolve)) (put (quote mat) (
quote inversefn) (quote matinverse))))
+++ detq compiled, 9 + 20 bytes
detq
+++ matp compiled, 9 + 20 bytes
matp
+++ matrix compiled, 10 + 16 bytes
matrixrlisnilformmat
+++ formmat compiled, 11 + 20 bytes
formmat
+++ generateident compiled, 9 + 20 bytes
generateident
+++ lnrsolve compiled, 9 + 20 bytes
lnrsolve
+++ simpresultant compiled, 9 + 20 bytes
simpresultant
+++ resultant compiled, 11 + 20 bytes
resultantsimpresultant
+++ nullspace!-eval compiled, 11 + 24 bytes
nullspace-evalnullspace-evalodesolve-eval
+++ odesolve!-eval compiled, 9 + 20 bytes
odesolve-eval(lambda (u) (load-package (quote gnuplot)) (ploteval u))nil
+++ rprint compiled, 10 + 16 bytes
rprint
+++ solveeval compiled, 9 + 20 bytes
solveeval
+++ solve0 compiled, 9 + 20 bytes
solve0solveevalniltttsimpiden((nil (load-package (quote solve))))((nil (
load-package (quote solve))))((nil (load-package (quote solve))))
+++ roots compiled, 10 + 16 bytes
roots
+++ gfnewt compiled, 9 + 20 bytes
gfnewt
+++ gfroot compiled, 9 + 20 bytes
gfroot
+++ root_val compiled, 9 + 20 bytes
root_val
+++ firstroot compiled, 9 + 20 bytes
firstroot
+++ rlrootno compiled, 9 + 20 bytes
rlrootno
+++ realroots compiled, 9 + 20 bytes
realroots
+++ isolater compiled, 9 + 20 bytes
isolater
+++ nearestroot compiled, 9 + 20 bytes
nearestroot
+++ sturm0 compiled, 9 + 20 bytes
sturm0
+++ multroot1 compiled, 9 + 20 bytes
multroot1nilsturm0nilmultroot1nilnil
+++ simplimit compiled, 9 + 20 bytes
simplimit
+++ pf compiled, 10 + 16 bytes
pfnil
+++ simp!-sum compiled, 9 + 20 bytes
simp-sum
+++ simp!-sum0 compiled, 9 + 20 bytes
simp-sum0simp-sum
+++ simp!-prod compiled, 9 + 20 bytes
simp-prodsimp-prodnilsimptaylor
+++ simptaylor compiled, 9 + 20 bytes
simptaylortrigsimp*
+++ trigsimp!* compiled, 9 + 20 bytes
trigsimp*(lambda (x) (autoload_operator* (quote besselj) (quote (specfn specbess
)) x))(lambda (x) (autoload_operator* (quote bessely) (quote (specfn specbess))
x))(lambda (x) (autoload_operator* (quote besseli) (quote (specfn specbess)) x))
(lambda (x) (autoload_operator* (quote besselk) (quote (specfn specbess)) x))(
lambda (x) (autoload_operator* (quote hankel1) (quote (specfn specbess)) x))(
lambda (x) (autoload_operator* (quote gamma) (quote (specfn sfgamma)) x))(lambda
(x) (autoload_operator* (quote binomial) (quote specfn) x))(lambda (x) (
autoload_operator* (quote lambert_w) (quote (specfn specbess)) x))nilnil
nil
nilnilnil
+++ psl!-file!-write!-date compiled, 17 + 24 bytes
psl-file-write-date
+++ olderfaslp compiled, 45 + 44 bytes
olderfaslp(module endmodule)
+++ update!-cref compiled, 54 + 64 bytes
update-cref
+++ upd!-cref1 compiled, 46 + 56 bytes
upd-cref1
+++ package!-remake compiled, 13 + 16 bytes
package-remake
+++ loaded!-modules declared fluid
+++ package!-remake2 compiled, 41 + 32 bytes
package-remake2
+++ update!-fasl2 compiled, 71 + 80 bytes
update-fasl2
+++ upd!-fasl1 compiled, 95 + 108 bytes
upd-fasl1
+++ module2!-to!-file redefined
+++ module2!-to!-file compiled, 16 + 28 bytes
module2-to-filenilnil
nil

nil


symbolic;

nil


!#if (not !*savedef)

faslout 'user;

%
% The "user" module is only useful when building a full system, since
% in the bootstrap the files u01.lsp to u12.lsp will probably not exist
% and it is CERTAIN that they are not useful.
%

symbolic procedure c!:install(name, env, c!-version, !&optional, c1);
  begin
    scalar v, n;
    if c1 then return check!-c!-code(name, env, c!-version, c1);
    put(name, 'c!-version, c!-version);
    if null env then return name;
    v := mkvect sub1 length env;
    n := 0;
    while env do <<
      putv(v, n, car env);
      n := n + 1;
      env := cdr env >>;
% I only instate the environment if there is nothing useful there at
% present. Actually this is even stronger. When a built-in function is
% set up it gets NIL in its environment cell by default. Things that are
% not defined at all have themselves there.
    if symbol!-env name = nil then symbol!-set!-env(name, v);
    put(name, 'funarg, v);
    return name;
  end;


rdf "$srcdir/../../cslbuild/generated-c/u01.lsp"$
rdf "$srcdir/../../cslbuild/generated-c/u02.lsp"$
rdf "$srcdir/../../cslbuild/generated-c/u03.lsp"$
rdf "$srcdir/../../cslbuild/generated-c/u04.lsp"$
rdf "$srcdir/../../cslbuild/generated-c/u05.lsp"$
rdf "$srcdir/../../cslbuild/generated-c/u06.lsp"$
rdf "$srcdir/../../cslbuild/generated-c/u07.lsp"$
rdf "$srcdir/../../cslbuild/generated-c/u08.lsp"$
rdf "$srcdir/../../cslbuild/generated-c/u09.lsp"$
rdf "$srcdir/../../cslbuild/generated-c/u10.lsp"$
rdf "$srcdir/../../cslbuild/generated-c/u11.lsp"$
rdf "$srcdir/../../cslbuild/generated-c/u12.lsp"$


faslend;
!#endif

faslout 'remake;

FASLOUT (remake): IN files;  or type in expressions
When all done, execute FASLEND;


!#if (not !*savedef)

load!-module "user";

!#endif

!@reduce := concat(!@srcdir, "/../..");

in "$reduce/packages/support/remake.red"$
+++ psl!-file!-write!-date compiled, 17 + 24 bytes
+++ olderfaslp compiled, 45 + 44 bytes
+++ update!-cref compiled, 54 + 64 bytes
+++ upd!-cref1 compiled, 46 + 56 bytes
+++ package!-remake compiled, 13 + 16 bytes
+++ package!-remake2 compiled, 41 + 32 bytes
+++ update!-fasl2 compiled, 71 + 80 bytes
+++ upd!-fasl1 compiled, 95 + 108 bytes
+++ module2!-to!-file compiled, 16 + 28 bytes


global '(reduce_base_modules reduce_extra_modules reduce_test_cases);
 
symbolic procedure get_configuration_data();
% Read data from a configuration file that lists the modules that must
% be processed.  NOTE that this and the next few funtions will ONLY
% work properly if REDUCE had been started up with the correct
% working directory. This is (just about) acceptable because these are
% system maintainance functions rather than generally flexible things
% for arbitrary use.
  begin
    scalar i, w, e;
% Configuration information is held in a file called something like
% "packagelist.dat".
    i := "$srcdir/../../packages/package.map";
    i := open(i, 'input);
    i := rds i;
    e := !*echo;
    !*echo := nil;
    w := read();
    !*echo := e;
    i := rds i;
    close i;
    reduce_base_modules :=
      for each x in w conc
         if member('core, cddr x) and
            member('csl, cddr x) then list car x else nil;
    reduce_extra_modules :=
      for each x in w conc
         if not member('core, cddr x) and
            member('csl, cddr x) then list car x else nil;
    reduce_test_cases :=
      for each x in w conc
         if member('test, cddr x) and
            member('csl, cddr x) then list car x else nil;
    for each x in w do
       if member('csl, cddr x) then put(car x, 'folder, cadr x);
%   princ "reduce_base_modules: "; print reduce_base_modules;
%   princ "reduce_extra_modules: "; print reduce_extra_modules;
%   princ "reduce_test_cases: "; print reduce_test_cases;
    return;
  end;
+++ get_configuration_data compiled, 277 + 60 bytes


symbolic procedure build_reduce_modules names;
  begin
    scalar w;
!#if !*savedef
    !*savedef := t;
!#else
    !*savedef := nil;
!#endif
    make!-special '!*native_code;
    !*native_code := nil;
    get_configuration_data();
    window!-heading list!-to!-string explodec car names;
!#if !*savedef
% When building the bootstrap version I want to record what switches
% get declared...
    if not getd 'original!-switch then <<
       w := getd 'switch;
       putd('original!-switch, car w, cdr w);
       putd('switch, 'expr, 
          '(lambda (x) 
              (dolist (y x) (princ "+++ Declaring a switch: ") (print y)) 
              (original!-switch x))) >>;
!#endif
    package!-remake car names;
    if null (names := cdr names) then <<
        printc "Recompilation complete";
        window!-heading  "Recompilation complete" >>;
!#if !*savedef
    if null names then restart!-csl 'begin
!#else
    if null names then restart!-csl '(user begin)
!#endif
    else restart!-csl('(remake build_reduce_modules), names)
  end;
+++ build_reduce_modules compiled, 64 + 76 bytes


symbolic procedure test_a_package names;
  begin
    scalar packge, logname, logtmp, logfile, start_time, start_gctime, gt;
    scalar redef, quitfn, oll, rr;
    princ "TESTING: "; print car names;
    window!-heading list!-to!-string explodec car names;
    !*backtrace := nil;
    !*errcont := t;
    !*extraecho := t;    % Ensure standard environment for the test...
    !*int := nil;        % ... so that results are predictable.
    packge := car names;
    verbos nil;
%    load!-latest!-patches();
% Normally logs from testing go in testlogs/name.rlg, however you may
% may sometimes want to put them somewhere else. If you do then launch reduce
% along the lines
%    reduce -D@log="mylogs" ...
% and ensure that <top>/mylogs exists.
    if boundp '!@log and stringp symbol!-value '!@log then
        logname := symbol!-value '!@log
    else logname := "testlogs";
    logname := concat(logname, "/");
    logtmp  := concat(logname, concat(car names, ".tmp"));
    logname := concat(logname, concat(car names,".rlg"));
    logfile := open(logtmp, 'output);
    get_configuration_data();
    begin
       scalar !*terminal!-io!*, !*standard!-output!*, !*error!-output!*,
              !*trace!-output!*, !*debug!-io!*, !*query!-io!*, !*errcont,
              outputhandler!*;
       !*terminal!-io!* := !*standard!-output!* := !*error!-output!* := logfile;
       !*trace!-output!* := !*debug!-io!* := !*query!-io!* := logfile;
       oll := linelength 80;
       princ date(); princ " run on "; printc cdr assoc('name, lispsystem!*);
       load!-package packge;
       if get(packge,'folder) then packge := get(packge,'folder);
       packge := concat("$srcdir/../../packages/",
                   concat(packge,
                     concat("/",
                       concat(car names,".tst"))));
       redef := !*redefmsg;
       !*redefmsg := nil;
       quitfn := getd 'quit;
% At least at one stage at least one test file ends in "quit;" rather than
% "end;" and the normal effect would be that this leads it to cancel
% all execution instantly. To avoid that I will undefine the function
% "quit", but restore it after the test. I reset !*redefmsg to avoid getting
% messages about this. I redefined quit to something (specifically "posn")
% that does not need an argument and that is "harmless".
       remd 'quit;
       putd('quit, 'expr, 'posn);
       start_time := time();
       start_gctime := gctime();
       !*mode := 'algebraic;
       !*extraecho := t;    % Ensure standard environment for the test...
       !*int := nil;        % ... so that results are predictable.
       !*errcont := t;
% resource!-limit is a special feature in CSL so that potentially wild
% code can be run with it being stopped harshly if it gets stuck.
% The first argument is an expression to evaluate. The next 4 are
%    a time limit, in seconds
%    a "cons" limit, in megaconses
%    a limit on the number of thousands of I/O bytes that can be
%            performed, with both reading and printing counted
%    a limit on the number of Lisp-level errors that can be raised.
%            note that that can be large if errorset is used to trap them.
%
% If a limit is specified as a negative value (typically -1) then that
% resource is not applied.
% The first 3 limits are applied in an APPROXIMATE way, and the first
% is seriously sensitive the the speed of the computer you are running
% on, so should be used with real care. At the end the return value
% is atomic if a limit expired, otherwise ncons of the regular value.
% A global variable *resources* should end up a list of 4 values
% showing the usage in each category.

% The settings here are intended to be fairly conservative...
%  Time:   On an Intel Q6600 CPU the longest test runs in under 20 seconds,
%          so allowing 3 minutes gives almost a factor of 10 slack. If
%          many people are running slow(ish) machines still I can increase
%          the limit.
%  Space:  The amount of space used ought to be pretty independent of
%          the computer used. Measuring on 32 and 64-bit systems will
%          give minor differences. But the limit given here seems to allow
%          all the current tests to run with a factor of 2 headroom
%          in case the test-scripts are updated.
%  IO:     The "crack" package has code in it that checkpoints its state
%          to disc periodically, and tests that activate that use amazingly
%          more IO than the others. The limit at 10 Mbytes suits the
%          relevant current tests. If a broken package leads to a test
%          script looping this then means that the resulting log file is no
%          larger than (about) 10 Mbytes, which is ugly but managable.
%  Errors: Some REDUCE packages make extensive use of errorset and
%          predictable use of "error" (for lack of use of catch and throw,
%          usually). So I do not constrain errors here. But if things were
%          ever such that no errors were expected I could enforce that
%          condition here.

       rr := resource!-limit(list('in_list1, mkquote packge, t),
                             300,  % allow 5 minutes per test
                             200,  % allow 200 megaconses
                             10000,% allow ten megabytes of I/O
                             -1);  % Do not limit Lisp-level errors at all 
       erfg!* := nil;
       terpri();
       putd('quit, car quitfn, cdr quitfn);
       !*redefmsg := redef;
       terpri();
       prin2 "Time for test: ";
       gt := time() - start_time;
% I ensure that the reported time is at least 1 millisecond.
       if gt = 0 then gt := 1;
       prin2 gt;
       prin2 " ms";
       if (gt := gctime() - start_gctime) > 0 then <<
           prin2 ", plus GC time: ";
           prin2 gt;
           prin2 " ms" >>;
       terpri();
% Temp while I watch things
       if atom rr then printc "+++++ Error: Resource limit exceeded";
       princ "@@@@@ Resources used: "; print !*resources!*;
       linelength oll
    end;
    close logfile;
    delete!-file logname;
    rename!-file(logtmp, logname);
    names := cdr names;
    if null names then <<
        printc "Testing complete";
        window!-heading "Testing complete";
        restart!-csl t >>
    else restart!-csl('(remake test_a_package), names)
  end;
+++ test_a_package compiled, 363 + 260 bytes


symbolic procedure report_incomplete_tests names;
  begin
% Displays information about what "complete_tests" would do
    scalar packge, tfile, logname;
    scalar date1, date2, date3;
    get_configuration_data();
    for each packge in names do <<
       tfile := packge;
       if get(packge,'folder) then tfile := get(packge,'folder);
       tfile := concat("$srcdir/../../packages/",
                   concat(tfile,
                      concat("/",
                        concat(packge,".tst"))));
       if boundp '!@log and stringp symbol!-value '!@log then
           logname := symbol!-value '!@log
       else logname := "testlogs";
       logname := concat(logname, concat("/", concat(packge,".rlg")));
       date1 := filedate "reduce.img";
       date2 := filedate tfile;
       date3 := filedate logname;
       if null date1 then date1 := date();
       if null date2 then date2 := date();
       if null date3 or
          datelessp(date3, date1) or datelessp(date3, date2) then <<
             princ "NEED TO TEST: "; print packge >> >>
  end;
+++ report_incomplete_tests compiled, 116 + 60 bytes


symbolic procedure complete_tests names;
  begin
% Just like the previous testing code except that logs that are already up
% to date are not re-generated.
    scalar packge, tfile, logname, logfile, logtmp,
           start_time, start_gctime, gt, rr;
    scalar date1, date2, date3, oll;
    !*backtrace := nil;
    !*errcont := t;
    !*extraecho := t;    % Ensure standard environment for the test...
    !*int := nil;        % ... so that results are predictable.
    verbos nil;
    get_configuraion_data();
top:
    tfile := packge := car names;
    if get(tfile,'folder) then tfile := get(tfile,'folder);
    tfile := concat("$srcdir/../../packages/",
                concat(tfile,
                  concat("/",
                    concat(packge,".tst"))));
    if boundp '!@log and stringp symbol!-value '!@log then
        logname := symbol!-value '!@log
    else logname := "testlogs";
    logname := concat(logname, "/");
    logtmp  := concat(logname, concat(packge, ".tmp"));
    logname := concat(logname, concat(packge, ".rlg"));
    date1 := filedate "reduce.img";
    date2 := filedate tfile;
    date3 := filedate logname;
    if null date1 then date1 := date();
    if null date2 then date2 := date();
    if null date3 or
       datelessp(date3, date1) or datelessp(date3, date2) then <<
       princ "TESTING: "; print packge;
       window!-heading list!-to!-string explodec packge;
       logfile := open(logtmp, 'output);
       start_time := time();
       start_gctime := gctime();
       begin
          scalar !*terminal!-io!*, !*standard!-output!*, !*error!-output!*,
                 !*trace!-output!*, !*debug!-io!*, !*query!-io!*, !*errcont,
                 outputhandler!*, redef, quitfn;
          !*terminal!-io!* := !*standard!-output!* := !*error!-output!* := logfile;
          !*trace!-output!* := !*debug!-io!* := !*query!-io!* := logfile;
          oll := linelength 80;
          princ date(); princ " run on ";
          printc cdr assoc('name, lispsystem!*);
          load!-package packge;
          !*mode := 'algebraic;
          !*extraecho := t;    % Ensure standard environment for the test...
          !*int := nil;        % ... so that results are predictable.
          redef := !*redefmsg;
          !*redefmsg := nil;
          quitfn := getd 'quit;
          remd 'quit;
          putd('quit, 'expr, 'posn);
          !*errcont := t;
          rr := resource!-limit(list('in_list1, mkquote tfile, t),
                                300,  % allow 5 minutes per test
                                200,  % allow 200 megaconses
                                10000,% allow ten megabytes of I/O
                                -1);  % Do not limit Lisp-level errors at all 
          erfg!* := nil;
          terpri();
          putd('quit, car quitfn, cdr quitfn);
          !*redefmsg := redef;
          terpri();
          prin2 "Time for test: ";
          gt := time() - start_time;
          if gt = 0 then gt := 1;
          prin2 gt;
          prin2 " ms";
          if (gt := gctime() - start_gctime) > 0 then <<
              prin2 ", plus GC time: ";
              prin2 gt;
              prin2 " ms" >>;
          if atom rr then printc "+++++ Error: Resource limit exceeded";
          princ "@@@@@ Resources used: "; print !*resources!*;
          terpri();
          linelength oll
       end;
       close logfile;
       delete!-file logname;
       rename!-file(logtmp, logname) >>
    else if cdr names then <<
       names := cdr names;
       go to top >>;
    names := cdr names;
    if null names then restart!-csl t
    else restart!-csl('(remake complete_tests), names)
  end;
+++ complete_tests compiled, 407 + 268 bytes


symbolic procedure profile_compare_fn(p, q);
   (float caddr p/float cadr p) < (float caddr q/float cadr q);
+++ profile_compare_fn compiled, 28 + 8 bytes


%
% This function runs a test file and sorts out what the top 350
% functions in it. It appends their names to "profile.dat".
%

% I need to talk a little about the interaction between profiling and
% patching.  Well firstly I arrange that whenever I run a profiling job
% I rebuild REDUCE with the latest paches. This may involve re-compiling
% the patches.red source.  Thus when a test is run the current patches
% will be in place. Patched functions are first defined with funny names
% (including a hash based on their definition) and then copied into place
% when a package is loaded. However MAPSTORE and the CSL instrumentation
% attributes their cost to the hash-extended name even though the
% functions may have been called via the simple one. Thus in the face
% of patches one can expect the profile data to refer to some names that
% are long and curious looking. Throughout all this I assume that there will
% never be embarassing collisions in my hash functions.

symbolic procedure profile_a_package names;
  begin
    scalar packge, oll, w, w1, w2, quitfn, !*errcont, rr;
    princ "PROFILING: "; print car names;
    !*backtrace := nil;
    !*errcont := t;
    !*int := nil;
    packge := car names;
    verbos nil;
    load!-package packge;
    get_configuration_data();
    if get(packge,'folder) then packge := get(packge,'folder);
    packge := concat("$srcdir/../../packages/",
                concat(packge,
                  concat("/",
                    concat(car names,".tst"))));
    oll := linelength 80;
    !*mode := 'algebraic;
    window!-heading list!-to!-string explodec car names;
    quitfn := getd 'quit;
    remd 'quit;
    putd('quit, 'expr, 'posn);
    mapstore 4;  % reset counts;
    !*errcont := t;
% I try hard to arrange that even if the test fails I can continue and that
% input & output file selection is not messed up for me.
    w := wrs nil;   w1 := rds nil;
    wrs w;          rds w1;
    rr := resource!-limit(list('errorset,
                               mkquote list('in_list1, mkquote packge, t),
                               nil, nil),
                          300,  % allow 5 minutes per test
                          200,  % allow 200 megaconses
                          10000,% allow ten megabytes of I/O
                          -1);  % Do not limit Lisp-level errors at all 
    wrs w;          rds w1;
    erfg!* := nil;
    terpri();
    putd('quit, car quitfn, cdr quitfn);
    w := sort(mapstore 2, function profile_compare_fn);
    w1 := nil;
    while w do <<
        w2 := get(caar w, '!*savedef);
%       if eqcar(w2, 'lambda) then <<
%           princ "md60: "; print (caar w . cdr w2);
%           princ "= "; print md60 (caar w . cdr w2) >>;
        if eqcar(w2, 'lambda) then w1 := (caar w . md60 (caar w . cdr w2) .
                                          cadar w . caddar w) . w1;
        w := cdr w >>;
    w := w1;
    % I collect the top 350 functions as used by each test, not because all
    % that many will be wanted but because I might as well record plenty
    % of information here and discard unwanted parts later on.
    for i := 1:349 do if w1 then w1 := cdr w1;
    if w1 then rplacd(w1, nil);
    % princ "MODULE "; prin car names; princ " suggests ";
    % print for each z in w collect car z;
    w1 := open("profile.dat", 'append);
    w1 := wrs w1;
    linelength 80;
    if atom rr then printc "% +++++ Error: Resource limit exceeded";
    princ "% @@@@@ Resources used: "; print !*resources!*;
    princ "("; prin car names; terpri();
    for each n in w do <<
        princ "  ("; prin car n; princ " ";
        if posn() > 30 then << terpri(); ttab 30 >>;
        prin cadr n;
        % I also display the counts just to help me debug & for interest.
        princ " "; prin caddr n; princ " "; princ cdddr n;
        printc ")" >>;
    printc "  )";
    terpri();
    close wrs w1;
    linelength oll;
    names := cdr names;
    if null names then <<
        printc "Profiling complete";
        window!-heading "Profiling complete";
        restart!-csl t >>
    else restart!-csl('(remake profile_a_package), names)
  end;
+++ profile_a_package compiled, 379 + 240 bytes


symbolic procedure trim_prefix(a, b);
  begin
    while a and b and car a = car b do <<
      a := cdr a;
      b := cdr b >>;
    if null a then return b
    else return nil
  end;
+++ trim_prefix compiled, 18 + 8 bytes


fluid '(time_info);

symbolic procedure read_file f1;
  begin
% I take the view that I can afford to read the whole of a file into
% memory at the start of processing. This makes life easier for me
% and the REDUCE log files are small compared with current main memory sizes.
    scalar r, w, w1, n, x;
    scalar p1, p2, p3, p4, p5, p6, p7;
% To make comparisons between my CSL logs and some of the Hearn "reference
% logs", which are created using a different script, I will discard
% lines that match certain patterns!  Note that if the reference logs change
% the particular tests I perform here could become out of date! Also if any
% legitimate test output happened to match one of the following strings
% I would lose out slightly.
    p1 := explodec "REDUCE 3.8,";
    p2 := explodec "1: 1:";
    p3 := explodec "2: 2: 2:";
    p4 := explodec "3: 3: ";    % a prefix to first real line of output.
    p5 := explodec "4: 4: 4:";
    p6 := explodec "5: 5:";
    p7 := explodec "Quittin";   % nb left so that the "g" remains!
                                % this is so that the match is detected.
    r := nil;
    n := 0;
    while not ((w := readline f1) = !$eof!$) do <<
       w1 := explodec w;
       if x := trim_prefix(p4, w1) then
           r := ((n := n + 1) . list!-to!-string x) . r
       else if trim_prefix(p1, w1) or
               trim_prefix(p2, w1) or
               trim_prefix(p3, w1) or
               trim_prefix(p5, w1) or
               trim_prefix(p6, w1) or
               trim_prefix(p7, w1) then nil
       else r := ((n := n + 1) . w) . r >>;
    w := r;
% The text scanned for here is expected to match that generated by the
% test script. I locate the last match in a file, extract the numbers
% and eventually write them to testlogs/times.log
    n := explodec "Time for test:";
    while w and null (x := trim_prefix(n, explodec cdar w)) do w := cdr w;
    if null w then <<
       time_info := nil;
       return reversip r >>;
    while eqcar(x, '! ) do x := cdr x;
    w := n := nil;
    while digit car x do << w := car x . w; x := cdr x >>;
    while eqcar(x, '! ) do x := cdr x;
    if x := trim_prefix(explodec "ms, plus GC time:", x) then <<
        while eqcar(x, '! ) do x := cdr x;
        while digit car x do << n := car x . n; x := cdr x >> >>;
    if null w then w := '(!0);
    if null n then n := '(!0);
    time_info := compress reverse w . compress reverse n;
    return reversip r;
  end;
+++ read_file compiled, 258 + 76 bytes


symbolic procedure roughly_equal(a, b);
  begin
% a and b are strings repesenting lines of text. I want to test if they
% match subject to some floating point slop.
    scalar wa, wb, adot, bdot;
    if a = b then return t;
    a := explodec a;
    b := explodec b;
top:
% First deal with end of line matters.
    if null a and null b then return t
    else if null a or null b then return nil;
% next split off any bits of a and b up to a digit
    wa := wb := nil;
    while a and not digit car a do <<
       wa := car a . wa;
       a := cdr a >>;
    while b and not digit car b do <<
       wb := car b . wb;
       b := cdr b >>;
    if not (wa = wb) then return nil;
% now both a and b start with digits. I will seek a chunk of the
% form nnn.mmmE+xxx where E<sign>xxx is optional...
% Note that any leading sign on the float has been checked already!
    wa := wb := nil;
    adot := bdot := nil;
    while a and digit car a do <<
       wa := car a . wa;
       a := cdr a >>;
    if eqcar(a, '!.) then <<
       adot := t;
       wa := car a . wa;
       a := cdr a >>;
    while a and digit car a do <<
       wa := car a . wa;
       a := cdr a >>;
    if eqcar(a, '!e) or eqcar(a, '!E) then <<
       adot := t;
       wa := car a . wa;
       a := cdr a;
       if eqcar(a, '!+) or eqcar(a, '!-) then <<
          wa := car a . wa;
          a := cdr a >>;
       while a and digit car a do <<
          wa := car a . wa;
          a := cdr a >> >>;
% Now all the same to grab a float from b
    while b and digit car b do <<
       wb := car b . wb;
       b := cdr b >>;
    if eqcar(b, '!.) then <<
       bdot := t;
       wb := car b . wb;
       b := cdr b >>;
    while b and digit car b do <<
       wb := car b . wb;
       b := cdr b >>;
    if eqcar(b, '!e) or eqcar(b, '!E) then <<
       bdot := t;
       wb := car b . wb;
       b := cdr b;
       if eqcar(b, '!+) or eqcar(b, '!-) then <<
          wb := car b . wb;
          b := cdr b >>;
       while b and digit car b do <<
          wb := car b . wb;
          b := cdr b >> >>;
% Now one possibility is that I had an integer not a float,
% and in that case I want an exact match
    if not adot or not bdot then <<
       if wa = wb then goto top
       else return nil >>;
    if wa = wb then goto top;   % textual match on floating point values
    wa := compress reversip wa;
    wb := compress reversip wb;
    if fixp wa then wa := float wa;
    if fixp wb then wb := float wb;
    if not (floatp wa and floatp wb) then return nil; % messed up somehow!
    if wa = wb then goto top;
% now the crucial approximate floating point test - note that both numbers
% are positive, but that they may be extreme in range.
% As a cop-out I am going to insist that if values are either very very big
% or very very small that they match as text.
    if wa > 1.0e100 or wb > 1.0e100 then return nil;
    if wa < 1.0e-100 or wb < 1.0e-100 then return nil;
    wa := (wa - wb)/(wa + wb);
    if wa < 0 then wa := -wa;
    if wa > 0.0001 then return nil; % pretty crude!
    goto top
  end;
+++ roughly_equal compiled, 346 + 44 bytes


symbolic procedure in_sync(d1, n1, d2, n2);
  begin
    for i := 1:n1 do if d1 then <<  % skip n1 lines from d1
       d1 := cdr d1 >>;
    for i := 1:n2 do if d2 then <<  % skip n2 lines from d2
       d2 := cdr d2 >>;
% If one is ended but the other is not then we do not have a match. If
% both are ended we do have one.
    if null d1 then return null d2
    else if null d2 then return nil;
% Here I insist on 3 lines that agree before I count a match as
% having been re-established.
    if not roughly_equal(cdar d1, cdar d2) then return nil;
    d1 := cdr d1; d2 := cdr d2;
    if null d1 then return null d2
    else if null d2 then return nil;
    if not roughly_equal(cdar d1, cdar d2) then return nil;
    d1 := cdr d1; d2 := cdr d2;
    if null d1 then return null d2
    else if null d2 then return nil;
    if not roughly_equal(cdar d1, cdar d2) then return nil;
    d1 := cdr d1; d2 := cdr d2;
    if null d1 then return null d2
    else if null d2 then return nil
    else return t
  end;
+++ in_sync compiled, 110 + 20 bytes


fluid '(time_data time_ratio gc_time_ratio log_count);

symbolic procedure prinright(x, w);
  begin
    scalar xx, xl;
    xx := explodec x;
    xl := length xx;
    while w > xl do << princ " "; xl := xl + 1 >>;
    princ x;
  end;
+++ prinright compiled, 24 + 12 bytes


symbolic procedure file_compare(f1, f2, name);
  begin
    scalar i, j, d1, d2, t1, gt1, t2, gt2, time_info;
    d1 := read_file f1;
    if null time_info then t1 := gt1 := 0
    else << t1 := car time_info; gt1 := cdr time_info >>;
    d2 := read_file f2;
    if null time_info then t2 := gt2 := 0
    else << t2 := car time_info; gt2 := cdr time_info >>;
    i := wrs time_data;
    j := set!-print!-precision 3;
    prin name;
    ttab 17;
    if zerop t1 then princ "     ---"
    else << prinright(t1, 8); ttab 30; prinright(gt1, 8) >>;
    ttab 40;
    if zerop t2 then princ "     ---"
    else << prinright(t2, 9); ttab 50; prinright(gt2, 8) >>;
    ttab 60;
    if zerop t1 or zerop t2 then princ "     ***       ***"
    else begin
       scalar r1, gr1;
       r1 := float t1 / float t2;
       gr1 := float (t1+gt1)/float (t2+gt2);
% I will only use tests where the time taken was over 200ms in my eventual
% composite summary of timings, since measurement accuracy can leave the
% really short tests pretty meaningless.
       if t1 > 200 and t2 > 200 then <<
          time_ratio := time_ratio * r1;
          gc_time_ratio := gc_time_ratio * gr1;
          log_count := log_count + 1 >>;
       princ r1;
       ttab 70;
       princ gr1;
       end;
    terpri();
    set!-print!-precision j;
    wrs i;
% The next segment of code is a version of "diff" to report ways in which
% reference and recent log files match or diverge.
% I can not see a neat way to get a "structured" control structure
% here easily.  Ah well, drop back to GOTO statements!
top:
    if null d1 then <<      % end of one file
       if d2 then terpri();
       i := 0;
       while d2 and i < 20 do <<
          princ "REF "; princ caar d2; princ ":"; ttab 10; printc cdar d2;
          d2 := cdr d2;
          i := i + 1 >>;
       if d2 then printc "...";
       return >>;
    if null d2 then <<      % end of other file
       i := 0;
       while d1 and i < 20 do <<
          princ "NEW "; princ caar d1; princ ":"; ttab 10; printc cdar d1;
          d1 := cdr d1;
          i := i + 1 >>;
       if d1 then printc "...";
       return >>;
% The test "roughly_equal" compares allowing some tolerance on floating
% point values. This is because REDUCE uses platform libraries for
% floating point elementary functions and printing, so small differences
% are expected. This is perhaps uncomfortable, but is part of reality, and
% the test here makes comparison output much more useful in that the
% differences shown up are better limited towards "real" ones.
    if roughly_equal(cdar d1, cdar d2) then <<
       d1 := cdr d1;
       d2 := cdr d2;
       go to top >>;
% I will first see if there are just a few blank lines inserted into
% one or other file. This special case is addressed here because it
% appears more common a possibility than I had expected.
    if cdar d1 = "" and cdr d1 and roughly_equal(cdadr d1, cdar d2) then <<
       princ "NEW "; princ caar d1; princ ":"; ttab 10; printc cdar d1;
       d1 := cdr d1;
       go to top >>
    else if cdar d1 = "" and cdr d1 and cdadr d1 = "" and cddr d1 and
       roughly_equal(cdaddr d1, cdar d2) then <<
       princ "NEW "; princ caar d1; princ ":"; ttab 10; printc cdar d1;
       d1 := cdr d1;
       princ "NEW "; princ caar d1; princ ":"; ttab 10; printc cdar d1;
       d1 := cdr d1;
       go to top >>
    else if cdar d2 = "" and cdr d2 and
       roughly_equal(cdadr d2, cdar d1) then <<
       princ "REF "; princ caar d2; princ ":"; ttab 10; printc cdar d2;
       d2 := cdr d2;
       go to top >>
    else if cdar d2 = "" and cdr d2 and cdadr d2 = "" and cddr d2 and
       roughly_equal(cdaddr d2, cdar d1) then <<
       princ "REF "; princ caar d2; princ ":"; ttab 10; printc cdar d2;
       d2 := cdr d2;
       princ "REF "; princ caar d2; princ ":"; ttab 10; printc cdar d2;
       d2 := cdr d2;
       go to top >>;
    i := 1;
seek_rematch:
    j := 0;
inner:
    if in_sync(d1, i, d2, j) then <<
       terpri();
       for k := 1:i do <<
          princ "NEW "; princ caar d1; princ ":"; ttab 10; printc cdar d1;
          d1 := cdr d1 >>;
       for k := 1:j do <<
          princ "REF "; princ caar d2; princ ":"; ttab 10; printc cdar d2;
          d2 := cdr d2 >>;
% Should be in step again here.
       if null d1 then return
       else go to top >>;
    j := j + 1;
    i := i - 1;
    if i >= 0 then go to inner;
    i := j;
% I am prepared to seek 80 lines ahead on each side before I give up.
% The number 80 is pretty much arbitrary.
    if i < 80 then goto seek_rematch;
    terpri();
    i := 0;
    while d2 and i < 20 do <<
       princ "REF "; princ caar d2; princ ":"; ttab 10; printc cdar d2;
       d2 := cdr d2;
       i := i+1 >>;
    if d2 then printc "...";
    i := 0;
    while d1 and i < 20 do <<
       princ "NEW "; princ caar d1; princ ":"; ttab 10; printc cdar d1;
       d1 := cdr d1;
       i := i+1 >>;
    if d1 then printc "...";
    printc "Comparison failed."
  end;
+++ file_compare compiled, 792 + 144 bytes


fluid '(which_module);

symbolic procedure check_a_package;
  begin
    scalar oll, names, p1, logname, mylogname, mylog, reflogname, reflog,
           time_data, time_ratio, gc_time_ratio, log_count;
    get_configuration_data();
    if boundp 'which_module and symbol!-value 'which_module and
       not (symbol!-value 'which_module = "") then <<
       names := compress explodec symbol!-value 'which_module;
       if member(names, reduce_test_cases) then names := list names
       else error(0, list("unknown module to check", which_module)) >>
    else names := reduce_test_cases;
% I write a summary of timing information into csllogs/times.log
    time_data := open("testlogs/times.log", 'output);
    p1 := wrs time_data;
    princ "MODULE";
    ttab 21; princ "Local";     ttab 32; princ "(GC)";
    ttab 40; princ "Reference"; ttab 52; princ "(GC)";
    ttab 55; princ "Ratio";     ttab 65; printc "inc GC";
    