Reduce (Free CSL version), 23-Apr-13 ...




% This file can be run to turn bits of the REDUCE source code
% into C so that this C can be compiled and linked in to make a
% customised CSL executable that will red REDUCE faster.
%
% Run this using bootstrapreduce.img to select code to compile into C.
% The functions to be compiled are extracted from a file "profile.dat"
% that was created by "profile.red".
%

symbolic;
nil



% Three major parameters are available:
%
%   fnames       a list of files to create. Making the list longer (or
%                shorter) changes the amount of C that can be created.
%                The CSL source code has to know how many there are, and
%                its current default is for 12 files.
%
%   size_per_file
%                this guides the compiler about how much to put in each
%                generated file, where the value 7000 results in each
%                file of generated C being in the range 120 to 150 Kbytes.
%
%   force_count  indicates how many functions from alg.tst statistics should
%                be included before anything else.
%

%
% Also if "how_many" is set then this will limit the total number of
% functions that are compiled into C. Since I expect to pass that via a
% command line   "-dhow_many=362"  etc I allow for it being a string
% not a number to start with. In ordinary circumstances this will not be
% used, however it has proved INVALUABLE when tracking down cases where
% compilation into C causes changes in behaviour... how_many can be used
% with a binary-chop selection process to discover exactly which function
% causes upset when compiled into C.  Of course in release quality code I
% hope there are no such cases!

global '(fnames size_per_file force_count how_many);
nil



fnames := '("u01" "u02" "u03" "u04" "u05"
            "u06" "u07" "u08" "u09" "u10"
            "u11" "u12");
("u01" "u02" "u03" "u04" "u05" "u06" "u07" "u08" "u09" "u10" "u11" "u12")



size_per_file := 7000;
7000



force_count := 350;
350



if not boundp 'how_many then how_many := 1000000
else << how_many := compress explodec how_many;
        if not numberp how_many then how_many := 1000000 >>;
1000000





on comp;
nil




load!-module 'remake;
nil



% Here I need to consider the issue of patches.  First consider patches that
% had been in force when "profile.red" was run. In such cases a patched
% function f1 has an associated replacement f1_123456789 (the numeric suffix
% is a checksum on the new definition) and when the profile job was run
% this replacement will have had its definition copied to f1. The way in
% which CSL's mapstore function extracts counts will mean that the
% thing in profile.dat relate to f1_123456789.
% Usually things in profile.dat are in the form
%    (function_name . checksum_of_definition)
% but for these patched things I will instead record
%    (original_function_name package_involved)
% This can be distinguished because it has a symbol not a number as
% the second component. To make this possible each patch function
% f1_123456789 would have to have this information attached to it
% when the profiling job was run.
%
% But I suppose have now obtained a newer version of the patches file. So
% now the correct patch for f1 will be f1_abcdef. If f1 was in one of the
% REDUCE core packages (eg "alg") then both the functions f1_123456789 and
% f1_abcdef will be in memory now, but it will be the latter that will
% have been copied to plain old f1.  In other cases f1_123456789 will now
% have been totally lost and the definition of f1_abcdef will be in the
% patches module.  Furthermore the new patches file may patch another
% function f2 that had not previously been subject to patching, but
% that had been selected for compilation into C. And in a truly bad
% case the complete REDUCE sources will contain several functions named
% f2 and of course the patches file identifies which one it is interested
% in by the name of the package it is in.
%
% The response to all this I will use here is intended to make life
% reasonably SIMPLE for me in a complicated situation. So I first
% collect the set of names that I think need compiling into C. Then I
% grab a list of the names of things defined in the current patches file.
% If a function in the paches file has a name similar enough (!) to one that
% I have already decided to compile into C then I will schedule it for
% compilation into C too.  Because of the hash suffix added to names in the
% patches file defining a C version having those things present in the Lisp
% kernel should never be a problem - after all the patches file itself is
% intended to be loaded all the time.  So the main down-side of this is
% that I will sometimes find that I have compiled into C either patch
% versions of a function when it was another version of that code that was
% time-critical or that I have compiled into C two generations of
% patch function. These waste opportunity and space by having some
% things compiled into C that might not really justify that, but this
% seems a modest cost.

% Note that parts of the above may apply if the sources of REDUCE are
% changed inANY manner (not just a special patches file) but the C code
% is not re-created.

fluid '(w_reduce requests);
nil



w_reduce := requests := nil;
nil



% I make a list of all the functions that profile data suggests that
% I should compile into C.  The master copy of the profile data is
% usually expected to be in "$destdir".

symbolic procedure read_profile_data file;
  begin
    scalar w0, w1;
    if not errorp(w0 := errorset(list('open, file, ''input), nil, nil)) then <<
      w0 := rds car w0;
      while not errorp (w1 := errorset('(read), nil, nil)) and
            not eqcar(w1, !$eof!$) do
        requests := car w1 . requests;
% The data structure read in here will be of the form
%    ((module-name f-name1 f_name2 ...) (module-name ...) ...)
% where within each module the requested functions have been listed in
% order of priority.
      close rds w0 >>
  end;
+++ read_profile_data compiled, 46 + 32 bytes

read_profile_data




off echo;
nil


nil


nil



% As a fairly shameless hack I am going to insist on compiling ALL the
% things that the "alg" test uses. That is because this one test
% fiel has been used for many years to give a single performance
% figure for REDUCE.  In fact it is not too bad to pay lots of
% attention to it since it exercises the basic core algebra and so what is
% good for it is good for quite a lot of everybody else. However by
% tuning this selection process you can adjust the way REDUCE balances
% its speed in different application areas.

w_reduce := assoc('alg, requests)$

requests := for each x in delete(w_reduce, requests) collect cdr x$

w_reduce := reverse cdr w_reduce$

d := length w_reduce - force_count;
0


if d > 0 then for i := 1:d do w_reduce := cdr w_reduce;
nil



length w_reduce;
350



% Now I will merge in suggestions from all other modules in
% breadth-first order of priority
% Ie if I have modules A, B, C and D (with A=alg) and each has in it
% functions a1, a2, a3 ... (in priority odder) then I will make up a list
% here that goes
%
%   a1 a2 a3 ... an b1 c1 d2 b2 c2 d2 b3 c3 d3 b4 c4 d4 ...
%
% so that the first n items from A get priority and after that B, C and D
% will get about balanced treatment if I have to truncate the list at
% some stage.

symbolic procedure membercar(a, l);
  if null l then nil
  else if a = caar l then t
  else membercar(a, cdr l);
+++ membercar compiled, 13 + 12 bytes

membercar



fg := t;
t


while fg do <<
   fg := nil;
   for each x on requests do 
     if car x then <<
       if k := assoc(caaar x, w_reduce) then <<
          if not (cadr k = cadaar x) then <<
             prin caaar x; printc " has multiple definition";
             princ "   keep version with checksum: "; print cadr k;
             princ "   ignore: "; print cadaar x;
             terpri() >> >>
% ORDP is a special case because I have put a version of it into the
% CSL kernel by hand, and any redefinition here would be unfriendly and
% might clash with that.
       else if caaar x = 'ordp then printc "Ignoring ORDP (!)"	
       else w_reduce := caar x . w_reduce;
       fg := t;
       rplaca(x, cdar x) >> >>;butes has multiple definition
   keep version with checksum: 1146623304869648665
   ignore: 1422349430924847793

Ignoring ORDP (!)
get_token has multiple definition
   keep version with checksum: 84218399262563960
   ignore: 346669403705527921

find has multiple definition
   keep version with checksum: 198032571488044209
   ignore: 2209563000115902878

lex has multiple definition
   keep version with checksum: 886603841515963299
   ignore: 1830164665190725278

get_content has multiple definition
   keep version with checksum: 1970880645516996170
   ignore: 8851058052865413

revalind has multiple definition
   keep version with checksum: 1015475537681779373
   ignore: 2271838791268871111

multf has multiple definition
   keep version with checksum: 1145738068829297624
   ignore: 1798026931228554913

getrtype2 has multiple definition
   keep version with checksum: 2259099167249843967
   ignore: 1190902578670640399

ordop has multiple definition
   keep version with checksum: 300173128121007380
   ignore: 319399836778760169

expression has multiple definition
   keep version with checksum: 86144681085888487
   ignore: 457348840771160114

getmat has multiple definition
   keep version with checksum: 575108285554068056
   ignore: 1035136759828626421

maprint has multiple definition
   keep version with checksum: 481953228278592938
   ignore: 1099555287974329312

bc_prod has multiple definition
   keep version with checksum: 1965149522019676221
   ignore: 1177742759903326742

opmtch has multiple definition
   keep version with checksum: 1711378154081247636
   ignore: 2222289634566396036

multfnc has multiple definition
   keep version with checksum: 1783460124179304665
   ignore: 1456356831468820186

sub_math has multiple definition
   keep version with checksum: 2269601967958131586
   ignore: 1579480691574328212

charnump!: has multiple definition
   keep version with checksum: 443984344220488338
   ignore: 1466982547297505734

subsetp has multiple definition
   keep version with checksum: 656082696218474237
   ignore: 2287352679360584253

setmat has multiple definition
   keep version with checksum: 1607288821199188598
   ignore: 1413116359837039401

bc_zero!? has multiple definition
   keep version with checksum: 920281661504967677
   ignore: 1055235038687169459

deg!*form has multiple definition
   keep version with checksum: 1291529951467195606
   ignore: 835050311016446263

getrtype has multiple definition
   keep version with checksum: 633194027386232454
   ignore: 42193840165215285

ciml has multiple definition
   keep version with checksum: 1475924848882708020
   ignore: 951464393537965753

dummyp has multiple definition
   keep version with checksum: 1059291590851201157
   ignore: 611281244467579023

simpiden has multiple definition
   keep version with checksum: 2147502071933457471
   ignore: 660785620250739349

getrtype1 has multiple definition
   keep version with checksum: 1725111783704530046
   ignore: 1482101809043974757

flatindxl has multiple definition
   keep version with checksum: 1634878911125166156
   ignore: 1939509767019285614

diffp has multiple definition
   keep version with checksum: 686548041267601681
   ignore: 10690658023879982

matrixp has multiple definition
   keep version with checksum: 393345324122178368
   ignore: 192209128832148545

addpf has multiple definition
   keep version with checksum: 189716299280573791
   ignore: 369308832952505891

equalreval has multiple definition
   keep version with checksum: 41285753939560881
   ignore: 954477476166961243

matsm1 has multiple definition
   keep version with checksum: 1770972277238345170
   ignore: 672151372625463653

size_of_matrix has multiple definition
   keep version with checksum: 2182410183307985568
   ignore: 1062701889965847166

dv_skel2factor1 has multiple definition
   keep version with checksum: 327933363320085506
   ignore: 1305024946569793102

relnrd has multiple definition
   keep version with checksum: 24538959483713553
   ignore: 239231885835383887

onoff has multiple definition
   keep version with checksum: 1683519408599250876
   ignore: 200457871232818143

matsm1 has multiple definition
   keep version with checksum: 1770972277238345170
   ignore: 672151372625463653

diffp has multiple definition
   keep version with checksum: 686548041267601681
   ignore: 1486339412629426501

cnml has multiple definition
   keep version with checksum: 856596148120713434
   ignore: 868676339941485576

ndepends has multiple definition
   keep version with checksum: 1804609441824811747
   ignore: 26076411130293408

dv_skelsplit has multiple definition
   keep version with checksum: 1422631530117094132
   ignore: 2267035666787199504

indvarprt has multiple definition
   keep version with checksum: 1842394992975792541
   ignore: 1019457604571630099

rappend has multiple definition
   keep version with checksum: 1509445515969905011
   ignore: 1969279328214008581

opfneval has multiple definition
   keep version with checksum: 1350485962354617923
   ignore: 2026915149612325302

canonical has multiple definition
   keep version with checksum: 59805164132039054
   ignore: 1380755806494857068

subs3f1 has multiple definition
   keep version with checksum: 1003127167443182107
   ignore: 1249568680921534301

matsm1 has multiple definition
   keep version with checksum: 1770972277238345170
   ignore: 672151372625463653

isimp1 has multiple definition
   keep version with checksum: 1423826862473036528
   ignore: 733375013020065996

rrest has multiple definition
   keep version with checksum: 2017859597504101891
   ignore: 1467435801219295570

diffp has multiple definition
   keep version with checksum: 686548041267601681
   ignore: 1486339412629426501

!*num2id has multiple definition
   keep version with checksum: 826037642311701975
   ignore: 794281051045629523

indvarprt has multiple definition
   keep version with checksum: 1842394992975792541
   ignore: 1019457604571630099

matsm1 has multiple definition
   keep version with checksum: 1770972277238345170
   ignore: 672151372625463653

lengthreval has multiple definition
   keep version with checksum: 2236667083113631832
   ignore: 1932118436265810284

matsm1 has multiple definition
   keep version with checksum: 1770972277238345170
   ignore: 672151372625463653

copy_mat has multiple definition
   keep version with checksum: 242186463658415657
   ignore: 207346339475329132

multsm has multiple definition
   keep version with checksum: 185823701316769195
   ignore: 60626437380258426

listeval has multiple definition
   keep version with checksum: 1153493095798721470
   ignore: 1473514846559317350

matsm1 has multiple definition
   keep version with checksum: 1770972277238345170
   ignore: 672151372625463653

rcons has multiple definition
   keep version with checksum: 314911085964810488
   ignore: 681622904575327542

matsm1 has multiple definition
   keep version with checksum: 1770972277238345170
   ignore: 672151372625463653


nil




% Now I scan all pre-compiled modules to recover source versions of the
% selected REDUCE functions. The values put as load!-source properties
% are checksums of the recovered definitions that I would be prepared
% to accept.

for each n in w_reduce do put(car n, 'load!-source, cdr n);
nil



w_reduce := for each n in w_reduce collect car n$


for each m in library!-members() do load!-source m;
nil



% Now deal with patches...

load!-source := t;
t


if modulep 'patches then patch!-functions := load!-source 'patches
else patch!-functions := nil;
nil




% Some of the functions just collected are not patches for bits of REDUCE
% but are the code that installs the patches. I do not worry too much
% about that here.
% Now I will scan down w_reduce (the list of all things to be compiled into C)
% and if that contains an entry either f1 or f1_123456789 and there is
% an entry f2_abcdef in the list of patch-functions then I will
% insert f2_abcdef into the list of things to be compiled into C just
% next to plain f2 or f2_123456789.
%
% The way I do this will often set up a few false-matches but the cost of
% them is just that some unimportant things will get compiled into C.


global '(tag!-chars);
nil



tag!-chars := explodec "0123456789abcdefghijklmnopqrstuvwxyz";
(!0 !1 !2 !3 !4 !5 !6 !7 !8 !9 a b c d e f g h i j k l m n o p q r s t u v w x y
z)



symbolic procedure trim!-suffix name;
  begin
    scalar w;
    w := reverse explode name;
    if eqcar(w, '!_) then w := cdr w;
    if null w or not member(car w, tag!-chars) then return nil;
    w := cdr w;
    while w and member(car w, tag!-chars) do w := cdr w;
    if not eqcar(w, '!_) then return nil;
    w := cdr w;
    if null w then return nil
    else return compress reverse w
  end;
+++ trim!-suffix compiled, 49 + 16 bytes

trim!-suffix



w := w_reduce$

w_reduce := nil;
nil



while w do <<
   w_reduce := car w . w_reduce;
   p := trim!-suffix car w;
   for each n in patch!-functions do
     if not (n = car w) and
        p and
        not (n member w_reduce) and
        p = trim!-suffix n then <<
           w_reduce := n . w_reduce;
           princ "+++ Also C-compile "; prin n; princ " as match for ";
           prin car w; princ ": root is "; print p >>;
   w := cdr w >>;
nil




verbos nil;
0


global '(rprifn!*);
nil



on fastfor, fastvector, unsafecar;
nil



symbolic procedure listsize(x, n);
   if null x then n
   else if atom x then n+1
   else listsize(cdr x, listsize(car x, n+1));
+++ listsize compiled, 21 + 8 bytes

listsize



<<

count := 0; 

while fnames do begin
   scalar name, bulk;
   name := car fnames;
   princ "About to create "; printc name;
   c!:ccompilestart(name, name, "$destdir/generated-c", nil);
   bulk := 0;
   while bulk < size_per_file and w_reduce and how_many > 0 do begin
      scalar name, defn;
      name := car w_reduce;
      if null (defn := get(name, '!*savedef)) then <<
         princ "+++ "; prin name; printc ": no saved definition found";
         w_reduce := cdr w_reduce >>
      else <<
         bulk := listsize(defn, bulk);
         if bulk < size_per_file then <<
            c!:ccmpout1 ('de . name . cdr defn);
            how_many := how_many - 1;
            count := count + 1;
            w_reduce := cdr w_reduce >> >> end;
   eval '(c!-end);
   fnames := cdr fnames
   end;

terpri();
printc "*** End of compilation from REDUCE into C ***";
terpri();

bulk := 0;
% I list the next 50 functions that WOULD get selected - just for interest.
if null w_reduce then printc "No more functions need compiling into C"
else while bulk < 50 and w_reduce do
  begin
     name := car w_reduce;
     if null (defn := get(name, '!*savedef)) then <<
        princ "+++ "; prin name; printc ": no saved definition found";
        w_reduce := cdr w_reduce >>
     else <<
        bulk := bulk+1;
        print name;
        w_reduce := cdr w_reduce >> end;

terpri();
prin count; printc " functions compiled into C";

nil >>;About to create u01
C file = "$destdir/generated-c/u01"
Compiling noncomp ... 
Compiling simpcar ... 
Compiling reval ... 
Compiling terminalp ... 
Compiling delcp ... 
Compiling argsofopr ... 
Compiling num!-exponents ... 
Compiling mchkopt ... 
Compiling exchk ... 
Compiling !*ssave ... 
Compiling noncomfp ... 
Compiling !*d2q ... 
Compiling getrtypeor ... 
Compiling arraychk ... 
Compiling arrayp ... 
Compiling noncomfp1 ... 
Compiling noncomp1 ... 
Compiling reval_without_mod ... 
Compiling getrtypecar ... 
Compiling addcomment ... 
Compiling prin2x ... 
Compiling degr ... 
Compiling noncomlistp ... 
Compiling mchk!* ... 
Compiling ordop ... 
Compiling smember ... 
Compiling timesip ... 
Compiling expchk ... 
Compiling readch1 ... 
Compiling !:zerop ... 
Compiling !*q2a1 ... 
Compiling multd ... 
Compiling subs2f ... 
Compiling aeval!* ... 
Compiling hevenp ... 
Compiling aconc ... 
Compiling add_prin_char ... 
Compiling mkvar ... 
Compiling getrtype ... 
Compiling noncomdel ... 
Compiling subs2q ... 
Compiling prepf1 ... 
Compiling negnumberchk ... 
Compiling prepf ... 
Compiling noncomp!* ... 
Compiling getrtype2 ... 
Compiling addf ... 
Compiling multsq ... 
Compiling getel1 ... 
Compiling multf ... 
Compiling replus ... 
Compiling quotf ... 
Compiling addsq ... 
Compiling getpower ... 
Compiling prin2!* ... 
Compiling ordpp ... 
Compiling scprint ... 
Compiling mtp ... 
Compiling getelv ... 
Compiling reval2 ... 
Compiling retimes ... 
Compiling mtchp1 ... 
Compiling mapcons ... 
Compiling exptchksq ... 
Compiling gcdfd1 ... 
Compiling getel ... 
Compiling multd!* ... 
Compiling negsq ... 
Compiling aconc!* ... 
Compiling carx ... 
Compiling mtchp ... 
Compiling nb ... 
Compiling toknump ... 
Compiling simpplus ... 
Compiling argnochk ... 
Compiling mchk ... 
Compiling sqchk ... 
About to create u02
C file = "$destdir/generated-c/u02"
Compiling subs2f1 ... 
Compiling prepsq ... 
Compiling update!-pline ... 
Compiling prepsqxx ... 
Compiling simpminus ... 
Compiling ordpa ... 
Compiling setdiff ... 
Compiling subs2 ... 
Compiling ordad ... 
Compiling noncomperm ... 
Compiling exc ... 
Compiling mk!*sq ... 
Compiling negf ... 
Compiling simp!* ... 
Compiling ckpreci!# ... 
Compiling ord2 ... 
Compiling prepd ... 
Compiling sqform ... 
Compiling reval1 ... 
Compiling sinitl ... 
Compiling simp ... 
Compiling retimes1 ... 
Compiling rationalizei ... 
Compiling aeval ... 
Compiling algid ... 
Compiling maprint ... 
Compiling !*n2f ... 
Compiling smemql ... 
Compiling mcharg2 ... 
Compiling mksf ... 
Compiling prepsqx ... 
Compiling emtch ... 
Compiling setkorder ... 
Compiling simpdiff ... 
Compiling oprin ... 
Compiling minusf ... 
Compiling cdarx ... 
Compiling fkern ... 
Compiling revpr ... 
Compiling putpline ... 
About to create u03
C file = "$destdir/generated-c/u03"
Compiling simptimes ... 
Compiling exchk2 ... 
Compiling eolcheck ... 
Compiling quotf1 ... 
Compiling layout!-formula ... 
Compiling isimp1 ... 
Compiling quotk ... 
Compiling mcharg1 ... 
Compiling setel ... 
Compiling sub2chk ... 
Compiling appn ... 
Compiling lt!* ... 
Compiling gadd ... 
Compiling multdm ... 
Compiling !:minus ... 
Compiling isimp2 ... 
Compiling exchk1 ... 
Compiling xcomment ... 
Compiling lnc ... 
Compiling gcdf ... 
Compiling mkarray1 ... 
Compiling smemqlp ... 
Compiling formlis ... 
Compiling rank ... 
Compiling subs3f ... 
Compiling convertmode ... 
Compiling mtchk ... 
Compiling mksq ... 
Compiling intexprnp ... 
Compiling kernp ... 
Compiling msappend ... 
Compiling xnp ... 
Compiling errorp ... 
Compiling ckrn1 ... 
Compiling mkspm ... 
Compiling setel1 ... 
Compiling appr ... 
Compiling mcharg ... 
Compiling sf_member ... 
Compiling reorder ... 
Compiling inprint ... 
Compiling addd ... 
Compiling sizchk ... 
Compiling gcdfd ... 
Compiling quotfd ... 
Compiling difff ... 
Compiling quotsq ... 
Compiling errorset!* ... 
About to create u04
C file = "$destdir/generated-c/u04"
Compiling gcdf1 ... 
Compiling read!-comment1 ... 
Compiling revlis ... 
Compiling adddm ... 
Compiling mvar_member ... 
Compiling comb ... 
Compiling gcddd ... 
Compiling opmtch ... 
Compiling token1 ... 
Compiling prinfit ... 
Compiling opmtchrevop ... 
Compiling updtemplate ... 
Compiling reordsq ... 
Compiling invsq ... 
Compiling scan ... 
Compiling kernlp ... 
Compiling multfnc ... 
Compiling remove!-free!-vars!-l ... 
Compiling simpexpon ... 
Compiling subs3f1 ... 
Compiling rmultpf ... 
Compiling mkg1 ... 
Compiling intexprlisp ... 
Compiling sort ... 
Compiling mchsarg ... 
Compiling gcdf!* ... 
Compiling rmplus ... 
Compiling rnzerop!: ... 
Compiling unplus ... 
Compiling prepsq!*2 ... 
Compiling sprgen1 ... 
Compiling frvarsof ... 
Compiling simpdot ... 
Compiling gck2 ... 
Compiling terpri!* ... 
Compiling canonsq ... 
Compiling formop ... 
Compiling multop ... 
Compiling simpexpon1 ... 
Compiling subs3q ... 
Compiling memlis ... 
About to create u05
C file = "$destdir/generated-c/u05"
Compiling comfac ... 
Compiling ckrn ... 
Compiling maprin ... 
Compiling rnconc ... 
Compiling chknewnam ... 
Compiling raddf ... 
Compiling getrmacro ... 
Compiling comfac!-to!-poly ... 
Compiling diffsq ... 
Compiling expdrmacro ... 
Compiling xread ... 
Compiling exptpri ... 
Compiling algmodep ... 
Compiling simprecip ... 
Compiling addns ... 
Compiling !*!*a2i ... 
Compiling quotof ... 
Compiling form1 ... 
Compiling formc ... 
Compiling getrtype1 ... 
Compiling command1 ... 
Compiling convertmode1 ... 
Compiling !*s2arg ... 
Compiling quotofd ... 
Compiling vmult ... 
Compiling quotodd ... 
Compiling rnonep!: ... 
Compiling klistt ... 
Compiling resimp ... 
Compiling mkkl ... 
Compiling reordop ... 
Compiling xread1 ... 
Compiling dfprintfn ... 
Compiling !*sqprint ... 
Compiling depends ... 
Compiling rnequiv ... 
Compiling quotdd ... 
Compiling macrochk ... 
Compiling delasc ... 
Compiling resimp1 ... 
Compiling lispapply ... 
Compiling ldepends ... 
Compiling setcloc!* ... 
About to create u06
C file = "$destdir/generated-c/u06"
Compiling nssimp ... 
Compiling wtchk ... 
Compiling mchkopt1 ... 
Compiling gcdf2 ... 
Compiling arglist_member ... 
Compiling mkvarg ... 
Compiling vmult1 ... 
Compiling simpiden ... 
Compiling condterpri ... 
Compiling prepreform ... 
Compiling revalx ... 
Compiling !*!*a2s ... 
Compiling eofcheck ... 
Compiling veval ... 
Compiling remcomma ... 
Compiling add2inputbuf ... 
Compiling requote1 ... 
Compiling simpatom ... 
Compiling symbol ... 
Compiling subs3t ... 
Compiling mchcomb ... 
Compiling quotematrix ... 
Compiling mkrn ... 
Compiling kahane ... 
Compiling exptsq ... 
Compiling dfn_prop ... 
Compiling spurr ... 
About to create u07
C file = "$destdir/generated-c/u07"
Compiling spur0 ... 
Compiling simpexpt ... 
Compiling bassoc ... 
Compiling simp_without_resimp ... 
Compiling int!-equiv!-chk ... 
Compiling setcdr ... 
Compiling rationalizesq ... 
Compiling addfactors ... 
Compiling sq_member ... 
Compiling remove!-free!-vars ... 
Compiling dotord ... 
Compiling simp0 ... 
Compiling remove ... 
Compiling mksp ... 
Compiling xsimp ... 
Compiling rmsubs ... 
Compiling intargfn ... 
Compiling evalvars ... 
Compiling subf1 ... 
Compiling dsimp ... 
Compiling identity ... 
Compiling simpdf ... 
Compiling valuechk ... 
Compiling sqhorner!* ... 
Compiling prepreform1 ... 
Compiling powers ... 
Compiling prepsq!*0 ... 
Compiling let2 ... 
Compiling unreval ... 
Compiling freeof ... 
Compiling rcons ... 
Compiling simpquot ... 
About to create u08
C file = "$destdir/generated-c/u08"
Compiling token!-number ... 
Compiling assgnpri ... 
Compiling getsetvars ... 
Compiling add2resultbuf ... 
Compiling listp ... 
Compiling form ... 
Compiling mchkminus ... 
Compiling let3 ... 
Compiling rlis ... 
Compiling sprgen ... 
Compiling forstat ... 
Compiling sfp ... 
Compiling powers0 ... 
Compiling brace ... 
Compiling evload ... 
Compiling module ... 
Compiling mkstrng ... 
Compiling eqexpr ... 
Compiling diffp ... 
Compiling put!-avalue ... 
Compiling spur0i ... 
Compiling extmult ... 
Compiling setk ... 
Compiling domainvalchk ... 
Compiling stable!-sortip ... 
Compiling letscalar ... 
Compiling mkprec ... 
Compiling fluid ... 
About to create u09
C file = "$destdir/generated-c/u09"
Compiling prepsq!*1 ... 
Compiling mkdmoderr ... 
Compiling ratfunpri1 ... 
Compiling quotpri ... 
Compiling kernord!-sort ... 
Compiling put!-kvalue ... 
Compiling revlis_without_mode ... 
Compiling subs2!* ... 
Compiling command ... 
Compiling subs2chk ... 
Compiling dsimptimes ... 
Compiling remove!-free!-vars!* ... 
Compiling innprodp2 ... 
Compiling add1lis ... 
Compiling wuconstantp ... 
Compiling mkcopy ... 
Compiling nth ... 
Compiling delall ... 
Compiling ps!:getv ... 
Compiling c!:ordxp ... 
Compiling dm!-abs ... 
Compiling evcomp ... 
Compiling evmatrixcomp2 ... 
Compiling xval ... 
Compiling convprec ... 
Compiling physopp ... 
Compiling memq_edgelist ... 
Compiling c_zero ... 
Compiling sieve_pv0 ... 
Compiling quotelist ... 
Compiling pnth ... 
Compiling find2 ... 
Compiling csl_normbf ... 
Compiling zero2nil ... 
Compiling binding ... 
Compiling vevmtest!? ... 
Compiling vbcsize ... 
Compiling wedgefax ... 
Compiling times!: ... 
Compiling round!* ... 
Compiling noncomp2 ... 
Compiling union_edge ... 
Compiling termsf ... 
Compiling mo_divides!? ... 
Compiling dlesslex ... 
Compiling pappl ... 
Compiling adjoin!-term ... 
Compiling modzerop!: ... 
Compiling tayexp!-lessp ... 
Compiling get!+mat!+entry ... 
Compiling butes ... 
Compiling bftrim!: ... 
Compiling numlis ... 
Compiling !:minusp ... 
Compiling pm!:free ... 
Compiling buchvevdivides!? ... 
Compiling mkround ... 
Compiling bc_prod ... 
Compiling reduce_pv ... 
Compiling modonep!: ... 
Compiling finde ... 
Compiling nocp ... 
Compiling compress!* ... 
Compiling ps!:order ... 
Compiling !:onep ... 
Compiling bcprod ... 
Compiling sublistp ... 
Compiling order!: ... 
Compiling pprin2 ... 
Compiling isanindex ... 
Compiling ring_ecart ... 
Compiling unpkp ... 
Compiling multiply!-by!-constant!-mod!-p ... 
Compiling get_token ... 
Compiling ps!:last!-term ... 
Compiling c!:ordexn ... 
Compiling nil2zero ... 
Compiling bczero!? ... 
Compiling evzero!? ... 
Compiling wedgepf2 ... 
Compiling makelist ... 
Compiling !*physopp ... 
Compiling mo_vdivides!? ... 
Compiling pappl0 ... 
Compiling !*i2mod ... 
Compiling general!-modular!-times ... 
Compiling minus!: ... 
Compiling constp ... 
Compiling mval ... 
About to create u10
C file = "$destdir/generated-c/u10"
Compiling evmatrixcomp1 ... 
Compiling domain!*p ... 
Compiling angles!-equal ... 
Compiling mo!=sprod ... 
Compiling sieve_pv ... 
Compiling upbve ... 
Compiling modtimes!: ... 
Compiling general!-modular!-plus ... 
Compiling remainder!-in!-vector ... 
Compiling tayexp!-plus2 ... 
Compiling attributes ... 
Compiling bcint2op ... 
Compiling multpfsq ... 
Compiling prin2la ... 
Compiling collectindices ... 
Compiling union_edges ... 
Compiling mo_ecart ... 
Compiling dless ... 
Compiling pv_multc ... 
Compiling notstring ... 
Compiling evsum ... 
Compiling factorordp ... 
Compiling opmtch!* ... 
Compiling fs!:timestermterm ... 
Compiling mo!=sum ... 
Compiling pcmult ... 
Compiling pkp ... 
Compiling !*d2n ... 
Compiling tayexp!-greaterp ... 
Compiling get!+row!+nr ... 
Compiling printout ... 
Compiling rd!:onep ... 
Compiling !*q2a ... 
Compiling evcompless!? ... 
Compiling peel ... 
Compiling i2rd!* ... 
Compiling fprin2 ... 
Compiling listsum ... 
Compiling fs!:angle!-order ... 
Compiling mo!=degcomp ... 
Compiling rev ... 
Compiling plus!-mod!-p ... 
Compiling get!+vec!+entry ... 
Compiling get_content ... 
Compiling round!:mt ... 
Compiling mgenp ... 
Compiling rd!:zerop ... 
Compiling hasonephysop ... 
Compiling qassoc ... 
Compiling fs!:timesterm ... 
Compiling cali_trace ... 
Compiling hasonevector ... 
Compiling pv_sort2 ... 
Compiling bfzerop!: ... 
Compiling symbollessp ... 
Compiling exptchk ... 
Compiling !*collectphysops ... 
Compiling getroad ... 
Compiling pv_renorm ... 
Compiling times!-term!-mod!-p ... 
Compiling striptag ... 
Compiling absf ... 
Compiling lex ... 
Compiling dm!-times ... 
Compiling initcomb ... 
Compiling round!:last ... 
Compiling rd!:minusp ... 
Compiling prin2!-downcase ... 
Compiling constimes ... 
Compiling fs!:plus ... 
Compiling mo!=shorten ... 
Compiling dquot ... 
Compiling lcm ... 
Compiling !*i2rn ... 
Compiling kernels ... 
Compiling get!+vec!+dim ... 
Compiling isvalid ... 
Compiling freexp ... 
Compiling vevcompless!? ... 
Compiling evmatrixcomp ... 
Compiling monordp ... 
Compiling quotfm ... 
Compiling tensopp ... 
Compiling kernels1 ... 
Compiling bas_rep ... 
Compiling pv_sort ... 
About to create u11
C file = "$destdir/generated-c/u11"
Compiling evaluate!-in!-order ... 
Compiling rdprep1 ... 
Compiling fullcopy ... 
Compiling dm!-difference ... 
Compiling copy_mat ... 
Compiling vevtdeg ... 
Compiling xdiv ... 
Compiling !:times ... 
Compiling physopsim!* ... 
Compiling mo_sum ... 
Compiling pv_add ... 
Compiling copy ... 
Compiling indent!* ... 
Compiling multi_isarb_compl ... 
Compiling equal!: ... 
Compiling evlexcomp ... 
Compiling chundexp ... 
Compiling delallasc ... 
Compiling !*physopp!* ... 
Compiling nonzero!-length ... 
Compiling mo_compare ... 
Compiling cdiv ... 
Compiling insert_pv ... 
Compiling general!-modular!-number ... 
Compiling tayexp!-minusp ... 
Compiling multi_isarb_int ... 
Compiling rd!:minus ... 
Compiling on1 ... 
Compiling evtdeg ... 
Compiling groebsearchinlist ... 
Compiling find_item ... 
Compiling csl_timbf ... 
Compiling !:plus ... 
Compiling freeofdepl ... 
Compiling idlistp ... 
Compiling sroad ... 
Compiling dp!=ecart ... 
Compiling pv_sort1 ... 
Compiling gen!-mult!-by!-const!-mod!-p ... 
Compiling c!:ordexp ... 
Compiling times!-mod!-p ... 
Compiling tayexp!-difference ... 
Compiling get!+col!+nr ... 
Compiling list2string ... 
Compiling findrow ... 
Compiling nextarg ... 
Compiling off1 ... 
Compiling atomf ... 
Compiling maxdeg ... 
Compiling noncommuting ... 
Compiling repeatsp ... 
Compiling bc!=simp ... 
Compiling pv_applp ... 
Compiling rntimes!: ... 
Compiling !*modular2f ... 
Compiling divide!: ... 
Compiling praddf ... 
Compiling powers2 ... 
Compiling find ... 
Compiling mkwedge ... 
Compiling noncommutingf ... 
Compiling mo!=lexcomp ... 
Compiling insert_pv1 ... 
Compiling mod!# ... 
Compiling convprec!* ... 
Compiling tayexp!-min2 ... 
Compiling pnthxzz ... 
Compiling fast_unchecked_getmatelem ... 
Compiling physopp!* ... 
Compiling red_divtestbe ... 
Compiling gperm1 ... 
Compiling removev ... 
Compiling ps!:evaluate ... 
Compiling subscriptedvarp ... 
Compiling bound ... 
Compiling deg!*farg ... 
Compiling abs!: ... 
Compiling dp_diff ... 
Compiling pv_sort2a ... 
Compiling modplus!: ... 
Compiling mkgi ... 
Compiling omobj ... 
Compiling red!-char!-downcase ... 
Compiling dp_times_bc ... 
Compiling tsym4 ... 
Compiling wulessp ... 
Compiling sfto_dcontentf ... 
Compiling sortcolelem ... 
Compiling downwght ... 
Compiling diplength ... 
Compiling mknwedge ... 
Compiling worderp ... 
Compiling getphystype!*sq ... 
Compiling groeb!=testa ... 
Compiling gperm ... 
Compiling minus!-mod!-p ... 
Compiling mathml ... 
Compiling multi_elem ... 
Compiling xdegree ... 
Compiling boundindp ... 
Compiling dp_sum ... 
About to create u12
C file = "$destdir/generated-c/u12"
Compiling pappl_pv ... 
Compiling arzerop!: ... 
Compiling general!-plus!-mod!-p ... 
Compiling free!-powerp ... 
Compiling retattributes ... 
Compiling bcsum ... 
Compiling gsetsugar ... 
Compiling deg!*form ... 
Compiling vecopp ... 
Compiling red!-weight ... 
Compiling divd ... 
Compiling dp_term ... 
Compiling gperm2 ... 
Compiling times!-in!-vector ... 
Compiling treesizep1 ... 
Compiling ps!:get!-term ... 
Compiling vdpgetprop ... 
Compiling !:difference ... 
Compiling areallindices ... 
Compiling contrsp2 ... 
Compiling mo!=deglist ... 
Compiling pdmult ... 
Compiling aronep!: ... 
Compiling clear!-column ... 
Compiling omobjs ... 
Compiling letmtr3 ... 
Compiling genp ... 
Compiling termordp ... 
Compiling cut!:ep ... 
Compiling getphystype ... 
Compiling red!-weight1 ... 
Compiling sc_kern ... 
Compiling rnplus!: ... 
Compiling general!-times!-term!-mod!-p ... 
Compiling matrix!+p ... 
Compiling sfto_dcontentf1 ... 
Compiling isarb_int ... 
Compiling testred ... 
Compiling xdegreemon ... 
Compiling make!-set ... 
Compiling contr1!-strand ... 
Compiling mv!-pow!-minusp ... 
Compiling bas_make1 ... 
Compiling general!-modular!-quotient ... 
Compiling isarb_compl ... 
Compiling initbrsea ... 
Compiling convchk ... 
Compiling optype ... 
Compiling mv!-pow!-mv!-term!-!+ ... 
Compiling dp_ecart ... 
Compiling psum ... 
Compiling adddummy1a ... 
Compiling gizerop!: ... 
Compiling ev_comp ... 
Compiling symtabget ... 
Compiling dim!<deg ... 
Compiling lessp!: ... 
Compiling mv!-pow!-!+ ... 
Compiling rnquotient!: ... 
Compiling general!-modular!-reciprocal ... 
Compiling cgp_evlmon ... 
Compiling checktag ... 
Compiling vevmaptozero1 ... 
Compiling addpf ... 
Compiling pneg ... 

*** End of compilation from REDUCE into C ***

ordn
wuorderp
multiom
c!:extmult
evaluate0
opnum!*
!*i2ar
wulessp!*
exceeds!-order
objectom
initwght
vecp
copy!-vector
reduce!-mod!-p
gintequiv!:
totallessp
expression
minusp!:
spmultm2
mintype
trwrite
red!-ratios2
dv_skelhead
general!-modular!-minus
removeg
ident
wedget2
contrsp
mo_diff
c!:extadd
mk!+mat!+mult!+mat
tmsf!*
smtp
off_mod_reval
flatindxl
greaterp!:
leftzeros
th_match0
totalcompare
get_rep_matrix_in
omair
rd!:prep
plus!:
scalopp
b!:extmult
conv!:mt
horner!-rule
xord_lex
errorset2
exptmod!:

677 functions compiled into C

nil



quit;