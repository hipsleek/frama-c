
  x::node<..> * R  |- x::node<..> * Q
    ===> mandatory match


  x::pred<..> * R  |- x::node<..> * Q
    ===> mandatory unfold

  x fully-materialised via defn or lemma X
  y::ll_tail<.,x> * R  |- x::node<..> * Q
    ===>  mandatory unfold or left-lemma

  x partially-materialised via defn/lemma
  y::ll_tail<.,x> * R  |- x::node<..> * Q
    ===>  search via unfold or left-lemma

  x::pred1<..> * R  |- x::pred2<..> * Q
    ===> mandatory base-case unfold on x, if applicable

  tx::node<..>  |- x::pred1<..,tx> * Q
    ===> mandatory right-lemma, if tx fully-materialised wrt to lemma
         mandatory fold, if tx fully-materialised by defn?

  y::pred1<..,tx>  |- x::pred2<..,tx> * Q
    ===> mandatory unfold of y::pred1, if tx is fully-materalised by defn
    ===> mandatory lemma on y::pred1, if tx is fully-materalised by lemma

===========================================

  x::node<...>   |-  x::pred<..>
   // full-fold

  x::pred<...>   |-  x::pred<..>
   // match 
   // or base-case fold
   // or left-lemma (distr) with cycle detection & derived nodes
   // or right-lemma (distr)

  x::pred1<...>   |-  x::pred2<..>
   // or base-case fold
   // or left-lemma(s) with pred2 target
   // or right-lemma(s) with pred1 target

  y::ll_tail<.,x> * R  |- x::node<..> * Q
    ===>  x may materialised as a node,
    // unfold search

