data node { int val ; node next }.

pred bigint<v> == self = null & v = 0 or
             self::node<p, q> * q::bigint<v1> & 0 <= p <= 9 & v = 10*v1 + p
             inv v >= 0.

/*
checkentail x::bigint<v1>@I * y::bigint<v2>@I & 0<=c & c<=1 & v1>=c+v2 & x=null
|- x::bigint<n>@I.
print residue.
//y::bigint<v>@I & 0<=c & c<=9 & v>=c. 

checkentail x::bigint<v1>@I * y::bigint<v2>@I & 0<=c & c<=1 & v1>=c+v2 & x=null
|- y::bigint<n>@I.
print residue.

checkentail x::bigint<v1>@I * y::bigint<v2>@I & 0<=c & c<=1 & v1>=c+v2 & x=null
|- y::bigint<n>@I & 0<=c & c<=9.
// & v>=c. .
print residue.
*/
/*
checkentail (x::bigint<v1>@I & y::bigint<v2>@I) & 0<=c & c<=1 & v1>=c+v2 & x=null
|- y::bigint<n>@I.
print residue.

checkentail (x::bigint<v1>@I & y::bigint<v2>@I) & 0<=c & c<=1 & v1>=c+v2 & x=null
|- v1=0.
print residue.

checkentail (x::bigint<v1>@I & y::bigint<v2>@I) & 0<=c & c<=1 & v1>=c+v2 & x=null & v2>=0
|- c=0 & v2=0.
print residue.
*/
/*
checkentail (x::bigint<v1>@I & y::bigint<v2>@I) & 0<=c & c<=1 & v1>=c+v2 & x=null
|- c=0 & v2=0.
print residue.
*/
// v1=0 & 0<=c & c<=1 & v1>=c+v2 |- v2=0.

checkentail (x::bigint<v1>@I); y::bigint<v2> & 0<=c & c<=1 & v1>=c+v2 & x=null
|- y::bigint<v2> & c=0 & v2=0.
print residue.


