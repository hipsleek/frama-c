
data node { int val ; node next }.
//pred nll<n> == self::node<_,null>*p::node<_,null> & n=1
//	or self::node<next = r> *p::node<_,null> * r::nll<n-1> 
//	inv n >= 1.

pred nll<n> == self::node<_,null> & n=1
	or self::node<next = r> * r::nll<n-1> 
	inv n >= 1.

checkentail x::nll<n>  |-  x::node<_,_>. 
print residue.
// x * y
// Valid

/*
checkentail x::nll<n> * y::nll<m>  |-  x!=null & y!=null. 
print residue.
// x * y
// Valid

checkentail x::nll<n> * y::nll<m>  |-  x!=y.
print residue.
// x * y
// Valid

checkentail x::nll<n> * x::nll<m>  |-  1=2. 
print residue.
// x * y
// Valid
*/

