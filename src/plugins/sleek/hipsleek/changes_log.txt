********************************************************************************************************************************
--No--: 1
--By--: Cristina 
--Date--: 07.04.2008
--File--: sleekengine.ml
--Method--: process_pred_def
--Line--: 91

--Change--:
Add the line:
ignore (List.map (fun vdef -> AS.compute_view_x_formula cprog vdef !Globals.n_xpure) cprog.C.prog_view_decls);

--Comments--:
This change is needed in order to compute xpure1 instead of xpure0. 
The field view_x_formula (the pure approximation) from view_decl was initialized with inv0 without calling
the method that was supposed to compute the correct approximation according to the provided n 
(which is method compute_view_x_formula from file astsimp.ml).

--Examples (see file sleek10.slk)--:
checkentail x::ll<n> & x!=null |- x::ll<m> & m >0.
print residue.
Before: Fail.
After: Valid.
true & x != null & m = n

********************************************************************************************************************************
--No--: 2
--By--: Cristina 
--Date--: 16.04.2008
--File--: astsimp.ml
--Method--: linearize_heap
--Line--: 2014

--Change--:
let t_var = CP.SpecVar (CP.OType c, fresh_name (), Unprimed) 
replaced by 
let t_var = CP.SpecVar (CP.OType c, c(* --change made on 16.04.2008-- fresh_name ()*), Unprimed) 

--Comments--:
For each data node two more fresh vars were introduced for the actual type
and the extension record (for the oo extension) (see the declaration of h_formula_data from cformula.ml):
- first argument: type variable
- second argument: pointer to the next extension
Now I don't generate fresh vars for those, I just set them to be the
actual data node and the additional constraints disappear. 

--Todo--: Check if/where these first two arguments are really used. We should get rid of them. 

--Examples (see file inst.slk)--:
checkentail x::cell<a> |- x::cell<_>.
print residue.
Valid.
Before: true & f_r_35 = f_r_33 & f_r_36 = f_r_34 & f_r_32 = a
After: true & f_r_28 = a
----------------------------------------------------------------
checkentail x::cell<2> |- x::cell<_>.
print residue.
Valid.
Before: true & f_r_40 = 2 & f_r_44 = f_r_42 & f_r_45 = f_r_43
After: true & f_r_32 = 2
----------------------------------------------------------------
checkentail x::cell<2> |- x::cell<c>.
print residue.
Valid.
Before: true & c = 2 & f_r_53 = f_r_51 & f_r_54 = f_r_52
After: true & c = 2
----------------------------------------------------------------
checkentail x::cell<n> & n=2 |- x::cell<c>.
print residue.
Valid.
Before: true & n = 2 & f_r_61 = f_r_59 & f_r_62 = f_r_60 & c = n
After: true & n = 2 & c = n
----------------------------------------------------------------
checkentail x::cell<2> |- (exists p : p::cell<c> & p=x).
print residue.
Valid.
Before: true & c = 2 & f_r_69 = f_r_67 & f_r_70 = f_r_68
After: true & c = 2

********************************************************************************************************************************
--No--: 3
--By--: Cristina 
--Date--: 18.04.2008
--File--: astsimp.ml
--Line--: 132

--Change--:
Added methods:
1. look_for_anonymous_h_formula (h0 : IF.h_formula) : (ident * primed) list
(*
	- added 17.04.2008
	- checks if the heap formula contains anonymous vars
*)	
2. look_for_anonymous_exp_list (args : IP.exp list) : (ident * primed) list 
3. look_for_anonymous_exp (arg : IP.exp) : (ident * primed) list 
4. convert_anonym_to_exist (f0 : IF.formula) : IF.formula 
  		
-- Comments --: Added the code to transform the anonymous vars into existential vars. The names given for the anonymous vars 
start with "Anon_" (see slexer.mll) => Add existential quantifiers for the anonymous vars - those that start with "Anon_".
In preconditions no variables (including anonymous ones) are existential. 
However, for testing purposes, I added a flag, --anon-exist, which allows the anonymous vars in precond to be existentially quantified. 

-- Examples --:
Before:
checkentail x::pair<a,b> |- x::pair<_,_>.
print residue.
Valid.  		
true & f_r_68 = a f_r_69 = b
After:
Valid.
true & 
********************************************************************************************************************************
--No--: 4
--By--: Cristina 
--Date--: 18.04.2008
--File--: astsimp.ml
--Line--: 2002
--Method--: match_exp
--Change--:
change 						  
	let quantified_var = if quantify then [fresh_v] else [] in
into	
  let quantified_var = [fresh_v]  in
--Comments--: each fresh variable introduced must be existentially quantified
--Examples--:
Before:
checkentail x::pair<a,a> |- x::pair<c,d>.
print residue.
Valid.  		
true & f_r_68 = a & c = a & d = f_r_68
After:
Valid.
true & c = a & d = a
********************************************************************************************************************************
--No--: 5
--By--: Cristina 
--Date--: 09.05.2008
--File--: typechecker.ml
--Line--: 129
--Method--: check_exp
--Change--:
change 						  
	let ext_var = CP.SpecVar (CP.OType c, fresh_name (), Unprimed) in
	let t_var = CP.SpecVar (CP.OType c, fresh_name (), Unprimed) in*)
into		
	let ext_var = CP.SpecVar (CP.OType c, c, Unprimed) in
	 let t_var = CP.SpecVar (CP.OType c, c, Unprimed) in
	 
--Comments--: 
For each data node two more fresh vars were introduced for the actual type and the extension 
record (for the oo extension) (see the declaration of h_formula_data from cformula.ml):
- first argument: type variable
- second argument: pointer to the next extension
Now I don't generate fresh vars for those, I just set them to be the
actual data node and the additional constraints disappear. 

-------------------------------------------------------------
--Examples--:
data pair {int x; int y;}

int foo(pair p)
requires p::pair<a,b> & a+b>0
ensures res = b;
{
        //dprint;
        int temp = p.x + p.y;
        dprint;
        if (temp > 0) {
                dprint;
                return p.y;
        }
        dprint;
        return -1;
}

Before:
print: examples/removeExistVars/ex1.ss:9: ctx:
es_formula: p'::pair<a, b> & a+b > 0 & p' = p & f_r_25 = pair & f_r_24 = pair & f_r_33 = f_r_25 & f_r_32 = f_r_24 & temp' = a+b
es_pure: 
es_heap: true
es_evars: 

print: examples/removeExistVars/ex1.ss:11: ctx:
es_formula: (EX f_r_73 . p'::pair<a, b> & a+b > 0 & p' = p & f_r_25 = pair & f_r_24 = pair & f_r_33 = f_r_25 & f_r_32 = f_r_24 & temp' = a+b & f_r_73 = 0 & temp' > f_r_73 & f_r_20' & f_r_20')
es_pure: 
es_heap: true
es_evars: 

print: examples/removeExistVars/ex1.ss:14: ctx:
es_formula: false & false
es_pure: 
es_heap: true
es_evars: 
SUCCESS
-------------------------------------------------------------
After:
Checking procedure foo$pair... 
print: examples/removeExistVars/ex1.ss:9: ctx:
es_formula: p'::pair<a, b> & a+b > 0 & p' = p & temp' = a+b
es_pure: 
es_heap: true
es_evars: 

print: examples/removeExistVars/ex1.ss:11: ctx:
es_formula: (EX f_r_69 . p'::pair<a, b> & a+b > 0 & p' = p & temp' = a+b & f_r_69 = 0 & temp' > f_r_69 & f_r_20' & f_r_20')
es_pure: 
es_heap: true
es_evars: 

print: examples/removeExistVars/ex1.ss:14: ctx:
es_formula: false & false
es_pure: 
es_heap: true
es_evars: 
SUCCESS
********************************************************************************************************************************
--No--: 6
--By--: Cristina 
--Date--: 10.05.2008
--File--: typechecker.ml + cformula.ml
--Line--: 562 (in typechecker.ml)
--Method--: process_one in check_exp
-- Remark--: Only did the change for static calls (not for instance calls)
--Change in typechecker.ml --:
add:
	(* existentially quantify the linking variables *)
	let tmp_res2 = CF.add_evars_to_ctx tmp_res  free_vars_fresh in
--Change in cformula.ml --:
defined new methods:  
	- add_exist_vars_to_ctx_list (ctx : context list) (evars	: CP.spec_var list) : (context list) 
	   	* purpose: add a list of existential vars, evars, to each context in the list ctx
	- add_exist_vars_to_ctx (ctx : context) (evars	: CP.spec_var list) : context
			* purpose: add a list of existential vars, evars, to ctx.es_formula 	

--Comments--: 
Free vars are those that appear both in precond and postcond. When a call is performed, the FV in the callee's spec are replaced by fresh 
names to avoid collision. When the precondition is entailed by the current heap state, these vars need to be considered free 
such that bindings for them are moved from the consequent to the antecedent. However, after the postcondition is added, they can 
be existentially quantified such that, if there is a substitution available for them, they will be eliminated. 

-------------------------------------------------------------
--Examples--:
data pair{int x; int y;}

int first(pair p)
requires p::pair<a,_>
ensures p::pair<a, _> &  res = a;
{
        int tmp=p.x;
        return tmp;
}

int addtwice(pair p) 
requires p::pair<a,_>
ensures res = a;  
{
       int t1 = first(p);
       dprint;
       return t1; 
}                
 
-------------------------------------------------------------
Before:
Checking procedure addtwice$pair... 
[typechecker.ml, line 486]: pre (EX Anon_f_r_11 . p::pair<a, Anon_f_r_11> & )
// rename bound vars
[typechecker.ml, line 486]: renamed_pre (EX f_r_19 . p::pair<a, f_r_19> & )
[typechecker.ml, line 486]: post (EX f_r_14, Anon_f_r_12 . p::pair<f_r_14, Anon_f_r_12> & res = a & f_r_14 = a)
[typechecker.ml, line 486]: renamed_post (EX f_r_20, f_r_21 . p::pair<f_r_20, f_r_21> & res = a & f_r_20 = a)
// substitute FV by fresh names to avoid collisions
[typechecker.ml, line 499]: pre after subst (EX f_r_19 . p::pair<f_r_18, f_r_19> & )
[typechecker.ml, line 500]: post after subst (EX f_r_20, f_r_21 . p::pair<f_r_20, f_r_21> & res = f_r_18 & f_r_20 = f_r_18)
[typechecker.ml, line 499]: pre to be entailed (EX f_r_19 . p'::pair<f_r_18, f_r_19> & )
[typechecker.ml, line 476]: context before entailment:
es_formula: (EX f_r_17 . p::pair<a, f_r_17> & p' = p)
es_pure: 
es_heap: true
es_evars: 

Entailment: EX f_r_17 . p::pair<a, f_r_17> & p' = p |- EX f_r_19 . p'::pair<f_r_18, f_r_19>
						EX f_r_17 . p' = p |- EX f_r_19 . f_r_18 = a & f_r_19 = f_r_17
						EX f_r_17 . p' = p & f_r_18 = a |- EX f_r_19 . f_r_19 = f_r_17

[typechecker.ml, line 476]: context after entailment:
es_formula: true & p' = p & f_r_18 = a
es_pure: 
es_heap: p::pair<a, f_r_26>
es_evars: f_r_27

[typechecker.ml, line 476]: context after adding the post:
es_formula: (EX f_r_37, f_r_38, f_r_36 . f_r_36::pair<f_r_37, f_r_38> & f_r_36 = p & f_r_18 = a & res = f_r_18 & f_r_37 = f_r_18 & p' = f_r_36)
es_pure: 
es_heap: true
es_evars: 

[typechecker.ml, line 476]: context after removing exist vars:
es_formula: (EX f_r_38 . p::pair<f_r_18, f_r_38> & f_r_18 = a & res = f_r_18 & p' = p)
es_pure: 
es_heap: true
es_evars: 


print: examples/removeExistVars/ex2.ss:32: final ctx (linkink var f_r_18 is still present):
es_formula: (EX f_r_40 . p::pair<f_r_18, f_r_40> & f_r_18 = a & p' = p & t1' = f_r_18)
es_pure: 
es_heap: true
es_evars: 
SUCCESS
Checking procedure first$pair... SUCCESS


-------------------------------------------------------------
After:

Checking procedure addtwice$pair... 
[typechecker.ml, line 486]: pre (EX Anon_f_r_11 . p::pair<a, Anon_f_r_11> & )
[typechecker.ml, line 486]: renamed_pre (EX f_r_19 . p::pair<a, f_r_19> & )
[typechecker.ml, line 486]: post (EX f_r_14, Anon_f_r_12 . p::pair<f_r_14, Anon_f_r_12> & res = a & f_r_14 = a)
[typechecker.ml, line 486]: renamed_post (EX f_r_20, f_r_21 . p::pair<f_r_20, f_r_21> & res = a & f_r_20 = a)
[typechecker.ml, line 499]: pre after subst (EX f_r_19 . p::pair<f_r_18, f_r_19> & )
[typechecker.ml, line 500]: post after subst (EX f_r_20, f_r_21 . p::pair<f_r_20, f_r_21> & res = f_r_18 & f_r_20 = f_r_18)
[typechecker.ml, line 499]: pre to be entailed (EX f_r_19 . p'::pair<f_r_18, f_r_19> & )
[typechecker.ml, line 476]: context before entailment:
es_formula: (EX f_r_17 . p::pair<a, f_r_17> & p' = p)
es_pure: 
es_heap: true
es_evars: 

[typechecker.ml, line 476]: context after entailment:
es_formula: true & p' = p & f_r_18 = a
es_pure: 
es_heap: p::pair<a, f_r_26>
es_evars: f_r_27

[typechecker.ml, line 476]: context after adding the post:
es_formula: (EX f_r_37, f_r_38, f_r_36 . f_r_36::pair<f_r_37, f_r_38> & f_r_36 = p & f_r_18 = a & res = f_r_18 & f_r_37 = f_r_18 & p' = f_r_36)
es_pure: 
es_heap: true
es_evars: 

[typechecker.ml, line 476]: context after existentially quantify the linking vars:
es_formula: (EX f_r_37, f_r_38, f_r_36, f_r_18 . f_r_36::pair<f_r_37, f_r_38> & f_r_36 = p & f_r_18 = a & res = f_r_18 & f_r_37 = f_r_18 & p' = f_r_36)
es_pure: 
es_heap: true
es_evars: 

[typechecker.ml, line 476]: context after removing exist vars:
es_formula: (EX f_r_38 . p::pair<a, f_r_38> & res = a & p' = p)
es_pure: 
es_heap: true
es_evars: 


print: examples/removeExistVars/ex2.ss:32: final ctx:
es_formula: (EX f_r_40 . p::pair<a, f_r_40> & p' = p & t1' = a)
es_pure: 
es_heap: true
es_evars: 
SUCCESS
Checking procedure first$pair... SUCCESS

********************************************************************************************************************************
--No--: 7
--By--: Cristina 
--Date--: 11.05.2008
--File--: solver.ml, main.ml, globals.ml
--Method--: heap_entail_conjunct in solver.ml
--Change --:
Added (Line 1195 in solver.ml):
	let new_rs =
					if !Globals.wrap_exist then
						(* the fresh vars - that have been used to substitute the existenaltially quantified vars - need to be existentially quantified after the entailment *)
						(CF.add_exist_vars_to_ctx_list rs ws)
					else
						rs
	in
Defined a new method (Line 886 in solver.ml):  
	elim_exists_ctx_list (ctx0 : context list) : context list
			* purpose: elim the existentially quantified vars for which there exists a substitution from a list of contexts
			
In file globals.ml:
added a new flag: let wrap_exist = ref true			
In file main.ml:
("--no-LHS-wrap-exist", Arg.Clear Globals.wrap_exist,
	"No existentially quantify the fresh vars in the residue after applying ENT-LHS-EX");

Remark: We added this flag because the improvement described above generates problems with the examples using lemmas (files append-tail.ss and bubble.ss).
Therefore, till we see what is the problem with universal lemma application, we'll use this flag for testing.

--Comments--: 
Our LHS-EX rule was:

  [v->w] D1 |- D2 * D
      fresh w
--------------------
  ex v. D1 |- D2 * D
  
Now it is:
 [v->w] D1 |- D2 * D
      fresh w
--------------------
  ex v. D1 |- D2 * (ex w. D)
  
The fresh vars - w - that have been used to substitute the existentially quantified vars - v - need to be existentially quantified in the residue.
-------------------------------------------------------------
--Examples--:
data pair {
        int fst;
        int snd;
}

pair inc(pair x)
 requires x::pair<n,_>
 ensures res::pair<n+1,_>&res=x;
{
 int tmp = x.fst;
 tmp++;
 x.fst = tmp;
 return x;
}

pair twice(pair x)
 requires x::pair<n,n>
 ensures res::pair<n+2,_>&res=x;
{
 pair tmp = inc(x);
 dprint;
 tmp = inc(x);  
 dprint;  
 return tmp;
}

-------------------------------------------------------------
Before (f_r_33 and f_r_58 have been newly generated and should be existentially quantified):
Checking procedure twice$pair... 
print: examples/wn2.ss:30: ctx:
es_formula: (EX f_r_48, f_r_47 . x::pair<f_r_47, f_r_48> & f_r_33 = n & f_r_47 = n+1 & x' = x & tmp' = x)
es_pure: 
es_heap: true
es_evars: 

print: examples/wn2.ss:32: ctx:
es_formula: (EX f_r_73, f_r_72 . x::pair<f_r_72, f_r_73> & f_r_33 = n & f_r_58 = n+1 & f_r_72 = f_r_58+1 & x' = x & tmp' = x)
es_pure: 
es_heap: truejoe
es_evars: 
SUCCESS

After (f_r_33 and f_r_58 have been existentially quantified and eliminated as a substitution was available for them):
Checking procedure twice$pair... 
print: examples/wn2.ss:30: ctx:
es_formula: (EX f_r_49, f_r_48 . x::pair<f_r_48, f_r_49> & f_r_48 = n+1 & x' = x & tmp' = x)
es_pure: 
es_heap: true
es_evars: 

print: examples/wn2.ss:32: ctx:
es_formula: (EX f_r_76, f_r_75, f_r_74 . x::pair<f_r_74, f_r_75> & f_r_76 = n+1 & f_r_74 = f_r_76+1 & x' = x & tmp' = x)
es_pure: 
es_heap: true
es_evars: 
SUCCESS
********************************************************************************************************************************
--No--: 8
--By--: Cristian 
--Date--: 12.05.2008
--File--: solver.ml 
--Method--: redundant_existential_check
--Line--: 880

--Change--:
Add the function definition
--Comments--:
This function is needed in order to verify that eliminating the quantification of the newly introduced fresh variables in the residue 
has no side efects. It tests that those variables actually do no apear in the residue.

--Line--: 1239
--Change--:
Call the redundant_existential_check

--File--: Makefile
--Line--: 94,97,99,102,105,167
--Change--:
Changed the name of the rules from ss to hip.
********************************************************************************************************************************
--No--: 9
--By--: Cristina 
--Date--: 13.05.2008
--File--:  main.ml, globals.ml
--Change --:
Changed the default for the wrap_exist flag: now, by fedault the optimization is disabled.
--Comments--: 
This is because the problems seem to outweight the benefits. For example, the formula size is about
the same, and perhaps some solvers are not too good at handling existential.
--Examples--:
append-tail.ss and bubble.ss do not work when the optimization is enabled.
********************************************************************************************************************************
--No--: 10
--By--: Cristina 
--Date--: 13.05.2008
--File--:  cformula.ml, typechecker.ml, main.ml, globals.ml
--Change --:
Added in main.ml, globals.ml a new flag: max_renaming
- when enabled renaming of bound vars is always performed (like it was done before)
- when disabled renaming of bound vars is performed only when a name clash exists

Added (in cformula.ml):
normalize_only_clash_rename (f1 : formula) (f2 : formula) (pos : loc)
- normalizes but only renames the bound variables of f1 that clash with variables from fv(f2) 

rename_clash_bound_vars (f1 : formula) (f2 : formula) : (formula * CP.spec_var list)
- rename only those bound vars of f1 which clash with fv(f2) 
- return the new formula and the list of fresh names

check_name_clash (v : CP.spec_var) (f : formula) : bool 

Added (in typechecker.ml, method check_proc):
if !Globals.max_renaming then
			(* if the max_renaming flag is on --> rename all the bound vars when doing the normalization *)
			(CF.normalize pre nox (CF.pos_of_formula pre)) 
else	
   		(* if the max_renaming flag is off --> rename only the bound vars from pre which clash with the free vars of nox *)
  	 	(CF.normalize_only_clash_rename pre nox (CF.pos_of_formula pre)) 

--Comments--: 
When doing a normalization f1 * f2, we only need to do renaming only for those v in BV(f1) such that v in FV(f2) 

--Example--:
For the heap state xs::sll<n,_,_>

With max renaming (the anon vars are already renamed):
es_formula: (EX f_r_107, f_r_108 . xs::sll<n, f_r_107, f_r_108> & xs' = xs)
es_pure: 
es_heap: true
es_evars: 

With min renaming (the anon vars are not renamed):
print: examples/bubble-coer.ss:29: ctx:
es_formula: (EX Anon_f_r_12, Anon_f_r_13 . xs::sll<n, Anon_f_r_12, Anon_f_r_13> & xs' = xs)
es_pure: 
es_heap: true
es_evars: 
********************************************************************************************************************************

Addition to the above: On 17.05.2008 changed more rename_bound_vars to rename_clash_bound_vars
and normalize to normalize_only_clash_rename. Actually, I did not change them, but made it as a choice 
based on max_renaming. The default is set to minimize renaming.

********************************************************************************************************************************
--No--: 11
--By--: Cristina 
--Date--: 13.05.2008
--File--:  solver.ml
--Method--: heap_entail_conjunct
--Change (around line 1193) --:  
If max_renaming flag is off -> rename only those bound vars from antecedent that clash with the free variables from the consequent or consumed heap 
not(v in freevars(k*D2) 

--Comments --:
The change is also related to the renaming of bound vars.
Now the rule LHS-ENT becomes:

 not(v in freevars(k*D2)}
    D1 |=^{k} D2 * D3
 --------------------------
 (ex v. D1) |=^{k} D2 * D3

meaning that if not(v in freevars(k*D2)} --> there is no need to do a renaming.

********************************************************************************************************************************
--No--: 12
--By--: Cristina 
--Date--: 17.05.2008
--File--:  astsimp.ml

--Change--: Undo changes 3 and 4.
--Remark--: Free vars from preconditions should not be existentially quantified such that bindings for them are moved to the antecedent! 
In linearize_formula the flag quantify is true for view definition and postcondition and false for precondition.

--Todo--:  Sometimes 3 is safe --> see when!

--Example--: file qsort-tail.ml, method qsort.

Before:
[typechecker.ml, line 499]: pre to be entailed (EX f_r_27 . x'::bnd_tail<f_r_490, f_r_27, f_r_491, f_r_492> & f_r_491 <= temp' & temp' <= f_r_492 & f_r_27 = tx')

After:
[typechecker.ml, line 499]: pre to be entailed x'::bnd_tail<f_r_487, f_r_490, f_r_488, f_r_489> & f_r_488 <= temp' & temp' <= f_r_489 & f_r_490 = tx'

********************************************************************************************************************************
--No--: 13
--By--: Cristina 
--Date--: 22.05.2008
--File--: solver.ml
--Method--: split_universal
For the pure formula taken as arg by split_universal we do a simplified translation towards CNF where we only take out the common
conjuncts from all the disjuncts:
	Ex:
 (a=1 & b=1) \/ (a=2 & b=2) - nothing common between the two disjuncts
 (a=1 & b=1 & c=3) \/ (a=2 & b=2 & c=3) ->  c=3 & ((a=1 & b=1) \/ (a=2 & b=2))
The purpose is to obtain as much as a CNF form as possible so that the splitting of bindings between antecedent and consequent is more accurate.

--Change--:
A call to normalize_to_CNF in split_universal.
		(* -- added on 21.05.2008 *)
		(* try to obtain as much as a CNF form as possible so that the splitting of bindings between antecedent and consequent is more accurate *)
		let f = (normalize_to_CNF f0 pos) in		
		(* added on 21.05.2008 -- *)

For this, I defined method and normalize_to_CNF (f : CP.formula) pos : CP.formula. 

--Examples--:
For the pure formula obtained after folding:
[solver.ml, split_universal]: Pure formula: ((f_r_36 = 1 & c = a+1 & s2 = sm & l2 = lg & sm <= w & w <= lg & 1 <= q) | (f_r_36 = 1 & c = a+1 & 

Before:
!!!interactive:17: split_universal: evars: f_r_36
!!!interactive:17: split_universal: vvars: c, f_r_36, s2, l2
!!!interactive:17: split_universal: to_ante: 
!!!interactive:17: split_universal: to_conseq: f_r_36 = 1 & c = a+1 & s2 = sm & l2 = lg & sm <= w & w <= lg & ((1 <= q) | (q <= 0-1))

After:
[solver.ml, split_universal]: Pure formula in simplified cnf: f_r_36 = 1 & c = a+1 & s2 = sm & l2 = lg & sm <= w & w <= lg & ((1 <= q) | (q <= 0-1))
!!!interactive:17: split_universal: evars: f_r_36
!!!interactive:17: split_universal: vvars: c, f_r_36, s2, l2
!!!interactive:17: split_universal: to_ante: c = a+1 & s2 = sm & l2 = lg
!!!interactive:17: split_universal: to_conseq: f_r_36 = 1

REMARK: I'VE UNDONE THIS CHANGE BECAUSE:
If E3(e,f,g) is only a simple atomic expression, it is
probably not important to move to LHS. I was thinking of
the scenario where we can a disjunct of larger expressions.
Some examples that are useful to move are:


  ex e. f1<e & e<=g
or ex e. (f=1 & e=2 \/ f=2 & e=3)

So perhaps, we should not move the implicit instantiation
bit by bit but rather the whole thing that was suppose to
go to consequent. In that case, it may hit performance.

--> THE NEW CHANGE IS ALSO IN SOLVER.ML:
method: split_universal
new flag introduced: move_exist_to_LHS (option --move-exist-to-LHS)
By default the flag is set to false, meaning that the optimization is not applied (the worry is that it might be expensive
as it increases the size of the formula in the antecedent).
********************************************************************************************************************************
--No--: 14
--By--: Cristina 
--Date--: 09.06.2008
--File--: solver.ml + cformula.ml + astsimpl.ml + cprinter.ml + typechecker.ml

--Change--:
 Remove for now the type and extension fields related to the OO extension.

--Comments--:
	1. From h_formula_data (in cformula.ml), remove the first two arguments of h_formula_data_arguments representing the type variable 
	and the pointer to the next extension:
		and h_formula_data = { h_formula_data_node : CP.spec_var;
					   h_formula_data_name : ident;
					   h_formula_data_arguments : CP.spec_var list;
					   _____________________________________________________
					   (* first argument: type variable
						  second argument: pointer to the next extension *)
						 _____________________________________________________
					   h_formula_data_pos : loc }
	2. Make sure to remove these two fields from everywhere!
	3. Change t_formula (in cformula.ml) such that it only has 3 constructors: 
	type t_formula = (* type constraint *)
	___________________________________________________________________________________________________________________
	(* commented out on 09.06.08 : we have decided to remove for now the type information related to the OO extension
	| TypeExact of t_formula_sub_type (* for t = C *)
	| TypeSub of t_formula_sub_type (* for t <: C *)
	| TypeSuper of t_formula_sub_type (* for t < C *)
	*)
	___________________________________________________________________________________________________________________
	| TypeAnd of t_formula_and
	| TypeTrue
	| TypeFalse
	4. Everywhere there is something with type t_formula --> use TypeTrue!!
 				   

--Examples (see file wn6.ss)--:
data cell {
        int val;
}

pd<x,y> == self::cell<x> & y=2x inv y=2x;

void test2(cell l)
 requires l::pd<x,y>
 ensures l::pd<x+1,y+2>;
{
 int t;
 t=l.val;
 t=t+1;
 l.val = t;
 dprint;
}

void main2()
{
 cell n=new cell(0);
 dprint;
 test2(n);
 ---dprint ----- (this is the dprint for which we take the result);
 test2(n);
 dprint;
}


BEFORE:
print: examples/wn6.ss:24: ctx:
es_formula: (EX f_r_45, f_r_44 . n'::pd<f_r_44, f_r_45> & f_r_29 = 0 & cell = f_r_19 & cell = f_r_20 & f_r_44 = f_r_29+1 & f_r_45 = (2 * f_r_29)+2 & 2 * f_r_29 = 2 * f_r_29)
es_pure: 
es_heap: true
es_evars: 
-------------------------------------------------------
AFTER (the constraints related to the type and extension vars, cell = f_r_19 & cell = f_r_20, have disappeared):
print: examples/wn6.ss:24: ctx:
es_formula: (EX f_r_43, f_r_42 . n'::pd<f_r_42, f_r_43> & f_r_29 = 0 & f_r_42 = f_r_29+1 & f_r_43 = (2 * f_r_29)+2 & 2 * f_r_29 = 2 * f_r_29)
es_pure: 
es_heap: true
es_evars: 
********************************************************************************************************************************
--No--: 15
--By--: Cristina 
--Date--: 09.06.2008
--File--: cformula.ml + cpure.ml +solver.ml
--Change--:
	1. Utilities for existential quantifier elimination: 
	- before we were only searching for substitutions of k form v1 = v2 and then substitute ex v1. P(v1) --> P(v2)
	- now, we want to be more aggressive and search for substitutions of the form v1 = exp2; 
	however, we can only apply these substitutions to the pure part 	(due to the way shape predicates are recorded --> root pointer and args are suppose to be spec vars)
	2.(in solver.ml) Add a call to elim_exists_exp in method elim_exists_ctx.

--Comments--:
Repeat
 	- Take the first possible substitution and apply it
Until no change
	Remarks:
 	- Try only for those existential vars that are not contained in FV(heap part)
 	- Check for circularity:
 		if v = exp then v \notin FV(e)

--Examples (for wn6.ss)--:
BEFORE:
print: examples/wn6.ss:24: ctx:
es_formula: (EX f_r_46, f_r_47, f_r_25 . n'::pd<f_r_46, f_r_47> & f_r_31 = 0 & f_r_30 = null & cell = f_r_19 & cell = f_r_30 & f_r_25 = 2 * f_r_31 & f_r_46 = f_r_31+1 & f_r_47 = f_r_25+2 & f_r_25 = 2 * f_r_31)
es_pure: 
es_heap: true
es_evars

AFTER:
print: examples/wn6.ss:24: ctx:
es_formula: (EX f_r_46, f_r_47, f_r_25 . n'::pd<f_r_46, f_r_47> & f_r_31 = 0 & f_r_30 = null & cell = f_r_19 & cell = f_r_30 & f_r_25 = 2 * f_r_31 & f_r_46 = f_r_31+1 & f_r_47 = f_r_25+2 & f_r_25 = 2 * f_r_31)
es_pure: 
es_heap: true
es_evars 		 		
******************************************************************************************************************************** 		
TODO:
	* In file cpure.ml there are some utilities for simplifications:
			- we do some basic simplifications: eliminating identities where the LHS is identical to RHS (in method elim_idents defined in cpure.ml)
	* In file cformula.ml, method apply_one_exp, we have placed a call to elim_idents. However, this call causes some tests to fail.
	Therefore, we have commented it for now. This needs to be investigated!
******************************************************************************************************************************** 		
I've redone	change 4 -- now, after the modifications we have done in the meantime, it seems to work 
(* each fresh variable introduced must be existentially quantified - quantify them even if they are in precond *)		
******************************************************************************************************************************** 		
I've redone change 3:
- All anonymous vars were made existential vars. Again due to qsort-tail, this change was undone and we've added a flag to 
enable it. Now, as qsort-tail does not fail anymore, I reversed the flag: whenever it is not added, the optimization is enabled. 
- change flag --anon-exist into --no-anon-exist.			
******************************************************************************************************************************** 		
	