"Compilation:
Important: Place the hip folder (that is along with this in your home 
directory)
make web //compiles the web server module
make prover // compiles the prover module
make hip //the usual hip verifier

Refer webserver.txt for new library details

How to use web server:
1. Ensure that all machines on which you intend to use as cluster have the prover executable in ~/hip ie ~/hip/prover must exist.
2. Ensure that the machine you wish to use as the web server has a non interactive way of logging into the remote machines in the cluster ,
 make use of passphrase to log in instead of password login.(There should be an account by the same name on all machines)
3. on the webserver do the following to start web
  example 1) ./web --socket 8889 --cluster "loris-10:8888"
           -this will start a web server with single slave on loris-10 and it will be listening for clients on port 8889
          2) ./web --socket 8889 --cluster "loris-10:8888;loris-11:8888"
           -this will start a web server with two slaves one each on loris-10 and loris-11
          3) ./web --socket 8889 --cluster "loris-10:8888;loris-11:8888;loris-10:8888;loris-11:8888"
           -this will start a web server with four slaves two each on loris-10 and loris-11
Note: when giving the name of a machine more than once, as in example 3 do not give different ports for them, assign them the same port

4. To use hip along with this webserver do the following (Assume the above server was started on loris-11)
  1) ./hip --web loris-11:8889 example.ss
    -this will solve example.ss sequentially, the only difference being all the formula are solved remotely
  2) ./hip --web loris-11:8889 example.ss -para 4
    -this will try and solve 4 procedures of at a time, all of the procedures' formulae are solved by the web server
  3) ./hip --web loris-11:8889 example.ss -para 0
    -this will try and solve all the procedures simultaneously, all of the procedures' formulae are solved by the web server
  4) ./hip --web loris-11:8889 example.ss -para <n> -sort
    -this time in addition to 2) it will also sort the procedures according to their size.
  5) ./hip --web loris-11:8889 example.ss -para <n> --prover omega,cvcl
    -this time all the provers under the webserver will have an extra slave(2 altogether), for each formula it receives it tries both omega and cvcl. Note: Make sure that these theorem provers are installed on all the cluster machines
  6) ./hip --web loris-11:8889 examples/working/hip/2-3trees.ss -para 0 --priority "insert\$node3~int:579;insert_right\$node3~int:666;insert_middle\$node3~int:1610;insert_left\$node3~int~int:3664;make_node\$node3~int:136"
    - the --priority specifies the priorities to be given to each formula in the procedure Note: when using this option make sure to assign a priority for every user defined function in the program.
  7) ./hip --web loris-11:8889 examples/working/hip/2-3trees.ss -para 0 --priority "insert\$node3~int:579;insert_right\$node3~int:666;insert_middle\$node3~int:1610;insert_left\$node3~int~int:3664;make_node\$node3~int:136" -decrprio
    - if the priority provided to the functions are the number of formulae in each of the procedures then to each formula it assigns priority as the number of formulae succeeding it (in the sequence of formulae of that procedure).
    
Troubleshooting:
  Make sure that the host/address table in the /etc/hosts files are correct.
  Make sure all the necessary executables(mainly prover) is in a folder in ~/hip
  Make sure the user starting web has an account on all cluster machines.
  
Tips:
  If you intend to terminate the webserver, just kill the web process from the terminal, also kill all the provers running on all the cluster machines







New Libraries:
web.ml: 
    This is the web module that implements the webserver.



paralib1.ml:
    This is the first of the two modules that implements map_para and its varients
    
    Paralib1.map_para has the type (unit -> unit)->(`a -> `b)->'a list->`b list
	
	It implements the map_para function which is similar to the List.map except it does all the evaluations simultaneously with as much parallelism allowed by the number of cores and interleaving(if there are more processes than cores) as supported by the processor.




paralib1v2.ml: 
    This is the second of the two modules that implement map_para.
    
    Paralib1v2.map_para has the type (unit -> unit)->(`a -> `b)->'a list->int->`b list
    The map_para function defined here has an extra argument, which is the number of elements in the list that should be evaluated simultaneously. This helps in controlling the parallelism and helps avoiding spawning a large number of processes and the swarming of resources.
    
    Paralib1v2.map_para has the type (unit -> unit)->(`a -> `b)->'a list->int->`b list  
    The map_para_net is a slighty modified version of map_para designed to work with the web module.
