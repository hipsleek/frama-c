data node {
  int val;
  node next;
}.

data tree {
  tree left;
  tree right;
}.

pred tlseg<p,f,d,n> ==
     case {
     d=f -> [] self::node<d,p> & n=1;
     d!=f -> 
        case {
          f=d+1 -> [] self::node<d+1,r> * r::tlseg<p,_,d+1,n2> & n=1+n2;
          f!=d+1 -> 
          case {
          f=d+2 -> [] self::node<d+2,r1> * r1::tlseg<r,_,d+2,n1> * r::tlseg<p,_,d+1,n2> & n=1+n1+n2;
          f!=d+2 -> [] self::tlseg<r,f,d+1,n1> * r::tlseg<p,_,d+1,n2> & n=n1+n2;
          };
       };
     }
  inv self!=null & n>=1 & f>=d .
 

/*

 
pred tlseg<p,f,d,n> ==
     case {
     d=f -> [] self::node<d,p> & n=1;
     d!=f -> 
        case {
          f=d+1 -> [] self::node<d+1,r> * r::tlseg<p,_,d+1,n2> & n=1+n2;
          f!=d+1 -> [] self::tlseg<r,f,d+1,n1> * r::tlseg<p,_,d+1,n2> & n=n1+n2;
          };
     }
  inv self!=null & n>=1 & f>=d .

*/
pred negtlseg<p,f,d,n> ==
  self::node<f,p> & n=1 & f<d 
  or self::negtlseg<p,f,d+1,n> & f!=d 
  or self::tlseg<r,f,d+1,n1> * r::negtlseg<p,_,d+1,n2> & n=n1+n2 
  inv self!=null & n>=1 & f!=d.

//lemma self::tlseg<p,f,d,n>@I -> self::node<f,q>@I.
/* this is a data losing lemma that should only be used
   with immitable spec */

//checkentail x::tlseg<p,f,d,n> |- x::node<v,_>@I.
// two anwers; need only have one really

//checkentail x::tlseg<p,f,d,n> |- x::tlseg<a,b,c,d>.
// why is there a fail! I am expecting two answers


//checkentail x::node<_,q> |- x::tlseg<a,b,c,d>.

//checkentail x::node<p,q> |- x::tlseg<a,b,c,d>.
// WHY ERROR: File "t8.slk", line 30, col 28 : gather_type_info_var : unexpected exceptionFailure("TYPE ERROR : Found node but expecting int") 

//checkentail x::node<p,q> |- x::tlseg<f,a,d,n>.


/*

checkentail s1::node<1,s2> |-s1::tlseg<s2,1,1,1>.
checkentail s2::node<3,s3> |-s2::tlseg<s3,3,3,1>.
checkentail s3::node<3,s4> |-s3::tlseg<s4,3,3,1>.
checkentail s4::node<2,null> |-s4::tlseg<null,2,2,1>.
checkentail s2::tlseg<s3,3,3,1>*s3::tlseg<s4,3,3,1> |- s2::tlseg<s4,3,2,2>.
checkentail s2::tlseg<s4,3,2,2> *s4::tlseg<null,2,2,1> 
            |- s2::tlseg<null,3,1,3>.
checkentail s1::tlseg<s2,1,1,1> * s2::tlseg<null,3,1,3> |- s1::tlseg<null,1,0,4>.
checkentail s1::node<1,s2>*s2::node<3,s3>*s3::node<3,s4>*s4::node<2,null>  |- s1::tlseg<null,1,0,4>.

*/

checkentail s2::tlseg<s3,3,3,1>*s3::tlseg<s4,3,3,1> |- s2::tlseg<s4,3,2,2>.

checkentail  s2::tlseg<s4,3,2,2> |- s2::tlseg<s3,3,3,1>*s3::tlseg<s4,3,3,1>.

checkentail  s2::tlseg<s4,3,2,2> |- s2::tlseg<a,b,c,d>.

checkentail s2::node<3,s3>*s3::node<3,s4>  |- s2::tlseg<s4,3,2,2>.


checkentail s1::node<1,s2>*s2::node<3,s3>*s3::node<3,s4>*s4::node<2,null>  |- s1::tlseg<null,1,0,4>.

print residue.
