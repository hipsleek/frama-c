data node {
  int val;
  node next;
}.

pred ll<n> == self=null & n=0
  or self::node<_,q>*q::ll<n-1>
  inv n>=0.

checkentail x::ll<n> & n>3  |- x::node<_,q>@L & q!=null.
print residue.
expect Valid.

checkentail x::ll<n> & x!=null  |- x::node<_,q>@L & q!=null.
print residue.

checkentail x::ll<n> & x!=null  |- x::node<_,q>@L .
print residue.


//checkentail x.val=5  |- x!=null.

checkentail x::node<v,_>@A & v=5  |- x!=null.
print residue.
expect Valid.


/*
# field1.slk

checkentail x::node<v,_>@A & v=5  |- x!=null.

Why did we remove x::node<v,_>@A ?
I think it should be kept

Residue:
 <1>emp&x!=null & v=5&{FLOW,(4,5)=__norm}[]

*/