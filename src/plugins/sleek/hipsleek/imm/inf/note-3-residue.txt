x::cell<a> |-

  infer [P,Q]
  requires x::cell<v>@a & P(a,v)
  ensures x::cell<w>@b & Q(a,b,v,w);


 x::cell<v>@M * x::cell<w>@A


 x::cell<x>@M |- x::cell<r>@M --> x::cell<x>@A & x=r & 


int foo(cell c)
  infer [Q]
  requires x::cell<v>@a & Q(a)
  ensures x::cell<w>@b ;
{
 int x = c.fst;
 if (x!=1) {
   //c.fst =c.fst-1;
   int tmp=2+foo(c);
   dprint;
   return tmp;
 } else return 0;
}

Q(a) --> a<:L
Q(a) & a<:L & a<:b --> Q(b)

a<:L & a<:b & .. a=b--> b<:L

 a<:b
 -------------------------------------------------
 x::cell<_>@a & Q(a) & a<:L |- x::cell<_>@b & Q(b)
