data cell{
 int fst;
}.

checkentail x::cell<_>@u & u=@A & v=@A |- x::cell<_>@v & @L<:v.
print residue.
expect Valid.

checkentail x::cell<_>@u & u=@A  |- [v] x::cell<_>@v & @L<:v.
print residue.
expect Valid.

checkentail x::cell<_>@u & u=@A  |- x::cell<_>@v & @L<:v.
print residue.
expect Valid.


checkentail x::cell<_>@u & u=@M  |- [v] x::cell<_>@v & v=@L.
print residue.
expect Valid.

checkentail x::cell<_>@u & u=@M  |- [v] x::cell<_>@v & v<:@L.
print residue.
expect Valid.
/*
 <1>x::cell<Anon_19>@[@M, @v]&u=@M & Anon_20=Anon_19 & v<:@L & u<:v&{FLOW,(20,21)=__norm#E}[]
*/

checkentail x::cell<_>@u & u=@M  |- x::cell<_>@v & v<:@L.
print residue.
expect Valid.
/*
 <1>x::cell<Anon_21>@A&u=@M & u=v & Anon_22=Anon_21&{FLOW,(20,21)=__norm#E}[]

 at the point of matching
 look for weakest inst of v so that u<:v and RHS is provable

 inst v<:@L & v=@L   |- u<:v

*/
