data cell{
 int val;
}.

data pair{
 int fst;
 int snd;
}.

infer [@field_imm] p::cell<s@x> |- p::cell<b@L>.
print residue.
expect Fail.

infer [@field_imm] p::pair<_,s@x> |- p::pair<_,b@L>.
print residue.
expect Fail.

//infer [@field_imm] p::pair<_@A,s@x> |- p::pair<_@A,b@L>.

/*
# ex4c4

infer [@field_imm] p::cell<s@x> |- p::cell<b@L>.
infer [@field_imm] p::pair<_,s@x> |- p::pair<_,b@L>.

Why did the cell fails as expected 
but not pair?

(==solver.ml#7525==)
heap_entail_empty_rhs_heap#1@2@1
heap_entail_empty_rhs_heap#1 inp1 : p::cell<s@[@x]>&b=s&{FLOW,(4,5)=__norm#E}[]
 es_infer_obj: [@field_imm]
 es_trace:  SEARCH ==>  Match(p,p) ==> 
 es_infer_vars_rel: []
 es_unsat_flag: false
heap_entail_empty_rhs_heap#1 inp2 : p::cell<s@[@x]>&b=s&{FLOW,(4,5)=__norm#E}[]
heap_entail_empty_rhs_heap#1 inp3 : x<:@L
heap_entail_empty_rhs_heap#1 inp4 :false
heap_entail_empty_rhs_heap#1@2 EXIT: 
MaybeErr Context: 
                   fe_kind: MAY
                   fe_name: logical bug
                   fe_locs: {
                             fc_message:  true |-  x<:@L. LOCS:[0] (may-bug)
   

(==solver.ml#7525==)
heap_entail_empty_rhs_heap#1@4@3
heap_entail_empty_rhs_heap#1 inp1 : p::pair<Anon_28@A,s@[@x]>&Anon_13=Anon_12 & 
b=s&{FLOW,(4,5)=__norm#E}[]
 es_heap: p::pair<Anon_12,s@A>
 es_infer_obj: [@field_imm]
 es_trace:  SEARCH ==>  Match(p,p) ==> 
 es_infer_vars_rel: []
 es_unsat_flag: false
heap_entail_empty_rhs_heap#1 inp2 : p::pair<Anon_28@A,s@[@x]>&Anon_13=Anon_12 & b=s&{FLOW,(4,5)=__norm#E}[]
heap_entail_empty_rhs_heap#1 inp3 : x<:@L
heap_entail_empty_rhs_heap#1 inp4 :false
heap_entail_empty_rhs_heap#1@4 EXIT: [
  p::pair<Anon_28@A,s@[@x]>&Anon_13=Anon_12 & b=s&{FLOW,(4,5)=__norm#E}[]
  ]



*/