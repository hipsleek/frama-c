data cell{
 int fst;
}.


relation R(ann v).

relation P(int v).

infer[R] x::cell<_>@u & u=@M  |- x::cell<_>@v & R(v).
print residue.
expect Valid.

infer[R] x::cell<_>@u & u=@L  |- x::cell<_>@v & R(v).
print residue.
expect Valid.

infer[R] x::cell<_>@u & u=@A  |- x::cell<_>@v & R(v).
print residue.
expect Valid.

/*
# ex9e.slk

infer[R] x::cell<_>@u & u=@M  |- x::cell<_>@v & R(v).

Residue:
 <1>x::cell<Anon_23>@A&u=@M & u=v & Anon_24=Anon_23&{FLOW,(20,21)=__norm#E}[]
 inferred rel: [RELDEFN R: ( v=@M) -->  R(v)]

# I think it is better to instantiate u<:v rather than u=v

We will later obtain:
     u=@M & u<:v --> R(v)
For strongest R(v), we would derive v=@M.
For weakest R(v), we would later derive v=@A.

infer[R] x::cell<_>@u & R(u)  |- x::cell<_>@v & v=@L.
print residue.
expect Valid.

infer[R] x::cell<_>@u & R(u)  |- x::cell<_>@v & v=@A.
print residue.
expect Valid.

infer[R] x::cell<_>@u & R(u)  |- x::cell<_>@v & v=@M.
print residue.
expect Valid.

*/

