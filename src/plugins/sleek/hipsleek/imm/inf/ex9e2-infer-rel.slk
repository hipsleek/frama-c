relation R(ann v).
relation P(int v).

infer[P] u=0 & u<=v  |- P(v).
print residue.
//  inferred rel: [RELDEFN P: ( 0<=v) -->  P(v)]

//infer[R] u=@M & u<:v  |- R(v).
//print residue.
// inferred rel: [RELDEFN R: ( true) -->  R(v)]

/*
# ex9e1.slk

(==cvutil.ml#1520==)
infer_collect_rel@4@1
infer_collect_rel inp1 : emp&u<:v & u=@M&{FLOW,(4,5)=__norm#E}[]
 es_infer_vars_rel: [R]
infer_collect_rel inp2 :[R]
infer_collect_rel inp3 : true
infer_collect_rel inp4 : u<:v & u=@M
infer_collect_rel inp5 : R(v)
infer_collect_rel@4 EXIT:( u<:v & u=@M,2: true,3:[RELDEFN R: ( true) -->  R(v)],4:None,5:[])


(==cvutil.ml#1520==)
infer_collect_rel@4@1
infer_collect_rel inp1 : emp&u<=v & u=0&{FLOW,(4,5)=__norm#E}[]
 es_infer_vars_rel: [P]
infer_collect_rel inp2 :[P]
infer_collect_rel inp3 : true
infer_collect_rel inp4 : u<=v & u=0
infer_collect_rel inp5 : P(v)
infer_collect_rel@4 EXIT:( u<=v & u=0,2: true,3:[RELDEFN P: ( 0<=v) -->  P(v)],4:None,5:[])

*/

