data cell {
  int val;
}.

//1
checkentail x::cell<a>@M |- x::cell<a>@v & @M<:v.
print residue.
expect Valid.

//2
checkentail @M<:v |- @M<:v.
expect Valid.

//3
checkentail x::cell<a>@M & @L<:v |- x::cell<a>@v & @L<:v.
print residue.
expect Valid.

//4
checkentail @L<:v |- @M<:v.
expect Valid.

//5
checkentail x::cell<a>@M |- x::cell<a>@v & @A<:v.
print residue.
expect Valid.

//6
checkentail @A<:v |- @M<:v.
expect Valid.

//7
checkentail x::cell<a>@L |- x::cell<a>@v & @M<:v.
print residue.
expect Fail.

//8
checkentail @M<:v |- @L<:v.
expect Fail.

//9
checkentail x::cell<a>@L |- x::cell<a>@v & @L<:v.
print residue.
expect Valid.

//10
checkentail @L<:v |- @L<:v.
expect Valid.

//11
checkentail x::cell<a>@L |- x::cell<a>@v & @A<:v.
print residue.
expect Valid.

//12
checkentail @A<:v |- @L<:v.
expect Valid.

//13
checkentail x::cell<a>@A |- x::cell<a>@v & @M<:v.
print residue.
expect Fail.

//14
checkentail @M<:v |- @A<:v.
expect Fail.

//15
checkentail x::cell<a>@A |- x::cell<a>@v & @L<:v.
print residue.
expect Fail.

//16
checkentail @L<:v |- @A<:v.
expect Fail.

//17
checkentail x::cell<a>@A |- x::cell<a>@v & @A<:v.
print residue.
expect Valid.

//18
checkentail @A<:v |- @A<:v.
expect Valid.

slk_simplify (exists b,c,g,d: a<:b & b<:c & c<:@L & g=d).
slk_simplify  a<:b & b<:c & c<:@L & g=d.

/*
slk_simplify d=a & a<:b & b<:c & c<:@L & g=d.

slk_hull (exists a,b,c: d=a & a<:b & b<:c & c<:@L).

slk_pairwise (exists a,b,c: d=a & a<:b & b<:c & c<:@L).
*/

slk_simplify emp & exists(b,c,g,d: a<:b & b<:c & c<:@L & g=d).


//15
checkentail x::cell<a>@v |- x::cell<a>@v & @L<:v.
print residue.
expect Valid.

//15
 checkentail x::cell<a>@w |- x::cell<a>@v & @L<:v.
print residue.
expect Valid.

//15
checkentail x::cell<a>@w & w=@A |- x::cell<a>@v & @L<:v.
print residue.
expect Valid.

//15
checkentail x::cell<a>@w & w=@A |- x::cell<a>@v & v<:@L.
print residue.
expect Valid.

/*
        instantiate to R(w) & P(v) & w<:v
        if false ---> w<:v

*/

checkentail w<:v & w=@A |-  v<:@L.

infer[w,v] w=@A |- w<:v & v<:@L.
print residue.

infer[] w=@A & v=@A |- w<:v & v<:@L.
print residue.


infer[] w=@A & v=@L |- w<:v & v<:@L.
print residue.

infer[w,v] w=@A |- w<:v & @L<:v.
print residue.

infer[] w=@A & v=@A |- w<:v & @L<:v.
print residue.

/*
 inferred pure: [(w<:@L | (@L<:v & w<:v))]

 inferred pure: [(@L<:v & w<:v))]
 weakest inst of v = @A

*/
