data cell {
  int val;
}.


//(2)
checkentail x::cell<a>@u & u=@L |- x::cell<b>@v & v=@M.
print residue.
// <1>x::cell<a>@[@u, @v]&u=@L & v=@M & b=a&{FLOW,(20,21)=__norm#E}[]
expect Fail.

checkentail x::cell<a>@M |- x::cell<b>@L.
expect Valid.

//(3)
checkentail x::cell<a>@u & u=@M |- x::cell<b>@v & v=@L.
print residue.
expect Valid.

checkentail x::cell<a>@u & u=@M |- x::cell<b>@v & v=@M.
print residue.
expect Valid.

checkentail x::cell<a>@u & u=@L |- x::cell<b>@v & v=@L.
print residue.
expect Valid.

checkentail x::cell<a>@u & u=@L |- x::cell<b>@v & v<:@L.
print residue.
expect Valid.

checkentail x::cell<a>@u & u=@L |- x::cell<b>@v & v<:@M.
print residue.
expect Fail.

checkentail x::cell<a>@u & u=@M |- x::cell<b>@v & v<:@A.
print residue.
expect Valid.
// residue is @A which seems too weak

checkentail x::cell<a>@u & u=@M |- x::cell<b>@v & v<:@A.
print residue.
expect Valid.
// residue is @A which seems too weak

checkentail x::cell<a>@u & u=@M |- (exists v: x::cell<b>@v & v<:@A).
print residue.
expect Valid.

checkentail x::cell<a>@u & u=@M |- (exists v: x::cell<b>@v & v=@A).
print residue.
expect Valid.

checkentail x::cell<a>@u & u=@M |- (exists v: x::cell<b>@v & v=@M).
print residue.
expect Valid.

/**
../../sleek ex3d7i-subtype-check.slk   -dre "heap_entail_split_\|heap_n_pure" --field-imm

WHY heap_entail_split_lhs_phases inp2 :RHS: x::cell<b@v>@M&{FLOW,(20,21)=__norm#E}[] lost pure info? v=@M?

!!! **solver.ml#9780:view_param_ann_lhs:None
!!! **solver.ml#9781:view_param_ann_rhs:None
!!! **solver.ml#9782:Imm annotation mismatch (view param):false
!!! **solver.ml#9783:r,rvl:(true,true)
(==solver.ml#6308==)
heap_entail_split_lhs_phases@3@2@1
heap_entail_split_lhs_phases inp1 : x::cell<a@u>@M&u=@L&{FLOW,(20,21)=__norm#E}[]
 es_gen_impl_vars: [v; b]
 es_infer_vars_rel: []
heap_entail_split_lhs_phases inp2 :RHS: x::cell<b@v>@M&{FLOW,(20,21)=__norm#E}[]
heap_entail_split_lhs_phases@3 EXIT: [
  x::cell<a@L>@M&u=@L & u=v & b=a&{FLOW,(20,21)=__norm#E}[]
  ]

(====)
heap_n_pure_entail#2@2@1
heap_n_pure_entail#2 inp1 : x::cell<a@u>@M&u=@L&{FLOW,(20,21)=__norm#E}[]
 es_gen_impl_vars: [v; b]
 es_infer_vars_rel: []
heap_n_pure_entail#2 inp2 : x::cell<b@v>@M
heap_n_pure_entail#2 inp3 : v=@M 
heap_n_pure_entail#2@2 EXIT:OK

(==solver.ml#5614==)
heap_entail_split_rhs_phases@1
heap_entail_split_rhs_phases inp1 : x::cell<a@u>@M&u=@L&{FLOW,(20,21)=__norm#E}[]
 es_gen_impl_vars: [v; b]
 es_infer_vars_rel: []
heap_entail_split_rhs_phases inp2 : x::cell<b@v>@M&v=@M&{FLOW,(20,21)=__norm#E}[]
heap_entail_split_rhs_phases@1 EXIT: [
  x::cell<a@L>@M&u=@L & u=v & b=a&{FLOW,(20,21)=__norm#E}[]
  ]

Entail 1: Valid. 

Residue:
 <1>x::cell<a@L>@M&u=@L & u=v & b=a&{FLOW,(20,21)=__norm#E}[]
[[ SEARCH ==>  Match(x,x) ==> ]]

*/