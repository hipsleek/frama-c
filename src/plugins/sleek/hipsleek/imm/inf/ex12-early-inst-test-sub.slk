data cell{
 int fst;
}.


//(1) OK
checkentail c::cell<v>@a & a<:@L |-  c::cell<w>@b & b<:@L.
print residue.
expect Valid. // with b inst to @L
/*
expect_infer I{} R{c::cell<v>@a & a<:@L & b=@L & w=v}
*/


//(2) 
checkentail c::cell<v>@a |-  c::cell<w>@b.
print residue.
expect Valid.
/*
expect_infer I{} R{c::cell<v>@[@a, @b]&a<:b & w=v}
*/


//(3)
checkentail c::cell<v>@a & @L<:a |-  c::cell<w>@b & @M<:b.
print residue.
expect Fail.
/*
Fail.(may) cause:AndR[ @L<:a |-  @M<:b. LOCS:[30];  @L<:a |-  a<:b. LOCS:[30;0] (may-bug).]


pick_bounds@16@13@11
pick_bounds inp1 :[@M]
pick_bounds@16 EXIT:(Some( b=@M),None)

*/


//(4)
checkentail c::cell<v>@a & @L<:a |-  c::cell<w>@b & @L<:b.
print residue.
expect Fail.
/*
Not sure if here it would makes sens to find an instantiation which would make the ent succeed. eg (@L<:b & a<:b) ?
Fail.(may) cause: b=@L & @L<:a |-  a<:b. LOCS:[22;0] (may-bug)
*/


//5 same as 4 - skip
checkentail c::cell<a>@w & @L<:w |-  c::cell<b>@v & @L<:v.
expect Valid.
slk_simplify @L<:w & @L<:v & w<:v.  //----> @L<:v ---> v=@L
slk_simplify emp & exists(w: @L<:w & @L<:v & w<:v).  //----> @L<:v ---> v=@L



//8
checkentail c::cell<a>@w & @L<:w |-  c::cell<b>@v & v<:@M.
expect Fail.
print residue.
/**
Fail.(must) cause: @L<:w |-  v<:@M & w<:v.

pick_equality_instantiation@32@31@29
pick_equality_instantiation inp1 : @L<:w & v<:@M
pick_equality_instantiation@32 EXIT:Some( v=@M)

*/
slk_simplify @L<:w & v<:@M & w<:v.
slk_simplify emp & exists(w: @L<:w & v<:@M & w<:v).

//11
checkentail c::cell<a>@w & w<:@M |-  c::cell<b>@v & @L<:v.
expect Valid.
print residue.
/**
expect_infer I{} R{c::cell<a>@M&w<:@M & v=@L & b=a}.
*/
slk_simplify w<:@M & @L<:v & w<:v. //----> @L<:v ---> v=@L
slk_simplify emp & exists(w: w<:@M & @L<:v & w<:v). //----> @L<:v ---> v=@L


//14
checkentail c::cell<a>@w & w<:@L |-  c::cell<b>@v & @M<:v.
expect Fail.
print residue.
/*
Fail.(may) cause: v=@M & w<:@L |-  w<:v.
*/
slk_simplify w<:@L & @M<:v & w<:v. //----> @M<:v ---> v=@M.
slk_simplify emp & exists(w: w<:@L & @M<:v & w<:v). //----> @M<:v ---> v=@M.



//17
checkentail c::cell<a>@w & w<:@L & u=@M|-  c::cell<b>@v & u<:v.
expect Fail.
print residue.
/*
Fail.(may) cause: v=@M & w<:@L |-  w<:v.
*/
slk_simplify w<:@L & u=@M & w<:v & u<:v. //----> @M<:v ---> v=@M.
slk_simplify emp & exists(w,u:w<:@L & u=@M & w<:v & u<:v). //----> @M<:v ---> v=@M.



//20
checkentail c::cell<a>@w & u=ww |-  c::cell<b>@v & v=u.
expect Valid.
print residue.
/**
c::cell<a>@[@w, @v]&u=ww & w<:v & ww=v & b=a

pick_wekeast_instatiation@53@51
pick_wekeast_instatiation inp1 : c::cell<a>@[@w, @v]&u=ww&{FLOW,(20,21)=__norm#E}[]
pick_wekeast_instatiation inp2 : emp&v=u&{FLOW,(20,21)=__norm#E}[]
pick_wekeast_instatiation@53 EXIT:(Some( w<:v & ww=v),Some([]))

*/
slk_simplify ww=u & u=v & w<:v. //---->  v=u & w<:u. (due to empty lhs(w))
slk_simplify emp & exists(w,u,ww: ww=u & u=v & w<:v). //---->  v=u.



//23
checkentail c::cell<a>@w & w<:@L & u=ww |-  c::cell<b>@v & v=u.
expect Fail.
print residue.
/**
Fail.(may) cause: w<:@L |-  w<:v. 
*/
slk_simplify  w<:@L & ww=u & u=v & w<:v. //---->  v=u .
slk_simplify emp & exists(w,u,ww:  w<:@L & ww=u & u=v & w<:v). //---->  v=u.

//26
checkentail c::cell<a>@w & w<:@L |-  c::cell<b>@v & v<:@A.
expect Valid.
print residue.
/**
expect_infer I{} R{c::cell<a>@w&w<:@L & v=@A & b=a}.
*/
slk_simplify w<:@L & v<:@A & w<:v. //----> v<:@A ---> v=@A.
slk_simplify emp & exists(w: w<:@L & v<:@A & w<:v ). //----> v<:@A ---> v=@A.

//29
checkentail c::cell<a>@w & w<:@A |-  c::cell<b>@v & v<:@L.
expect Fail.
print residue.
/**
Fail.(may) cause: v=@L & w<:@A |-  w<:v
*/
slk_simplify w<:@A & v<:@L & w<:v. //----> v<:@L ---> v=@L.
slk_simplify emp & exists(w: w<:@A & v<:@L & w<:v ). //----> v<:@L ---> v=@L.