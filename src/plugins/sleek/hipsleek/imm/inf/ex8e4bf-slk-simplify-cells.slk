data cell{
 int val;
}.

// (1)
slk_simplify x::cell<a> * x::cell<b>@A. 

// (2)
slk_simplify x::cell<a>@L * x::cell<b>@L. 

// (3)
slk_simplify x::cell<v1>@a1 * x::cell<v2>@a2. 
/*
# ex8e4bf.slk 

# Is a=b sound?

slk_simplify x::cell<a> * x::cell<b>@A. 
Simplify  (1): x::cell<a>@M&b=a&{FLOW,(20,21)=__norm#E}[]

# if v1=v2 unsound, should we choose a1 or a2?
slk_simplify x::cell<v1>@a1 * x::cell<v2>@a2. 
Simplify  (3): x::cell<v1>@imm_23&v2=v1 & a2+a1=imm_23&{FLOW,(20,21)=__norm#E}[]

Better to have:
Simplify  (3): x::cell<nv>@imm_23& choose(nv,v1,v2,a1,a2) 
                 & a2+a1=imm_23&{FLOW,(20,21)=__norm#E}[]

Use choose(new_v,v1,v2,a1,a2)
 == a1=@M & new_v=v1 | a2=@M & new_v=v2 | 0<a1<1 & 0<a2<1 & new_v=v1=v2

*/

