data cell {
  int val;
}.


checkentail x::cell<a>@u & u=@L |- x::cell<b>@v & v=@A.
print residue.
// <1>x::cell<a>@[@u, @v]&u=@L & v=@A & b=a&{FLOW,(20,21)=__norm#E}[]
// should normalize to @L
expect Valid.

//(2)
checkentail x::cell<a>@u & u=@L |- x::cell<b>@v & v=@M.
print residue.
// <1>x::cell<a>@[@u, @v]&u=@L & v=@M & b=a&{FLOW,(20,21)=__norm#E}[]
// should fail
expect Fail.

//(3)
checkentail x::cell<a>@u & u=@L |- x::cell<b>@v & v=@L.
print residue.
// <1>x::cell<a>@[@u, @v]&u=@L & v=@L & b=a&{FLOW,(20,21)=__norm#E}[]
// should normalize to @A
expect Valid.

//(4)
checkentail x::cell<a>@u & u=@L |- x::cell<b>@v.
print residue.
// <1>x::cell<a>@[@u, @v]&u=@L & u=v & b=a&{FLOW,(20,21)=__norm#E}[]
// inst to v=@L
// better to instantiate to @L
expect Valid.

/*
# ex3d7g.slk

checkentail x::cell<a>@u & u=@L |- x::cell<b>@v & v=@A.
print residue.
// <1>x::cell<a>@[@u, @v]&u=@L & v=@A & b=a&{FLOW,(20,21)=__norm#E}[]
// should normalize to @L

//(2)
checkentail x::cell<a>@u & u=@L |- x::cell<b>@v & v=@M.
print residue.
// <1>x::cell<a>@[@u, @v]&u=@L & v=@M & b=a&{FLOW,(20,21)=__norm#E}[]
// should fail

//(3)
checkentail x::cell<a>@u & u=@L |- x::cell<b>@v & v=@L.
print residue.
// <1>x::cell<a>@[@u, @v]&u=@L & v=@L & b=a&{FLOW,(20,21)=__norm#E}[]
// should normalize to @A

//(4)
checkentail x::cell<a>@u & u=@L |- x::cell<b>@v.
print residue.
// <1>x::cell<a>@[@u, @v]&u=@L & u=v & b=a&{FLOW,(20,21)=__norm#E}[]
// inst to v=@L
// better to instantiate to @L

*/

