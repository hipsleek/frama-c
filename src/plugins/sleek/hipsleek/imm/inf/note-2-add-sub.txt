
ex8e1g.ss

int foo(cell c)
  infer [Q]
  requires c::cell<v>@a & a=@L //a=@L
  ensures c::cell<_>@b & Q(b); //c::cell<w>@b & b=@L  ;
/*
  requires c::cell<v>@a & a=@L
  ensures emp; //c::cell<w>@b & b=@L  ;
*/
{
 int x = c.fst;
 if (x!=1) {
   //c.fst =c.fst-1;
   int tmp=2+foo(c);
   dprint;
   return tmp;
 } else return 0;
}


*************************************
******pure relation assumption 1 *******
*************************************
[RELDEFN Q: ( Q(b_1507) & (b_1507+@L)<:b_1463) -->  Q(b_1463),
RELDEFN Q: ( @L<:b_1463) -->  Q(b_1463)]
*************************************

!!! **pi.ml#760:>>>>>>>>>>> (bef postprocess): <<<<<<<<<
!!! **pi.ml#761:>>REL POST:  Q(b_1463)
!!! **pi.ml#762:>>POST:  true
!!! **pi.ml#763:>>REL PRE :  true
!!! **pi.ml#764:>>PRE :  true

Post Inference result:
foo$cell
 EBase exists (Expl)[](Impl)[a; v](ex)[]c::cell<v>@a&a=@L & MayLoop[]&
       {FLOW,(4,5)=__norm#E}[]
         EAssume 
           (exists Anon_1462,b_1463: c::cell<Anon_1462>@b_1463&
           {FLOW,(4,5)=__norm#E}[]


-------------------------------------------------------------

As discussed, the reason we inferred true for post is that we replaced addition with a hole, thus we lost the dependency between b_1507 and b_1463, and things are reduced to true in fixcalc:

 ( Q(b_1507) & (b_1507+@L)<:b_1463) -->  Q(b_1463) >>>>>>>
 ( Q(b_1507) & imm1<:b_1463) -->  Q(b_1463) >>>>>>>
 (exists b_1507, imm1:  Q(b_1507) & imm1<:b_1463) -->  Q(b_1463) >>>>>>> [true --> Q(b_1463) ]

-------------------------------------------------------------

But, if we add the min/max constraints for our addition (merging):

x::cell<>@L*x::cell<>@b >>>>>>> x::cell<>@imm1 & imm1=@L+b & @A=max(@L,b) & imm1=min(@L,b))


all our problems are solved (even though we'll get buried in disjuncts, if both lhs imm and rhs imm are poly)

 @A=max(@NON-A-CONST,unk) is reduced to unk=@A
 @A=max(unk1,unk2)  maintains the dependency between the 


-------------------------------------------------------------
we'll get the proof obligations as follows (with simplifications and ignoring unrelated pure part):

adding rec call postcond :

 c::cell<v>@L * c::cell<_>@b1 & Q(b1) >>>>>  
  c::cell<v>@imm & imm=@L+b1 & @A=max(@L,b1) & imm=min(@L,b1) & Q(b1)

> What does @A=max(@L,b1) mean? Does this not constrain b1=@A?
> If we choose b1=@M, wouldn't max(@L,@M) return @L. Similarly for b1=@L.
> Both of which would lead to false.

> what does imm=min(@L,b1) mean?
> If b1=@L, does it mean imm=@L?
> If b1=@M, does it mean imm=@L?
> If b1=@A, does it mean imm=@L?
> If that is the case, does this not imply imm=@L?

proving post cond:

c::cell<v>@imm & imm=@L+b1 & @A=max(@L,b1) & imm=min(@L,b1) & Q(b1) |- x::cell<_>@b & Q(b)
c::cell<v>@[@imm,@b] & imm<:b & imm=@L+b1 & @A=max(@L,b1) & imm=min(@L,b1) & Q(b1) |- Q(b)

c::cell<v>@[@imm,@b] & imm<:b & imm=@L+b1 & (@A=@L & b1<:@L)|(b1=@A & @L<:b1) & (imm=@L & @L<:b1)|(imm=b1 & b1<:@L) & Q(b1) |- Q(b)

will lead to this def:

 imm<:b & imm=@L+b1 & (@A=@L & b1<:@L)|(b1=@A & @L<:b1) & (imm=@L & @L<:b1)|(imm=b1 & b1<:@L) & Q(b1) |- Q(b)
 imm<:b & imm=@L+b1 &                   b1=@A & @L<:b1  & (imm=@L & @L<:b1)|(imm=b1 & b1<:@L) & Q(b1) |- Q(b)
 imm<:b & imm=@L    &                   b1=@A & @L<:b1  & (imm=@L & @L<:b1)                   & Q(b1) |- Q(b)
 @L<:b & imm=@L    &                   b1=@A & @L<:@A  & imm=@L & @L<:@A                   & Q(b1) |- Q(b)    

 @L<:b & b1=@A & Q(b1) |- Q(b)

-------------------------------------------------------------
# ex8e1g.ss

c::cell<..>@L |- c::cell<..>@L (bind)
c::cell<..>@L * c::cell<..>@b1 & Q(b1) (pre-cond proving)
c::cell<..>@I & I=@L+@b1 & Q(b1) |- c::cell<..>@b & Q(b)  (post-cond)

Thus far when proving the recursive post-cond, we got the
following:

 I=@L+@b1 & Q(b1) & I<:@b --> Q(b)

-----------------------------------
Consider v1=v+v3.
How would we deal with such imm additions?

If we had: v1=@L+v3
Possible values are:
    @L=@L+@A
That is v1=@L & v3=@A

If we had:
    v1=@A+v3
Possible values are:
    @L=@A+@L
    @M=@A+@M
    @A=@A+@A
That is v1=v3.

If we had:
    v1=@M+v3
Possible values are:
    @M=@M+@A
That is v1=@M & v3=@A

In the general case, we have:
  v2=@L & v1=@L & v3=@A
  or v2=@A & v1=v3
  or v2=@M & v1=@M & v3=@A

Lastly, if we had:
    v1=@frac{f3}+v2
We should have:
    v1=@frac{f1} & v2=@frac{f2} & f1=f3+f2 //& 0<=f3+f2<=1
By default @frac{f1} --> 0<=f1<=1

--------------------------------
We also have to deal with the scenario:
  cell<..>@w2 |- cell<..>@w3 ---> cell<..>@w1
This is currently represented by a residue
cell<..>::@[w2-w3]

To make it uniform, we can represent it as:
  w1=w2-w3  & w2<:w3

If we had:
  w1=w2-@L & w2<:@L
Possible values are:
  w1=w2 & (w1=@M | w1=@L)


If we had:
  w1=w2-@M & w2<:@M
Possible values are:
  w2=@M & w1=@A


If we had:
  w1=w2-@A & w2<:@A
Possible values are:
  w1=w2

Thus, if we have a general scenario:
 w1=w2-w3

We can simply reduce it to: 
  w1=w2 & (w1=@M | w1=@L) & w3=@L
  or w2=@M & w1=@A & w3=@M
  or w1=w2 & w3=@A

This is somewhat different from w2=w1+w3.
We cannot therefore say that
  w1=w2-w3 <--> w1+w3=w2

Lastly, if we had:
  w1=w2-@frac{f3} & w2<:@frac{f3}
We should have:
  w1=@frac{f1} & w2=@frac{f2} & f1=f2-f3 & 0<=f2-f3<=1

---------
Comparing addition and subtraction, we had:

  w1=w2 & (w1=@M | w1=@L) & w3=@L
  or w2=@M & w1=@A & w3=@M
  or w1=w2 & w3=@A

  v2=@L & v1=@L & v3=@A
  or v2=@M & v1=@M & v3=@A
  or v2=@A & v1=v3

The main difference are:
  @L-@L = @L
  @M-@L = @M
while:
  @L+@L = false
  @L+@A = @L
  @M+@L = false
  @M+@A = @M

Of course @frac{0/_}=@A and @frac{1}=@M.
-----------------------------------

which is equivalent to:

[RELDEFN Q: ( Q(b_1507) & (b_1507+@L)<:b_1463) -->  Q(b_1463),

The point here is what is permitted for
 I=@L-b1
where @b1 is the annotation in the post-condition.

Now b1 can either be @A, @M and @L. 

It cannot be @M since @L-@M is invalid. 

It cannot be @L since @L is not allowed in
post-condition.

Hence, it can only be @A. Using this instantiation,
we would now obtain:

 I=@L-@b1 & b1=@A & Q(b1) & I<:@b --> Q(b)
 I<:@b --> Q(b)

 With this we only have:
   @L<:b  --> Q(b)

 Doing a post-condition processing, we get:
  Q(b) = b=@A

We can check if this idea applies to loop-write..

----------------------------------------

Operation


>> Addition
   v1=v2+v3   <-->  v1=min(v2,v3) & i=max(v2,v3) & @L<:i  

   v1=v2+v3   <-->  v1=min(v2,v3) & @A=max(v2,v3) //& @L<:max(v2,v3) 
   v1-v3=v2   <-->  v1=min(v2,v3) & @L<:max(v2,v3) 

===================

   v1=v2+v3   <-->  v1=min(v2,v3) & @L<:max(v2,v3)
   v1=@A+v3   <-->  v1=min(@A,v3) & @L<:max(@A,v3)
   v1=@A+v3   <-->  v1=v3 & @L<:@A

   v1=@L+v3   <-->  v1=min(@L,v3) & @L<:max(@L,v3)
              <-->  v1=min(@L,v3) & @L<:max(@L,v3)

Let v2=@M:
   v1=v2+v3   <-->  v1=min(v2,v3) & @L<:max(v2,v3)
   v1=@M+v3   <-->  v1=min(@M,v3) & @L<:max(@M,v3) 
   v1=@M+v3   <-->  v1=@M & @L<:max(@M,v3) 
As this allows v3 to be either @L or @A, I think
the interpretation is more for subtraction; and
do not reflect the addition process accurately. That
is for addition, the property is actually:
   v1=v2+v3    -->  v1=min(v2,v3) & @L<:max(v2,v3)

   v1    v2     v3      v1 = v2 + v3    v1=min(v2,v3)   i=max(v2,v3) & @L<:i    [v1=min(v2,v3) & i=max(v2,v3) & @L<:i]
   @M    @M     @M          False          True                 False                           False
 # @M    @M     @L          True           True                 True                            True
   @M    @M     @A          True           True                 True                            True
   @M   @L/@A  @L/@A        False          False                True                            False
   @L    @M     @M          False          False                False                           False
   @L    @M    @L,@A        False          False                True                            False
 # @L    @L     @L          True           True                 True                            True
   @L    @L     @A          True           True                 True                            True
   @L    @A     @A          False          False                True                            False
   @A    @M     @M          False          False                False                           False
   @A    @M    @L/@A        False          False                True                            False
   @A    @L    @L/@A        False          False                True                            False
   @A    @A     @A          True           True                 True                            True


>> Merge     x::cell<>@v2 * x::cell<>@v3 -----> x::cell<>@v1
   v1 = v2 + v3  &  @A = max(v2,v3) {& v1 = min(v2,v3)}    (* ensures one of the operands is @A - cuts back # cases *)
                    ^^^^^^^^^^^^^^^
>> Residue  x::cell<>@v1 |- x::cell<>@v3 -----> x::cell<>@v2 |- emp
   v2 = v1 - v3   <-->  v1 = v2 + v3  (where v1 = min(v2,v3)  ensures that the subtype v1<:v3 holds *)

Notes:
i.  eqmax will never be sent to the prover/fixcalc as long as one of its operands is known. 
(ex.:  @A=max(@M,v) --> v=@A  ;   @A=max(@A,v) --> true )
ii. addition and min will be reduced to a var when one of the operands is @A
(ex.:  v=@A+w --> v=w  ;   v=min(@A,w) --> v=w ;  )

