data cell{
 int fst;
}.

//(1)
checkentail c::cell<v>@a & a<:@M |-  c::cell<_>@b & b<:@M.
print residue.
expect Valid. // with b inst to @M

//(2)
checkentail c::cell<v>@a & a<:@L |-  c::cell<_>@b & b<:@L.
print residue.
expect Valid. // with b inst to @L

//(3)
checkentail c::cell<v>@a & a<:@L |-  c::cell<_>@b & b<:@A.
print residue.
expect Valid. // with b inst to @L

//(4)
checkentail c::cell<v>@a & @L<:a |-  c::cell<_>@b & b<:@A.
print residue.
expect Valid. // with b inst to @A

//(5)
checkentail c::cell<v>@a & @L<:a |-  c::cell<_>@b & b<:@L.
print residue.
expect Fail. // with b inst to @A

//(6)
checkentail c::cell<v>@a & @M<:a |-  c::cell<_>@b & b<:@L.
print residue.
expect Fail. // with b inst to @A

//(7)
checkentail c::cell<v>@a & @M<:a |-  c::cell<_>@b & @A<:b.
print residue.
expect Fail. // with b inst to @A

//(8)
checkentail c::cell<v>@a & @M<:a \\& b=@A 
  |-  c::cell<_>@b & @L<:b.
print residue.
expect Valid. // why not inst b=@A rather than b=@L

/*
# ex8e4g.slk


//(2)
checkentail c::cell<v>@a & a<:@L |-  c::cell<_>@b &b<:@L.

# expects Valid with b=@L inst

GOT inst b<:@L. Can we change to b=@L

Entail 2: Fail.(may) cause: b<:@L & a<:@L |-  a<:b. LOCS:[23;0] (may-bug)


*/