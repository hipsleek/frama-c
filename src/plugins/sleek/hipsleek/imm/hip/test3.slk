data node{
 int val;
 node next;
}.

pred ls<p,a,b> == self=p or
  self::node<_@a,q@b>*q::ls<p,a,b> //& self!=p
  inv true.

pred ll<p> == self=p or
  self::node<_,q>*q::ll<p> //& self!=p
  inv true.



/*
 checkentail (exists flted_54_43,flted_54_44,
flted_54_45: s::ls{}<flted_54_45,flted_54_44,flted_54_43>&flted_54_43=@M & 
flted_54_44=@M & flted_54_45=null & s'=s & z'=z & y'=y & x'=x)
 |-  (exists flted_13_52,flted_13_53: s'::ls{}<p,flted_13_53,flted_13_52>&
flted_13_53=@A & flted_13_52=@A). 
*/

/*
 checkentail s::ls<null,@A,@M> * w::ls<null,@M,@A> & w=s & s!=null |- s::ls<null,@M,@M>.
print residue.


checkentail x::node<a,y> |- x::node<b,z>.
print residue.


checkentail x::node<a,y> |- x::node<b,z@L>.
print residue.



checkentail x::node<a,y>@M |- x::node<b,z>@M.
print residue.

checkentail x::node<a,y>@M |- x::node<b,z>@L.
print residue.

checkentail x::ll<a>@M |- x::ll<b>@M.
print residue.
*/

checkentail x::ls<a,@M,@M> |- x::ls<b,@A,@M>.
print residue.

