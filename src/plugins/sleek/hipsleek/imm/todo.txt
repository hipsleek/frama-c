=============================================================
# tail-1.ss

Inferred pre is incorrect.

!!! >>>>>> HIP gather infer pre <<<<<<
!!! Inferred Heap :[]
!!! Inferred Pure :[ ann1<=2]

However, --en-sleek-logging-txt gave the correct result:

  es_infer_pure: [ann1<=0; ann1<=2]

Thus hip is not working correctly for this example!

 id: 5; caller: []; line: 12; classic: false; kind: POST; hec_num: 4; evars: []; c_heap: c::node<a,b>@ann1[Orig]
 checkentail emp&ann1<=2 & b=v_node_20_776' & res=v_node_20_776' & a=a_32 & b=b_33 & 
ann1<=0&{FLOW,(22,23)=__norm}[]
 |-  emp&b=res & a=a_32 & b=b_33&{FLOW,(22,23)=__norm}[]. 
res:  [
  emp&ann1<=2 & b=v_node_20_776' & res=v_node_20_776' & a=a_32 & b=b_33 & ann1<=0&{FLOW,(22,23)=__norm}[]
  es_infer_vars/rel: [ann1]
  es_infer_pure: [ann1<=0; ann1<=2]
  ]
*/
=============================================================
# imm/pre.ss

void foo(int n)
 infer [n] requires true ensures n>5;
{
  n=n+2;
  test(n);
}

void test(int n)
 requires n>1 ensures true;

WHY only below:

!!! Inferred Pure :[ 0<=n]

However sleek-logging gives:
  es_infer_pure: [6<=n; 0<=n]
It seems that we did not take into account
the proving of post-condition.

 id: 4; caller: []; line: 4; classic: false; kind: POST; hec_num: 2; evars: []; c_heap: emp
 checkentail emp&n=n_758 & 0<=n&{FLOW,(22,23)=__norm}[]
 |-  emp&5<n&{FLOW,(22,23)=__norm}[]. 
res:  [
  emp&n=n_758 & 0<=n & 6<=n&{FLOW,(22,23)=__norm}[]
  es_infer_vars/rel: [n]
  es_infer_pure: [6<=n; 0<=n]
  ]


*/
=============================================================
# imm/ll-lend-1.ss --field-ann 
# partially fixed: it detects if there is a @L in the view params, but if
# @L is build in vdef it does not. To be done

ll<n,a> == self=null & n=0 or
  self::node<_@a,q>*q::ll<n-1,a>
  inv n>=0;

int length(node p)
  requires p::ll<n,@L>
  ensures p::ll<n,@L> & res=n;

Above should flag an error since @L is present
in the post-condition.

=============================================================
# imm/ll-lend-b.ss --field-ann (solved in ann_1)

ll<n,a1,a2> == self=null & n=0 or
  self::node<_@a1,q@a2>*q::ll<n-1,a1,a2>
  inv n>=0;

int length(node p)
  requires p::ll<n,@M,@A>
  ensures p::ll<n,@M,@A> & res=n;

This currently succeeds but is actually
unsound since we need read permission on p.next
=============================================================
!!FIXED!!
# ll-lend-b.slk --field-ann 

Below should fail.

checkentail p::ll_ann<n,@M,@A> & n>0 |- p::node<_,_@L>.
  // why this succeed?

checkentail p::ll_ann<n,@A,@M> & n>0 |- p::node<_@L,_@M>.
  // why this succeed?
=============================================================
# imm/ll-lend-b.ss --field-ann

int length(node p)
/*
  requires p::ll_ann<n,@A,@L>
  ensures p::ll_ann<n,@A,@A> & res=n;
  requires p::ll_ann<n,@A,@L>
  ensures res=n;
*/
  requires p::ll_ann<n,@A,@L>
  ensures p::ll_ann<n,@A,@L> & res=n;
// should fail due to @L in post-condition
=============================================================
checkentail x::node<_@A>|- x::node<_@L>.

change "Fail.(must) cause: mismatched annotation" with it's actual reason
=============================================================
normalize the residue for:

checkentail x::node<_@v> & v=@A|- true.
<1>x::node<Anon_11@v>@M&0<=v & v=@A&{FLOW,(21,22)=__norm}

====> <1>x::node<Anon_11@A>@M & 0<=v & v=@A & {FLOW,(21,22)=__norm}
=============================================================
# ll-lend-c1.ss

ll<n> == self=null & n=0 or
  self::node<_@A,q@L>*q::ll<n-1>
  inv n>=0;

int length(node p)
  requires p::ll<n>
  ensures p::ll<n> & res=n;
// should fail due to @L in ll<n> post-condition
=============================================================
#sleek0222.slk - FIXED

residue should eliminate unnecessary exists:
Entail 1: Valid. 

 <1>(exists flted_30_63,flted_30_62,flted_30_61: x::node<p@[@M, @flted_30_63],q@A>@M&flted_30_62=@M & flted_30_61=@M & 2<n & a_66=p & q=q_67 & exists(flted_30_64:flted_30_62=flted_30_64 & @M<:flted_30_64 & @M<:flted_30_64) & exists(flted_30_63:0<=flted_30_63 & flted_30_61=flted_30_63 & @M<:flted_30_63 & @M<:flted_30_63) & exists(flted_30_65:flted_30_65=n+1)&{FLOW,(21,22)=__norm})[]
[[ SEARCH ==>  Fold ==>  Match ==>  COND ==>  Match ==> ]]
=============================================================
unsoud imm without setting  simpl_memset,
due to the fact that h_formula_2_mem detects false on ante 
when encounters * between nodes with disjoint fileds.
eg:
x::node<x@M,x@[@v]> * x::node<x@A,x@A> ==> false

=============================================================
FIXED:
Current restriction (which is not enforced by the parser yet):
when enable_field_ann is set, all imm ann for data inside 
view decl, must be parameters of view_decl in the order 
they are used for view data. ex:

ll<n,a1,a2> = self = null & n=0 or
               self::node<_@a1,q@a2> * q::ll<n,a1,a2>


fix the parameter positions: 
(i)   add one extra field for I.view_decl: annot * pos
(ii)  collecting imm info is done in Imm, for CF; must update 
      the functions so that they use IF.
(iii) during i2c, use the above field to update  CF.h_formula_view
     with the appropriate annot_arg * pos



=============================================================
FIXED:
for predicate params: need to check if there are ann params which 
are not used to annotate data fields inside the view def. Currently this kind
of scenarios cause problems. 

./
ex.:
pred foo<n,a1,a2> = root=null & n=0 or
     root::node<_@a1,q>*q::foo<n,a1,a2>

calling foo: foo<n1,@M,@L> --> ends up in errors because @L is not used

=============================================================
allow \& between nodes with disjoint fields

ex: x::ll<v*,@A,@M> & x::ll<w*,@M,@A> (v*=w*)

=============================================================

field-ann still needs the old  simpl_memset = ref true. The new
simpl does not consider all the cases. Need to check more on what's 
missing from the new, simplified h_formula_2_mem

=============================================================
 inf-imm/inf1_0.slk --- weird behavior below:
simplify-syn@19@18
simplify-syn inp1 : (v=@M | !(@L<:v))
simplify-syn@19 EXIT: (v0=@M | !(@L<:v))

norm_var_name@18
norm_var_name inp1 : (v=@M | !(@L<:v))
norm_var_name@18 EXIT: (v0=@M | !(@L<:v))


=============================================================
# default + ann_1

Why are there timeouts?

10s Timeout for bugs/clist1.ss
10s Timeout for hip/imspd.ss
^C10s Timeout for hip/schorr-waite-list.ss
=============================================================
# ex6a.ss

From:

  infer [@imm]
  requires x::node<a1,_>*y::node<a2,_>
  ensures x::node<_,_>*y::node<_,_> & res=a1+a2;

Can we derive the spec (node-level):

  requires x::node<a1,_>@L*y::node<a2,_>@L
  requires res=a1+a2

How come no immutability inferred?
=============================================================
# ex6b.ss

From:

  infer [@imm]
  requires x::node<a1,n1>*y::node<a2,n2>
  ensures x::node<a1,y>*y::node<_,_> ;

Can we derive (node_level):
 
  requires x::node<a1,n1>*y::node<_,_>@A
  ensures x::node<a1,y> ;

or field-level::
 
  requires x::node<a1@L,_>*y::node<_,_>@A
  ensures x::node<@A,y> ;
=============================================================
# ex6c.ss

From:

  infer [@imm]
  requires x::node<a1,n1>*y::node<a2,n2>
  ensures x::node<a1,n1>*y::node<_,_> & res=a1;

Can we derive:
 
  infer [@imm]
  requires x::node<a1,n1>@L*y::node<a2,n2>@A
  ensures  res=a1;
=============================================================
# ex7a.ss

  infer [R]
  requires x::node<a1,_>@z1*y::node<a2,_>@z2 & R(z1,z2)
  ensures x::node<_,_>*y::node<_,_> & res=a1+a2;

# latest ann_2

Expects z1=@L and z2=@L be inferred, but got nothing:

# ann_2 before merge with default:

[RELASS [R]: ( R(z1,z2)) -->  z1<:@L,
RELASS [R]: ( R(z1,z2)) -->  (z2<:@L | z1=@A),
RELASS [R]: ( R(z1,z2)) -->  ((z2=@M & z1=@M) | z1=@A)]

!!! top_down_fp:[( R(z1,z2,pz1,pz2), z2=@M & z1=@M)]

=============================================================
# ex6a.ss [FIXED]

# need to fix this warning..

Checking procedure join$node~node... 
WARNING: _0:0_0:0:Z3 error message: (error "line 692 column 35: unknown function/constant P__1426")
!!! **infer.ml#1312:f: P__1426(ann_1425,ann_1424)

GOT
===
join$node~node
 EBase 
   exists (Expl)[](Impl)[ann_1424; ann_1425; a1; Anon_14; a2; 
   Anon_15](ex)[]x::node<a1,Anon_14>@ann_1424 * y::node<a2,Anon_15>@ann_1425&
   ann_1424=@L & ann_1425=@L & MayLoop[]&{FLOW,(4,5)=__norm#E}[]
   EAssume 
     emp&{FLOW,(4,5)=__norm#E}[]

# What happen to res=a1+a2?

=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
