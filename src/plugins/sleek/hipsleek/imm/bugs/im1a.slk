

data node { int val ; node next }.
pred ll<n> == self = null & n = 0
	or self::node<next = r> * r::ll<n-1> 
	inv n >= 0.


checkentail x::ll<n>@L * y::ll<m> * ((t::ll<a>@L); z::ll<m>) & n > 0  
  |- x::ll<n>@L * y::ll<m>.
print residue.

checkentail (x::ll<n>@L); y::ll<m> * ((t::ll<a>@L); z::ll<m>) & n > 0  
  |- (x::ll<n>@L); y::ll<m>.
print residue.


/*

# im1a.slk

checkentail (x::ll<n>@L); y::ll<m> * ((t::ll<a>@L); z::ll<m>) & n > 0  
  |- (x::ll<n>@L); y::ll<m>.

Why are there two states? Isn't one enough?

 <1>(t::ll<a>@L ; z::ll<m>@M)&0<n & 0<=n&{FLOW,(19,20)=__norm}[]
<2>(t::ll<a>@L ; z::ll<m>@M)&0<n & 0<=n&{FLOW,(19,20)=__norm}[]

Below gives one state!

checkentail x::ll<n>@L * y::ll<m> * ((t::ll<a>@L); z::ll<m>) & n > 0  
  |- x::ll<n>@L * y::ll<m>.
print residue.

*/



