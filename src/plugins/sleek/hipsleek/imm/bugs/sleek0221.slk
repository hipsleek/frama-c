/*
@M - mutable   (0)
@I - immutable (1)
@L - lending   (2)
@A - no access (3)
*/

//data cell {int val;}.

data node {
	int val; 
	node next;	
}.

pred ll<n, v1> == self = null & n = 0 
	or self::node<a@v1, q> * 
    q::ll<n-1, v1>
  inv n >= 0.


// (3) Valid
/*checkentail x::node<p@L,q> * q::ll<n,@L,@L>@L & n > 2 |- x::ll<n+1,@L,@L>@L & n > 2.
print residue.
*/


/*
// (3) Valid
checkentail x::node<p,q> * q::ll<n,@M> & n > 2 |- x::ll<n+1,@M> & n > 2.
print residue.
*/

/*
// (3) Valid
checkentail x::node<p,q> & v=@M|- x::node<p,q>@v.
print residue.
*/
/*

// (1) Valid
checkentail x::node<p,q>@L  & v=@L |- x::node<p,q>@v.
print residue.


// (2) Valid
checkentail x::node<p,q>@L  & v=@M |- x::node<p,q>@v.
print residue.

// (3) Valid
checkentail x::node<p,q>@M |- (exists v: x::node<p@v,q>).
print residue.


// (4) Valid
checkentail x::node<p,q>@M  |- (exists v: x::node<p,q>@v & v=@M).
print residue.


// (5) Valid
checkentail x::node<p,q>@L  |- x::node<p,q>@v.
print residue.


// (6) Valid
checkentail x::node<p,q>@M  |- x::node<p@v,q>.
print residue.
*/

//(7)
checkentail x::node<p,q> * q::ll<n,@M> & n > 2 |- x::ll<n+1,@M> & n > 2.
print residue.