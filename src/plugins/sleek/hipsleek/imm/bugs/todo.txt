=========================================================
# imm-ls-1.slk

checkentail x::node<q> & q::node<r> & x!=q & x!=r |- x::lseg<q>.

Why is there another emp?
Can normalization remove 2nd emp?

Entail 1: Valid. 
 <1>((emp) ; ((q::node<r>@M ; (emp))))&q!=x & r!=x & q=q_29 & q_29!=x&{FLOW,(19,20)=__norm}[]
=========================================================
# im1a.slk

checkentail (x::ll<n>@L); y::ll<m> * ((t::ll<a>@L); z::ll<m>) & n > 0  
  |- (x::ll<n>@L); y::ll<m>.

Why are there two states? Isn't one enough?

 <1>(t::ll<a>@L ; z::ll<m>@M)&0<n & 0<=n&{FLOW,(19,20)=__norm}[]
<2>(t::ll<a>@L ; z::ll<m>@M)&0<n & 0<=n&{FLOW,(19,20)=__norm}[]

Below gives one state!

checkentail x::ll<n>@L * y::ll<m> * ((t::ll<a>@L); z::ll<m>) & n > 0  
  |- x::ll<n>@L * y::ll<m>.
print residue.
=========================================================
# imm/bugs/clist.ss

  requires x::clist<n>@L ensures false;

Why did we have imm failure which also occurs with --imm

Checking procedure length$node... 
Proving precondition in method length$node Failed.
  (must) cause:  mismatched imm annotation for data node

Context of Verification Failure: 1 File "clist.ss",Line:25,Col:33
Last Proving Location: 1 File "clist.ss",Line:39,Col:15

Procedure length$node FAIL.(2)

Exception Failure("Proving precond failed") Occurred!
(Program not linked with -g, cannot print stack backtrace)

=========================================================
# clist1.ss

  requires x::clist<n> ensures false;

Why did we go into a loop with the above spec?
Is it due to lemma?
=========================================================
=========================================================
=========================================================
=========================================================
=========================================================
=========================================================
=========================================================
=========================================================
=========================================================
=========================================================
