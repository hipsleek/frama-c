

data node {
	int val; 
	node next;	
}.

pred ll<n> == self = null & n = 0 
	or self::node<_, q> * q::ll<n-1> 
  inv n >= 0.

infer [n] x::ll<n> |- x::node<_,null>.
print residue.
expect Valid.
expect_infer Valid I{n=1}.

/*
# ex5b.slk --esl

id: 6; caller: []; line: 0; classic: false; kind: Validate(1.1); hec_num: 1; evars: []; infer_vars: [ ]; c_heap: emp; others: [] globals: []
 checkentail emp&n!=0 & n<=1&{FLOW,(20,21)=__norm#E}[]
 |-  emp&n=1&{FLOW,(20,21)=__norm#E}[]. 
ho_vars: nothing?
res:  failctxfe_kind: MAY
        fe_name: logical bug
        fe_locs: {
    fc_message:  n<=1 & n!=0 |-  n=1. LOCS:[1;0;15] (may-bug)
    fc_current_lhs_flow: {FLOW,(20,21)=__norm#E}
  }
[[empty]]false

# Fixed by using the orig LHS in a ref variable:

!!! **sleekengine.ml#1113:last_entail_lhs: x::ll<n>&{FLOW,(20,21)=__norm#E}[]
!!! **sleekengine.ml#1138:ivars:[n]

*/