data node {
    int v;
    node next;
}.

pred lls<n,k> == 
 case {
   n=k -> [] self=null & n=0 & k=0
         or self::node<v,q> * q::lls<n-1,k-1> & n=k & v>0;
   n!=k -> [] self::node<v,q> * q::lls<n-1,k>;
 }
 inv n>=k>=0.

// below looks reasonable to me..

checkentail xs::node<v,q> * q::lls<n,k> & n=k |- xs::lls<nn,kk>.
print residue.

checkentail xs::node<v,q> * q::lls<n,k> & v>0 & n=k |- xs::lls<nn,kk>.
print residue.
// 2 answers

checkentail xs::node<v,q1> * q1::node<v2,q2> * q2::lls<n,k> & n=k
  |- xs::lls<nn,kk>.
print residue.
// 1 answer


checkentail xs::node<v1,q1> * q1::node<v2,q2> * q2::lls<n,k> & n=k
   & v1>0 & v2>0
  |- xs::lls<nn,kk>.
print residue.
// 3 answers
