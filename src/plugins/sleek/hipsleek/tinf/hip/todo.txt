# loop.ss

Need to pick up 
   ctx & false --> Loop

Otherwise, case-split will have missing
case, as below.

foo:  case {
  i=0 -> requires emp & Term[30,1]
 ensures emp & true; 
  }
  
  
===============================================================
 hip/ll-sum-sr2  

< ERROR: at _0:0_0:0 
< Message: Post condition cannot be derived.
<  
< ExceptionFailure("Post condition cannot be derived.")Occurred!
32,37c37
< Error1(s) detected at main 
< caught
< (Program not linked with -g, cannot print stack backtrace)
< 
< Exception occurred: Failure("Post condition cannot be derived.")
< Error3(s) detected at main 
---
> 0 false contexts at: ()
=================================================================
# ll-sum-sr2.ss

	infer[@term]
	requires x::ll<r>
	ensures true;

Why is there duplicated base-case?
Why was r>=0 added?

sum_dec:  requires x::ll<r> & true
case {
   r=0 -> requires emp & Term[94,1]
          ensures emp & 0<=r;

   r=0 -> requires emp & Term[94,2]
          ensures emp & 0<=r;
                          
  1<=r -> requires emp & Term[94,3,0+(1*r)]
          ensures emp & 0<=r; 
                          }
=================================================================
# bigint-a.ss

went into a loop!
do we ned to invoke redlog?

//infer[@term]
  requires x::bigint<v> & 0 <= c <= 9
  ensures res::bigint<v+c> * x::bigint<v>;

===============================================================
# wloop.ss

  while (y<x) 
  infer[@post_n,@term]
  requires true
  ensures true; 
  {
    y++;
  }

Termination Inference Result:
while_7_2:  case {
  x<=y -> requires emp & Term[74,1]
     ensures emp & ((x=y' & y<y') | 
  (y=y' & x<=y')); 
  y<x -> requires emp & Term[74,2,-1+(1*x)+(-1*
  y)]
     ensures emp & ((x=y' & y<y') | (y=y' & x<=y')); 
  }

# Desired # can we combine the base and recursive case?
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================
===============================================================

=================================================================
=================================================================
=================================================================
