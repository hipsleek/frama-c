
!!!Full processing file "slk/termu-5b.ss"
Parsing file "slk/termu-5b.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

Checking procedure f$int~int... 
Procedure f$int~int SUCCESS.

Checking procedure f$int~int... 

*****************************
*** TERMINATION INFERENCE ***
*****************************
Temporal Assumptions:
 termAssume v_int_12_1192=1+y' & v_int_12_1191=y'+x' & !(v_bool_11_1132') & 
0<=x' & !(v_bool_11_1132') & x'=x & y'=y & 
0<=x' & fpost_0(v_int_12_1191,v_int_12_1192) --> fpost_0(x,y).

 termAssume x'<0 & y'=y & x'=x & v_bool_11_1132' & x'<0 & 
v_bool_11_1132' --> fpost_0(x,y).

 termAssume 0<=x' & y'=y & x'=x & !(v_bool_11_1132') & 0<=x' & 
!(v_bool_11_1132') & v_int_12_1131'=y'+x' & v_int_12_1130'=1+
y' & fpre_0(x,y) --> fpre_0(v_int_12_1131',v_int_12_1130').


Base/Rec Case Splitting:
[	f: [[2] x<=(0-1)@B,[3] 0<=x@R]
]
Termination Inference Result:
f:  case {
  x<=(0-1) -> requires emp & Term[29,1]
 ensures emp & true; 
  0<=x -> case {
           0<=y -> requires emp & Loop[]
 ensures false & false; 
           y<=(0-
           1) -> case {
                  (0-x)<=y & y<=(0-
                  2) -> requires emp & MayLoop[]
 ensures emp & true; 
                  0<=x & x<=((0-y)-1) & y<=(0-
                  2) -> requires emp & Term[29,3]
 ensures emp & true; 
                  0<=(1+
                  y) -> case {
                         x=0 & y=0-
                         1 -> requires emp & Term[29,2]
 ensures emp & true; 
                         y=0-1 & 
                         1<=x -> requires emp & Loop[]
 ensures false & false;
                         
                         }
                  
                  }
           
           }
  
  }

0 false contexts at: ()
