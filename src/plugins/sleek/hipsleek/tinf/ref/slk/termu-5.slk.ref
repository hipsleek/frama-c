Starting Omega...oc
Starting z3... 


*****************************
*** TERMINATION INFERENCE ***
*****************************
Temporal Assumptions:
 termAssume y'=y & x'=y+x & 0<=x & fpost_0(x',y') --> fpost_0(x,y).

 termAssume x<0 --> fpost_0(x,y).

 termAssume y'=y & x'=y+x & 0<=x & fpre_0(x,y) --> fpre_0(x',y').


Base/Rec Case Splitting:
[	f: [[2] x<=(0-1)@B,[3] 0<=x@R]
]
Termination Inference Result:
f:  case {
  x<=(0-1) -> requires emp & Term[0,1]
 ensures emp & true; 
  0<=x -> case {
           0<=y -> requires emp & Loop[]
 ensures false & false; 
           y<=(0-1) -> requires emp & Term[0,2,0+(1*x)+(0*
           y)]
 ensures emp & true; 
           }
  
  }


*****************************
*** TERMINATION INFERENCE ***
*****************************
Temporal Assumptions:
 termAssume v_bool_11_876' & x'<0 & v_bool_11_876' & x=x' & y=y' & 
x'<0 --> fpost_0(x,y).

 termAssume 0<=x' & y=y' & x=x' & !(v_bool_11_876') & 0<=x' & 
!(v_bool_11_876') & fpost_0(y'+x',y') --> fpost_0(x,y).

 termAssume v_int_12_875'=x'+y' & !(v_bool_11_876') & 0<=x' & 
!(v_bool_11_876') & x=x' & y=y' & 
0<=x' & fpre_0(x,y) --> fpre_0(v_int_12_875',y').


Base/Rec Case Splitting:
[	f: [[2] x<=(0-1)@B,[3] 0<=x@R]
]
Termination Inference Result:
f:  case {
  x<=(0-1) -> requires emp & Term[0,1]
 ensures emp & true; 
  0<=x -> case {
           0<=y -> requires emp & Loop[]
 ensures false & false; 
           y<=(0-1) -> requires emp & Term[0,2,0+(1*x)+(0*
           y)]
 ensures emp & true; 
           }
  
  }

