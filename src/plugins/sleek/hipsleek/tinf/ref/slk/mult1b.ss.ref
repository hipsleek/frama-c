
!!!Full processing file "slk/mult1b.ss"
Parsing file "slk/mult1b.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

Checking procedure f2$int~int... 
Procedure f2$int~int SUCCESS.

Checking procedure f2$int~int... 

*****************************
*** TERMINATION INFERENCE ***
*****************************
Temporal Assumptions:
 termAssume res=v_int_16_1139' & 0<=v_int_16_1264 & 0<=y' & 0<=y' & 
0<=v_int_16_1264 & v_int_16_1264=y'+x' & !(v_bool_15_1140') & 0<=x' & 
!(v_bool_15_1140') & x'=x & y'=y & 0<=x & 0<=y & 
0<=x' & f2post_1135(v_int_16_1264,y') --> f2post_1135(x,y).

 termAssume res=v_int_16_1139' & 0<=v_int_16_1224 & y'<0 & y'<0 & 
0<=v_int_16_1224 & v_int_16_1224=y'+x' & !(v_bool_15_1140') & 0<=x' & 
!(v_bool_15_1140') & x'=x & y'=y & 0<=x & y<0 & 
0<=x' & f2post_1134(v_int_16_1224,y') --> f2post_1134(x,y).

 termAssume res=v_int_16_1139' & v_int_16_1223<0 & v_int_16_1139'=0 & 
v_int_16_1223<0 & v_int_16_1223=y'+x' & !(v_bool_15_1140') & 0<=x' & 
!(v_bool_15_1140') & x'=x & y'=y & 0<=x & y<0 & 
0<=x' & f2post_1133(v_int_16_1223,y') --> f2post_1134(x,y).

 termAssume x'<0 & x<0 & y'=y & x'=x & v_bool_15_1140' & x'<0 & 
v_bool_15_1140' & v_int_15_1137'=0 & res=v_int_15_1137' --> f2post_1133(x,y).

 termAssume 0<=x' & 0<=y & 0<=x & y'=y & x'=x & !(v_bool_15_1140') & 0<=x' & 
!(v_bool_15_1140') & v_int_16_1138'=y'+x' & 0<=v_int_16_1138' & 
0<=y' & f2pre_0(x,y) --> f2pre_0(v_int_16_1138',y').

 termAssume 0<=x' & y<0 & 0<=x & y'=y & x'=x & !(v_bool_15_1140') & 0<=x' & 
!(v_bool_15_1140') & v_int_16_1138'=y'+x' & 0<=v_int_16_1138' & 
y'<0 & f2pre_0(x,y) --> f2pre_0(v_int_16_1138',y').

 termAssume 0<=x' & y<0 & 0<=x & y'=y & x'=x & !(v_bool_15_1140') & 0<=x' & 
!(v_bool_15_1140') & v_int_16_1138'=y'+x' & 
v_int_16_1138'<0 & f2pre_0(x,y) --> Term.


Base/Rec Case Splitting:
[	f2: [[4] x<=(0-1)@B,[5] 0<=x & 0<=y@R,[6] y<=(0-1) & 0<=x@R]
]
Termination Inference Result:
f2:  case {
  x<=(0-1) -> requires emp & Term[29]
 ensures emp & x<0 & res=0; 
  0<=x -> case {
           y<0 -> requires emp & Term[29,2,0+(1*x)+(0*
           y)]
 ensures emp & 0<=x & y<0; 
           0<=y -> requires emp & Loop[]
 ensures false & false; 
           }
  
  }

Termination checking result: SUCCESS


5 false contexts at: ( (15,11)  (15,18)  (16,7)  (16,17)  (16,14) )
