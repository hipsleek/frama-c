
!!!Full processing file "slk/case-1.ss"
Parsing file "slk/case-1.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

Checking procedure f$int~int... 
Procedure f$int~int SUCCESS.

Checking procedure f$int~int... 

*****************************
*** TERMINATION INFERENCE ***
*****************************
Temporal Assumptions:
 termAssume 0<=v_int_17_1296 & v_int_17_1297<0 & v_int_17_1297<0 & 
0<=v_int_17_1296 & v_int_17_1297=1+y' & v_int_17_1296=y'+x' & 
!(v_bool_16_1138') & 0<=x' & !(v_bool_16_1138') & x'=x & y'=y & 0<=x & y<0 & 
0<=x' & fpost_0(v_int_17_1296,v_int_17_1297) --> fpost_0(x,y).

 termAssume 0<=v_int_17_1294 & 0<=v_int_17_1295 & 0<=v_int_17_1295 & 
0<=v_int_17_1294 & v_int_17_1295=1+y' & v_int_17_1294=y'+x' & 
!(v_bool_16_1138') & 0<=x' & !(v_bool_16_1138') & x'=x & y'=y & 0<=x & y<0 & 
0<=x' & fpost_0(v_int_17_1294,v_int_17_1295) --> fpost_0(x,y).

 termAssume v_int_17_1292<0 & v_int_17_1292<0 & v_int_17_1293=1+y' & 
v_int_17_1292=y'+x' & !(v_bool_16_1138') & 0<=x' & !(v_bool_16_1138') & 
x'=x & y'=y & 0<=x & y<0 & 
0<=x' & fpost_0(v_int_17_1292,v_int_17_1293) --> fpost_0(x,y).

 termAssume 0<=v_int_17_1227 & 0<=v_int_17_1228 & 0<=v_int_17_1228 & 
0<=v_int_17_1227 & v_int_17_1228=1+y' & v_int_17_1227=y'+x' & 
!(v_bool_16_1138') & 0<=x' & !(v_bool_16_1138') & x'=x & y'=y & 0<=x & 
0<=y & 0<=x' & fpost_0(v_int_17_1227,v_int_17_1228) --> fpost_0(x,y).

 termAssume x'<0 & x<0 & y'=y & x'=x & v_bool_16_1138' & x'<0 & 
v_bool_16_1138' --> fpost_0(x,y).

 termAssume 0<=x' & y<0 & 0<=x & y'=y & x'=x & !(v_bool_16_1138') & 0<=x' & 
!(v_bool_16_1138') & v_int_17_1137'=y'+x' & v_int_17_1136'=1+y' & 
0<=v_int_17_1137' & 
v_int_17_1136'<0 & fpre_0(x,y) --> fpre_0(v_int_17_1137',v_int_17_1136').

 termAssume 0<=x' & y<0 & 0<=x & y'=y & x'=x & !(v_bool_16_1138') & 0<=x' & 
!(v_bool_16_1138') & v_int_17_1137'=y'+x' & v_int_17_1136'=1+y' & 
0<=v_int_17_1137' & 
0<=v_int_17_1136' & fpre_0(x,y) --> fpre_0(v_int_17_1137',v_int_17_1136').

 termAssume 0<=x' & y<0 & 0<=x & y'=y & x'=x & !(v_bool_16_1138') & 0<=x' & 
!(v_bool_16_1138') & v_int_17_1137'=y'+x' & v_int_17_1136'=1+y' & 
v_int_17_1137'<0 & fpre_0(x,y) --> fpre_0(v_int_17_1137',v_int_17_1136').

 termAssume 0<=x' & 0<=y & 0<=x & y'=y & x'=x & !(v_bool_16_1138') & 0<=x' & 
!(v_bool_16_1138') & v_int_17_1137'=y'+x' & v_int_17_1136'=1+y' & 
0<=v_int_17_1137' & 
0<=v_int_17_1136' & fpre_0(x,y) --> fpre_0(v_int_17_1137',v_int_17_1136').


Base/Rec Case Splitting:
[	f: [[5] x<=(0-1)@B,[6] 0<=x@R]
]
Termination Inference Result:
f:  case {
  x<=(0-1) -> requires emp & Term[29,1]
 ensures emp & x<0; 
  0<=x -> case {
           0<=y -> requires emp & Loop[]
 ensures false & false; 
           y<0 -> case {
                   y<=(0-4) & 0<=(6+x+(4*
                   y)) -> requires emp & MayLoop[]
 ensures emp & 0<=x & y<0; 
                   0<=(3+y) & 0<=(3+x+(3*y)) & 0<=(x+
                   y) -> requires emp & Loop[]
 ensures false & false; 
                   ((0-(3*y))-3)<=x & x<=((0-(4*y))-
                   7) -> requires emp & Term[29,5]
 ensures emp & 0<=x & y<0; 
                   ((0-(2*y))-1)<=x & x<=((0-(3*y))-
                   4) -> requires emp & Term[29,4]
 ensures emp & 0<=x & y<0; 
                   (0-y)<=x & x<=((0-(2*y))-
                   2) -> requires emp & Term[29,3]
 ensures emp & 0<=x & y<0; 
                   x<=((0-y)-
                   1) -> requires emp & Term[29,2]
 ensures emp & 0<=x & y<0; 
                   }
           
           }
  
  }

Termination checking result: SUCCESS


5 false contexts at: ( (16,13)  (17,20)  (17,16)  (17,9)  (17,7) )
