Starting Omega...oc


*****************************
*** TERMINATION INFERENCE ***
*****************************
Temporal Assumptions:
 termAssume x=0 --> fpost_0(x).

 termAssume x!=0 & x=1+x' & x'=0 & fpost_0(x') --> fpost_0(x).

 termAssume x!=0 & x=1+x' & x'!=0 & fpost_0(x') --> fpost_0(x).

 termAssume x!=0 & x=1+x' & x'!=0 & fpre_0(x) --> fpre_0(x').

 termAssume x!=0 & x=1+x' & x'=0 & fpre_0(x) --> fpre_0(x').

Starting z3... 

Base/Rec Case Splitting:
[	f: [[3] x=0@B,[4] 1<=x@R,[5] x<=(0-1)@R]
]
Termination Inference Result:
f:  case {
  x=0 -> requires emp & Term[0,1]
 ensures emp & true; 
  1<=x -> requires emp & Term[0,2,-1+(1*x)]
 ensures emp & true; 
  x<=(0-1) -> requires emp & Loop[]
 ensures false & false; 
  }


*****************************
*** TERMINATION INFERENCE ***
*****************************
Temporal Assumptions:
 termAssume x=0 --> fpost_0(x).

 termAssume x!=0 & x=1+x' & fpost_0(x') --> fpost_0(x).

 termAssume x!=0 & x=1+x' & x'!=0 & fpre_0(x) --> fpre_0(x').

 termAssume x!=0 & x=1+x' & x'=0 & fpre_0(x) --> fpre_0(x').


Base/Rec Case Splitting:
[	f: [[3] x=0@B,[4] 1<=x@R,[5] x<=(0-1)@R]
]
Termination Inference Result:
f:  case {
  x=0 -> requires emp & Term[0,1]
 ensures emp & true; 
  1<=x -> requires emp & Term[0,2,-1+(1*x)]
 ensures emp & true; 
  x<=(0-1) -> requires emp & Loop[]
 ensures false & false; 
  }


*****************************
*** TERMINATION INFERENCE ***
*****************************
Temporal Assumptions:
 termAssume b & x=0 --> fpost_0(x).

 termAssume !(b) & x!=0 & x=1+x' & x'=0 & fpost_0(x') --> fpost_0(x).

 termAssume !(b) & x!=0 & x=1+x' & x'!=0 & fpost_0(x') --> fpost_0(x).

 termAssume x!=0 & x=1+x' & x'!=0 & fpre_0(x) --> fpre_0(x').

 termAssume x!=0 & x=1+x' & x'=0 & fpre_0(x) --> fpre_0(x').


Base/Rec Case Splitting:
[	f: [[3] x=0@B,[4] 1<=x@R,[5] x<=(0-1)@R]
]
Termination Inference Result:
f:  case {
  x=0 -> requires emp & Term[0,1]
 ensures emp & true; 
  1<=x -> requires emp & Term[0,2,-1+(1*x)]
 ensures emp & true; 
  x<=(0-1) -> requires emp & Loop[]
 ensures false & false; 
  }


*****************************
*** TERMINATION INFERENCE ***
*****************************
Temporal Assumptions:
 termAssume res=v_int_12_880' & v_int_12_880'=1 & v_bool_12_886' & x'=x' & 
v_bool_12_886' & x=x' & x=0 & x'=0 --> fpost_0(x).

 termAssume res=v_int_13_885' & v_int_13_885'=1+v_int_13_952 & x'!=0 & 
x!=0 & x=x' & !(v_bool_12_886') & x'!=0 & !(v_bool_12_886') & x'=1+0 & 
1<=v_int_13_952 & fpost_0(0) --> fpost_0(x).

 termAssume res=v_int_13_885' & v_int_13_885'=1+v_int_13_954 & x'!=0 & 
x!=0 & x=x' & !(v_bool_12_886') & x'!=0 & !(v_bool_12_886') & x'=1+
v_int_13_948 & v_int_13_948!=0 & 
1<=v_int_13_954 & fpost_0(v_int_13_882') --> fpost_0(x).

 termAssume v_int_13_882'=0 & x'=1+v_int_13_882' & v_int_13_884'=1 & 
!(v_bool_12_886') & x'!=0 & !(v_bool_12_886') & x=x' & x!=0 & 
x'!=0 & fpre_0(x) --> Term.

 termAssume v_int_13_882'!=0 & x'=1+v_int_13_882' & v_int_13_884'=1 & 
!(v_bool_12_886') & x'!=0 & !(v_bool_12_886') & x=x' & x!=0 & 
x'!=0 & fpre_0(x) --> fpre_0(v_int_13_882').


Base/Rec Case Splitting:
[	f: [[3] x=0@B,[4] 1<=x@R,[5] x<=(0-1)@R]
]
Termination Inference Result:
f:  case {
  x=0 -> requires emp & Term[0,1]
 ensures emp & true; 
  1<=x -> requires emp & Term[0,2,-1+(1*x)]
 ensures emp & true; 
  x<=(0-1) -> requires emp & Loop[]
 ensures false & false; 
  }

