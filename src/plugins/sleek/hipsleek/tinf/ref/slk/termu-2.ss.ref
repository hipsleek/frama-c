
!!!Full processing file "slk/termu-2.ss"
Parsing file "slk/termu-2.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

Checking procedure g$int... 
Procedure g$int SUCCESS.

Checking procedure f$int~int... 
Procedure f$int~int SUCCESS.

Checking procedure g$int... 
Checking procedure f$int~int... 

*****************************
*** TERMINATION INFERENCE ***
*****************************
Temporal Assumptions:
 termAssume !(v_bool_6_1134') & 0<=x' & !(v_bool_6_1134') & x'=x & y'=y & 
0<=x' & gpost_1122(x') --> fpost_1132(x,y).

 termAssume x'<0 & y'=y & x'=x & v_bool_6_1134' & x'<0 & 
v_bool_6_1134' --> fpost_1132(x,y).

 termAssume v_int_16_1178=0 & v_int_16_1177+1=z' & !(v_bool_15_1127') & 
0<=z' & !(v_bool_15_1127') & z'=z & 
0<=z' & fpost_1132(v_int_16_1177,v_int_16_1178) --> gpost_1122(z).

 termAssume z'<0 & z'=z & v_bool_15_1127' & z'<0 & 
v_bool_15_1127' --> gpost_1122(z).

 termAssume 0<=x' & y'=y & x'=x & !(v_bool_6_1134') & 0<=x' & 
!(v_bool_6_1134') & fpre_0(x,y) --> gpre_0(x').

 termAssume 0<=z' & z'=z & !(v_bool_15_1127') & 0<=z' & !(v_bool_15_1127') & 
v_int_16_1126'+1=z' & 
v_int_16_1125'=0 & gpre_0(z) --> fpre_0(v_int_16_1126',v_int_16_1125').


Base/Rec Case Splitting:
[	f: [[3] x<=(0-1)@B,[4] 0<=x@R]
,	g: [[5] z<=(0-1)@B,[6] 0<=z@R]
]
Termination Inference Result:
g:  case {
  z<=(0-1) -> requires emp & Term[30,2]
 ensures emp & true; 
  0<=z -> requires emp & Term[30,3,0+(2*z)]
 ensures emp & true; 
  }
f:  case {
  x<=(0-1) -> requires emp & Term[30,1]
 ensures emp & true; 
  0<=x -> requires emp & Term[30,3,1+(2*x)+(0*y)]
 ensures emp & true; 
  }

0 false contexts at: ()
