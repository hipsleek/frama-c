Starting Omega...oc
Starting z3... 


*****************************
*** TERMINATION INFERENCE ***
*****************************
Temporal Assumptions:
 termAssume z'=z & y'=z+y & x'=y+x & 
0<=x & fpost_0(x',y',z') --> fpost_0(x,y,z).

 termAssume x<0 --> fpost_0(x,y,z).

 termAssume z'=z & y'=z+y & x'=y+x & 
0<=x & fpre_0(x,y,z) --> fpre_0(x',y',z').


Base/Rec Case Splitting:
[	f: [[2] x<=(0-1)@B,[3] 0<=x@R]
]
Termination Inference Result:
f:  case {
  x<=(0-1) -> requires emp & Term[0,1]
 ensures emp & true; 
  0<=x -> case {
           0<=y -> case {
                    0<=z -> requires emp & Loop[]
 ensures false & false; 
                    z<=(0-1) -> requires emp & Term[0,3,0+(0*x)+(1*y)+(0*
                    z)]
 ensures emp & true; 
                    }
           
           y<=(0-
           1) -> case {
                  z<=0 -> requires emp & Term[0,2,0+(1*x)+(0*y)+(0*
                  z)]
 ensures emp & true; 
                  1<=z -> case {
                           0<=x & x<=((0-y)-1) & 
                           1<=z -> requires emp & Term[0,4]
 ensures emp & true;
                           
                           0<=x & 0<=(x+
                           y) -> case {
                                  (0-x)<=y & y<=(0-1) & 0<=(x+(2*y)+z) & 
                                  1<=z -> case {
                                           1<=z & z<=((0-y)-1) & 0<=(x+(2*y)+
                                           z) & 0<=(x+(3*y)+(3*
                                           z)) -> requires emp & MayLoop[]
 ensures emp & true;
                                           
                                           1<=z & 0<=(y+
                                           z) -> requires emp & MayLoop[]
 ensures emp & true;
                                           
                                           1<=z & (x+(3*y)+(3*z))<0 & 0<=(x+
                                           (2*y)+
                                           z) -> requires emp & MayLoop[]
 ensures emp & true;
                                           
                                           }
                                  
                                  (0-x)<=y & y<=(0-1) & (x+(2*y)+
                                  z)<0 -> requires emp & Term[0,5]
 ensures emp & true;
                                  
                                  }
                           
                           }
                  
                  }
           
           }
  
  }


*****************************
*** TERMINATION INFERENCE ***
*****************************
Temporal Assumptions:
 termAssume v_bool_9_880' & x'<0 & v_bool_9_880' & x=x' & y=y' & z=z' & 
x'<0 --> fpost_0(x,y,z).

 termAssume 0<=x' & z=z' & y=y' & x=x' & !(v_bool_9_880') & 0<=x' & 
!(v_bool_9_880') & fpost_0(y'+x',z'+y',z') --> fpost_0(x,y,z).

 termAssume v_int_10_878'=y'+z' & v_int_10_879'=x'+y' & !(v_bool_9_880') & 
0<=x' & !(v_bool_9_880') & x=x' & y=y' & z=z' & 
0<=x' & fpre_0(x,y,z) --> fpre_0(v_int_10_879',v_int_10_878',z').


Base/Rec Case Splitting:
[	f: [[2] x<=(0-1)@B,[3] 0<=x@R]
]
Termination Inference Result:
f:  case {
  x<=(0-1) -> requires emp & Term[0,1]
 ensures emp & true; 
  0<=x -> case {
           0<=y -> case {
                    0<=z -> requires emp & Loop[]
 ensures false & false; 
                    z<=(0-1) -> requires emp & Term[0,3,0+(0*x)+(1*y)+(0*
                    z)]
 ensures emp & true; 
                    }
           
           y<=(0-
           1) -> case {
                  z<=0 -> requires emp & Term[0,2,0+(1*x)+(0*y)+(0*
                  z)]
 ensures emp & true; 
                  1<=z -> case {
                           0<=x & x<=((0-y)-1) & 
                           1<=z -> requires emp & Term[0,4]
 ensures emp & true;
                           
                           0<=x & 0<=(x+
                           y) -> case {
                                  (0-x)<=y & y<=(0-1) & 1<=z & 0<=(z+x+(2*
                                  y)) -> case {
                                          1<=z & z<=((0-y)-1) & 0<=(z+x+(2*
                                          y)) & 0<=((3*z)+x+(3*
                                          y)) -> requires emp & MayLoop[]
 ensures emp & true;
                                          
                                          1<=z & 0<=(z+
                                          y) -> requires emp & MayLoop[]
 ensures emp & true;
                                          
                                          1<=z & ((3*z)+x+(3*y))<0 & 0<=(z+x+
                                          (2*
                                          y)) -> requires emp & MayLoop[]
 ensures emp & true;
                                          
                                          }
                                  
                                  0<=(x+y) & (z+x+(2*y))<0 & 
                                  1<=z -> requires emp & Term[0,5]
 ensures emp & true;
                                  
                                  }
                           
                           }
                  
                  }
           
           }
  
  }

