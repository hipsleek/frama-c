
!!!Full processing file "examples/mutual-3.ss"
Parsing file "examples/mutual-3.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

Checking procedure g$int... 
Procedure g$int SUCCESS.

Checking procedure f$int... 
Procedure f$int SUCCESS.

Checking procedure g$int... 
Checking procedure f$int... 

*****************************
*** TERMINATION INFERENCE ***
*****************************
Temporal Assumptions:
 termAssume v_int_7_1248=1+x' & 0<x' & x'=x & !(v_bool_6_1144') & 0<x' & 
!(v_bool_6_1144') & v_int_7_1143'=v_int_7_1253+v_int_7_1252 & 
res=v_int_7_1143' & gpost_1122(x') & gpost_1122(v_int_7_1248) --> fpost_1136(x).

 termAssume x'<=0 & x'=x & v_bool_6_1144' & x'<=0 & v_bool_6_1144' & 
v_int_6_1138'=0 & res=v_int_6_1138' --> fpost_1136(x).

 termAssume v_int_16_1204+2=x' & 0<x' & x'=x & !(v_bool_15_1132') & 0<x' & 
!(v_bool_15_1132') & v_int_16_1191+1=x' & v_int_16_1131'=v_int_16_1209+
v_int_16_1208 & 
res=v_int_16_1131' & fpost_1136(v_int_16_1191) & fpost_1136(v_int_16_1204) --> gpost_1122(x).

 termAssume x'<=0 & x'=x & v_bool_15_1132' & x'<=0 & v_bool_15_1132' & 
v_int_15_1124'=0 & res=v_int_15_1124' --> gpost_1122(x).

 termAssume !(v_bool_6_1144') & 0<x' & !(v_bool_6_1144') & x'=x & 0<x' & 
v_int_7_1140'=1+x' & fpre_0(x) --> gpre_0(v_int_7_1140').

 termAssume 0<x' & x'=x & !(v_bool_6_1144') & 0<x' & 
!(v_bool_6_1144') & fpre_0(x) --> gpre_0(x').

 termAssume v_int_16_1191+1=x' & !(v_bool_15_1132') & 0<x' & 
!(v_bool_15_1132') & x'=x & 0<x' & v_int_16_1128'+
2=x' & gpre_0(x) --> fpre_0(v_int_16_1128').

 termAssume 0<x' & x'=x & !(v_bool_15_1132') & 0<x' & !(v_bool_15_1132') & 
v_int_16_1126'+1=x' & gpre_0(x) --> fpre_0(v_int_16_1126').


Base/Rec Case Splitting:
[	f: [[5] x<=0@B,[6] 1<=x@R]
,	g: [[7] x<=0@B,[8] 1<=x@R]
]
Termination Inference Result:
g:  case {
  x<=0 -> requires emp & Term[30,2]
 ensures emp & true; 
  2<=x -> requires emp & Loop[]
 ensures false & false; 
  x=1 -> requires emp & Term[30,3]
 ensures emp & true; 
  }
f:  case {
  x<=0 -> requires emp & Term[30,1]
 ensures emp & true; 
  1<=x -> requires emp & Loop[]
 ensures false & false; 
  }

0 false contexts at: ()
