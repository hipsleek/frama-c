
!!!Full processing file "examples/mult-2a.ss"
Parsing file "examples/mult-2a.ss" by default parser...

!!! processing primitives "["prelude.ss"]
Starting Omega...oc
Starting z3... 

Checking procedure f$int~int... 
Procedure f$int~int SUCCESS.

Checking procedure f$int~int... 

*****************************
*** TERMINATION INFERENCE ***
*****************************
Temporal Assumptions:
 termAssume v_int_13_1202=y'+x' & !(v_bool_12_1127') & !(v_bool_10_1128') & 
0<=x' & !(v_bool_10_1128') & x'=x & y'=y & 
0<=x' & fpost_1123(v_int_13_1202,y') --> fpost_1123(x,y).

 termAssume v_int_12_1201+y'=x' & v_bool_12_1127' & !(v_bool_10_1128') & 
0<=x' & !(v_bool_10_1128') & x'=x & y'=y & 
0<=x' & fpost_1123(v_int_12_1201,y') --> fpost_1123(x,y).

 termAssume x'<0 & y'=y & x'=x & v_bool_10_1128' & x'<0 & 
v_bool_10_1128' --> fpost_1123(x,y).

 termAssume 0<=x' & y'=y & x'=x & !(v_bool_10_1128') & 0<=x' & 
!(v_bool_10_1128') & !(v_bool_12_1127') & v_int_13_1126'=y'+
x' & fpre_0(x,y) --> fpre_0(v_int_13_1126',y').

 termAssume 0<=x' & y'=y & x'=x & !(v_bool_10_1128') & 0<=x' & 
!(v_bool_10_1128') & v_bool_12_1127' & v_int_12_1125'+
y'=x' & fpre_0(x,y) --> fpre_0(v_int_12_1125',y').


Base/Rec Case Splitting:
[	f: [[3] x<=(0-1)@B,[4] 0<=x@R,[5] 0<=x@R]
]
Termination Inference Result:
f:  case {
  x<=(0-1) -> requires emp & Term[31,1]
 ensures emp & true; 
  0<=x -> case {
           y=0 -> requires emp & Loop[]
 ensures false & false; 
           y<=(0-
           1) -> case {
                  y<=(0-1) & 
                  0<=x -> requires emp & MayLoop[]
 ensures emp & true; 
                  }
           
           1<=y -> case {
                    0<=x -> requires emp & MayLoop[]
 ensures emp & true; 
                    }
           
           }
  
  0<=x -> requires emp & MayLoop[]
 ensures emp & true; 
  }

0 false contexts at: ()
