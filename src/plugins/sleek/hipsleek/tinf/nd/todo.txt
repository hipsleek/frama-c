# cex-1a.ss

void g(int x) 
//infer [@term]  requires true ensures true;

Why did g has an empty spec?
need to use --infer "@term"
However, cex-1b.ss works nicely :)

f:  case {
  x<=(0-1) -> requires emp & Term[34,1]
     ensures emp & true; 
  0<=x -> requires emp & Loop{ 19:6}[]
     ensures false & false; 
  }

!!! Termination Inference is not performed due to empty set of relational assumptions.

Checking procedure g$int... 
Procedure g$int SUCCESS.

Termination Inference Result:
main:  requires emp & MayLoop[]
     ensures emp & true;

=======================================================
# cex-1d.ss

I think this is a good example, but we can
fix it later when we have time in a more general way?

void hhh(int x) 
  infer [@term]  requires true ensures true;
{
   if (x < 0) return;
   else if (x<7) /* changing to 6 is OK */
      hhh(x+1);
   else hhh(x);
}

I guess this is an imprecision of termination
inference which gave MayLoop instead of Loop for n<7.
For n<6, it gave correct Loop result.
I believe this aspect could be improved.

hhh:  case {
  x<=(0-1) -> requires emp & Term[38,1]
     ensures emp & true; 
  0<=x & x<=2 -> requires emp & MayLoop[]
     ensures emp & true; 
  3<=x -> requires emp & Loop{ 21:8}[]
     ensures false & false; 
  }


g:  requires emp & Term[34,1]
     ensures emp & x=res-1;

Termination Inference Result:
main:  requires emp & MayLoop[]
     ensures emp & true;
=======================================================
# cex-3.ss

with det:

Termination Inference Result:
f:  case {
  x<=(0-1) -> requires emp & Term[34,1]
     ensures emp & true; 
  0<=x -> requires emp & Loop{ 19:6}[]
     ensures false & false; 
  }

non-det if. Need to mark it as 
a possible MayLoop[ND] with a cex.

Termination Inference Result:
f:  case {
  x<=(0-1) -> requires emp & Term[34,1]
     ensures emp & true; 
  0<=x -> requires emp & MayLoop[]
     ensures emp & true; 
  }
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
=======================================================
