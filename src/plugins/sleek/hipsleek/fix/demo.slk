data node {
	int val; 
	node next;	
}.

pred ll<n> == self = null & n = 0 
	or self::node<_, q> * q::ll<n-1> 
  inv n >= 0.

checkentail x::ll<n> |- n>=-1.
print residue.

checkentail x::ll<n> |- n>=0.
print residue.

checkentail x::ll<n> & n>0 |- x!=null.
print residue.

checkentail x::ll<n> & n>0 |- x::node<_,q>.
print residue.

//(5)
checkentail x::ll<n> & n>=0 |- x::node<_,q>.
print residue.

checkentail x::ll<n> & x!=null |- n>0.

//(7)
checkentail x::node<_,null> |- x::ll<n>.
print residue.

checkentail x::node<_,q>*q::node<_,null> |- x::ll<n>.
print residue.

//(9)
checkentail x::node<_,q>*q::node<_,_> |- x::ll<n>.
print residue.

checkentail x::ll<n> |- x=null.
print residue.

checkentail x=null |- x::ll<n> .
print residue.

//(12)
infer[n] x::ll<n> |- x=null.
print residue.

//(13)
infer[x] x::ll<n> |- x=null.
print residue.

//(14)
infer[n] x::ll<n> |- x::node<_,q>*q::node<_,qq>.
print residue.

//(15)
infer[n] x::ll<n> |- x::node<_,q>*q::node<_,null>.
print residue.

//(16)
infer[x] x::ll<n> |- x::node<_,q>*q::node<_,null>.
print residue.

//(17)
infer[] x::node<_,_> |- x=null.
print residue.

//(18)
infer[] x::ll<n> |- x=null.
print residue.

//(19)
infer[] x::ll<n> & n>0 |- x=null.
print residue.

//(5)
checkentail x::node<_,q>*q::node<_,null> |- (exists n: x::ll<n>).
print residue.

checkentail x::node<_,q>*q::node<_,_> |- x::ll<n>.
print residue.

checkentail x::ll<n> |- x::node<_,null>.
print residue.

//(8)
infer [x] x::ll<n> |- x::node<_,null>.
print residue.

infer [x] x::ll<n> |- x::node<_,q>.
print residue.

infer [n] x::ll<n> |- x::node<_,q>*q::node<_,null>.
print residue.

relation P(int n).

infer [P] x::ll<n> & P(n) |- x::node<_,null>.
print residue.

infer [n] x::ll<n>  |- x::node<_,null>.
print residue.


// (1)
infer [y] true |- y::node<a,b>.
print residue.

// (2)
infer [y] true |- y::ll<n>.
print residue.

// (3)
infer [y] true |- y::node<a,b> * b::node<c,d>.
print residue.

// (4) 
infer [y] true |- y::node<a,b> * b::ll<m>.
print residue.

// (5)
infer [x] x=y  |- y::ll<n>.
print residue.

// (6)
infer [x] n=0 & x=y  |- y::ll<n>.
print residue.

// (7)
infer [x] true & x=y |- x::ll<n> .
print residue.

// (8)
infer [ia,ib] y::node<ia,ib> |- y::node<a,b>.
print residue.

// (9)
infer [y] true |- (exists a: y::node<a,null> & a>0).
print residue.

// (10)
infer [aa]  y::node<aa,null> |- (exists a: y::node<a,null> & a>0).
print residue.

// (11)
infer [m] y::ll<m> |- y::ll<n>.
print residue.

// (12)
infer [x] x=null |- x::node<_,null> .
print residue.

// (13)
infer [y] y=null |- y::node<a,b>.
print residue.

infer [P] 0<n & n<y+2   |- P(y).
print residue.

infer [P] y=2*n   |- P(y).
print residue.


