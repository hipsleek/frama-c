// (1) Change each of the MayLoop below to
//     either (i) Term[..] or (ii) Loop, so that 
//     termination or non-termination property for 
//     Ackermann function is completely proven.

int Ack(int m, int n) 
case {
  m<0 -> requires Loop 		       // Ans
         ensures true;
  m=0 -> requires Term		       // Ans
         ensures res=n+1;
  m>0 -> case 
          { 
	    n<0 -> requires Loop       // Ans 
                   ensures true;
            n>=0 -> requires Term[m,n] // Ans
                    ensures res>0;
          }  
}
{ 
	if (m==0) return n+1;
    	else if (n==0) return Ack(m-1,1);
  	else return Ack(m-1, Ack(m,n-1));
}

// (2) Change each of the MayLoop below to
//     either (i) Term[..] or (ii) Loop, so that 
//     termination or non-termination property for 
//     gcd function is completely proven.

int gcd(int m, int n)
case {
 m=n -> requires Term ensures res=m;		// Ans
 m!=n ->
  case {
    m <= 0 -> requires Loop ensures true;	// Ans
    m > 0 -> 
    case {
	  n <= 0 -> requires Loop ensures true; // Ans
	  n > 0 -> requires Term[n+m] ensures res>0; // Ans
	}
  }
}
{
   if (m == n) return m;
   else if (m > n) return gcd(m-n, n);
   else return gcd(m, n-m);
}
