data node {
  int val;
  node next;
}.

pred ll<n> == self=null & n=0
  or self::node<v,q>*q::ll<n-1>
  inv n>=0.

pred lsort<s,n> == self::node<s,null> & n=1
  or self::node<s,q>*q::lsort<s2,n-1> & s<=s2 
  inv n>=1.

lemma self::lsort<s,n> -> self::ll<n>.
// try --elp for enable lemma proving (via an automatic inductive proof)

// (1) what are s,n instantiated to?
// Ans : s=1 & n=2
checkentail x::node<1,q>*q::node<3,null> |- x::lsort<s,n>.
print residue.

// (2) why does this fail?
// Ans : linked list values not sorted
checkentail x::node<3,q>*q::node<1,null> |- x::lsort<s,n>.
print residue.

// (3) add smallest constraint to LHS for succeed & note the residue.
// Ans : 3<=m   with residue a=3 & b=n+1
checkentail x::node<3,q>*q::lsort<m,n> |- x::lsort<a,b>.
print residue.

// (4) will this succeed?
// Ans : no.
checkentail x::ll<n> |- x::lsort<a,b>.
print residue.

// (5) will this succeed? what if lemma is removed?
// Ans : yes with the help of lemma
// residue is b=n
checkentail x::lsort<a,n> |- x::ll<b>.
print residue.
