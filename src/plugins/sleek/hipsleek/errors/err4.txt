
JUST FOR SLEEK or Proving LEMMA
===============================

Special case to detect capture must __Error, 
especially for Lemma and sleek proving.

  D1 & flow norm |- D2 & flow norm * R
  is_must_error(R) --> R1 = update_flow(extract_must_error_state(R),norm)
             // succeeds when must fail found
  is_may_error(R)  --> R1 = R
  is_valid (R)  --> R1 = update_flow(extract_safe_state(R),__Error)
             // fails when validity detected
  -------------------------------------------
  D1 & flow norm |- D2 & flow __Error *  R1


Norming PROVING for HIP
========================

  D1 & norm  |- D2 & norm * R
  f1<:f2
  is_must_error(R) --> R1 = extract_safe_must_state(R)
  is_may_error(R) --> R1 = R
  is_valid (R)  --> R1 = update_flow(R, f1)
   ---------------------------------------------
  D1 & flow f1 |- D2 & flow f2 * R1

//__Sleek_Error == __Entailment_Error?? __Entailment_Error is one specific error (in literature, it is called logic error)
  __Sleek_Error <: __Error

   // Below do not occur for hip proving
   // should be detected as a must-failure.
   // in typestate system, it is called inconsistent error and should be a must-failure.
   not(f1<:f2)
  -------------------------------------------
  D1 & flow f1 |- D2 & flow f2 * (D1*flow f1)


   // Error flow persist
   // not normally required
   f1<:__Error
  -------------------------------------------
  D1 & flow f1 |- D2 & flow f2 * (D1*flow f1)

  //matching = fail & exist coercion which matches (H,D2) and (f2,f4): LEMMA B & flow f3 <- H flow f4
  // D1 & flow f1 |- H & flow f3 * (R)
 -------------------------------------------------
  D1 & flow f1 |- D2 & flow f2 * (R)

 //todo:
 // - unfold for lemma:  in the case right_coercion is fail and rhs is a view, try to unfold rhs and matching once
 //-provide __Sleek_Error, __NullPtr_Error, examples + implementation

 x::node<1,null> * D1 |- x::node<2,null> * D2 & flow __Error 
                    *  (D1 -> D2) & flow __Sleek_Error  (f=1 --> f=2)



  foo(x)
    require x::node<v,_> 
    ensures v;
    require x==null
    ensures true & flow __NullPtr_Error;
  {
    return x.next
  }


  x=null & norm |- (x::node<v,_> & norm) *  (true & flow __NullPtr_Error)
 

  int subs(Int[] x, int i)
  requires x::Arr<s> & 0<=i<s 
  ensures  x::Arr<s 
  requires x::Arr<s> & (i<0 | i>=s)
  ensures  x::Arr<s> & flow __Array_Bound_Err 



 x::node<_,_> * y::node<_,null>
  |- (x=null & flow = norm) * ( x!=null & y::node<_,null> & flow Sleek_Error)

   D1 |- D3
   D2 |- D4
 ------------------
 D1 * D2 |- D3 * D4



