// must bug via predicates?
data node { int val ; node next }.

pred pos_ll<n> == self = null & n = 0
	or self::node<d,r> * r::pos_ll<n - 1> & d>0
	inv n >= 0.

pred neg_ll<n> == self = null & n = 0
	or self::node<d,r> * r::neg_ll<n - 1> & d<0
	inv n >= 0.

lemma self::pos_ll<n> & n>0 -> self::neg_ll<n> & flow __Error.
lemma self::neg_ll<n>  & n>0 -> self::pos_ll<n> & flow __Error.


//1. Entail(1)=Valid.
checkentail x::pos_ll<n> & n<=0 |- x::neg_ll<n> .

//2. Entail(2)=Fail.(must)cause:213  x=null |-  x!=null (must-bug).
checkentail x::pos_ll<n> & n<=0 |- x::neg_ll<n> & x!=null.

//3. Entail(3)=Fail.(must) cause:213  m=0 |-  0<m (must-bug).
checkentail x::pos_ll<n> & n<=0 |- x::neg_ll<m> & m>0.

//4. Entail(4)=Fail.(must) cause:213  x!=null |-  x=null (must-bug).
checkentail x::pos_ll<n> & n>0 |- x=null.

//5. Entail(5)=Fail.(must) cause:213  n=m & 1<=m |-  m=0
checkentail x::pos_ll<n> & n>0 |- x::neg_ll<m> & m=0.

//6. Entail(6)=Valid.
checkentail x::pos_ll<n>  |- x::pos_ll<m> .

//7. Entail(8)=Fail.(must)
checkentail x::pos_ll<n> & n>0 |- x::neg_ll<n>.

//8. Entail(9)=Valid.
checkentail x::pos_ll<n> & n=0|- x::neg_ll<n>.

//9. Entail(10)=Fail.(must)  cause:1Expecting Failure but Success instead
checkentail x::pos_ll<m> & m> 0|- x::neg_ll<n> & n>0.

//10. Entail(11)=Fail.(must) cause:213  n=0 |-  0<n (must-bug).
checkentail x::pos_ll<m> & m=0 |- x::neg_ll<n> & n>0.

//11. VALID. duplicate with err4.E11
//checkentail x::pos_ll<n> & n>0|- x::neg_ll<n> & flow __Error.

/*

//1. Entail(2)=Fail.(must)
checkentail x::pos_ll<n> & n>0 |- x::neg_ll<n>.

//2. Entail(2)=Fail.(must)
checkentail x::pos_ll<n> & n>0 & m>0 |- x::neg_ll<n> & m=0.

*/
