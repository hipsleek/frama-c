data node { int val ; node next }.

pred ll<n> == self = null & n = 0
	or self::node<next = r> * r::ll<n - 1>
	inv n >= 0.

pred ll2<n> == case { self=null -> [] n=0;
           self!=null ->  [] self::node<_,r> * r::ll2<n-1>;}
	inv n >= 0.

pred ll3<n> == self::node<next = r> * r::ll2<n-1>
	inv n >= 1.

/*
C1:
   a1 |- b: must
   a2 |- b: may
*/
//checkentail n > 3 or n < 5 |- n <1.
//MAY ERROR:  (n > 3 |- n < 1: UNSAT) and  (n > 3 |- not(n <1): SAT)
checkentail x::ll<n> |-n>0.
/*
C2:
   a1 |- b: may
   a2 |- b: OK
*/
//checkentail n < 3 or n < 0 |- n <1.
//MAY ERROR:  (n < 3 |- n < 1: SAT) and  (n < 3 |- not(n <1): SAT)

/*
C3:
   a1 |- b: may
   a2 |- b: may
*/
//checkentail n < 3 or n < 5 |- n <1.
//MAY ERROR:  (n < 3 or n < 5|- n < 1: SAT) and  (n < 3 or n < 5|- not(n <1): SAT)

/*
C4:
   a1 |- b: must
   a2 |- b: must
*/
//checkentail n > 3 or n > 5 |- n <1.
//MUST ERROR:  (n > 3 or n > 5|- n < 1: UNSAT) and  (n > 3 or n > 5|- not(n <1): SAT)

/*
C5:
   a1 |- b: must
   a2 |- b: OK
*/
//checkentail n > 3 or n < 0 |- n <1.
//MUST ERROR:  (n > 3 or n < 0|- n < 1: SAT) and  (n > 3 or n < 5|- not(n <1): SAT) ???MUST or MAY
