(* auto-generated by gt *)

let print_help () =
  (* print_endline "./compile -sleek <file>.smt2" *)
  print_endline "./compile <file>.smt2"
;;

if (Array.length Sys.argv) >= 1
then
  (* let option = Sys.argv.(1) in *)
  (* if option = "-sleek" *)
  (* then *)
  (*   let in_file_name = Sys.argv.(2) in *)
  let in_file_name = Sys.argv.(1) in
    if ((String.length in_file_name) >= 5) &&
      (String.sub in_file_name ((String.length in_file_name) - 4) 4) = "smt2"
    then
      let out_file_name = in_file_name ^ ".slk" in
      let in_channel = open_in in_file_name in
      let lexbuf = Lexing.from_channel in_channel in
      let parsed  = Smtlib_parse.main Smtlib_lex.token lexbuf in
      match parsed with
        | None ->
              print_help ()
        | Some(x) ->
              let s = Smtlib_translate.trans x in
              let out_channel = open_out out_file_name in
              let _ = Printf.fprintf out_channel "%s" s in
              let _ = close_in in_channel in
              let _ = close_out out_channel in
              ()
    else
      print_help ()
  (* else *)
  (*   print_help () *)
else
  print_help ()

(* let parsed := *)
(*   if (Array.length Sys.argv) > 1 *)
(*   then *)
(*     let option = Sys.argv.(1) in *)
(*     if option = "-sleek" *)
(*     then *)
(*       let input_file_name = Sys.argv.(2) in *)
(*       if ((String.length input_file_name) >= 5) && *)
(*         (String.sub input_file_name ((String.length input_file_name) - 4) 4) = "smt2" *)
(*       then *)
(*         let _ (\* output_file_name *\) = input_file_name ^ ".sle" in *)
(*         (\* let _ = print_endline input_file_name in *\) *)
(*         let in_channel = open_in input_file_name in *)
(*         let lexbuf = Lexing.from_channel in_channel in *)
(*         Smtlib_parse.main Smtlib_lex.token lexbuf *)
(*       else *)
(*         None *)
(*     else *)
(*       None *)
(*   else *)
(*     None *)
(* in *)
(* match parsed with *)
(*   | None -> *)
(*         print_endline "./compile -sleek <file>.smt2" *)
(*   | Some(x) -> *)
(*         let _ = Smtlib_translate.trans x in *)
(*         () *)
(* ;; *)

(* print_string "\n";; *)
