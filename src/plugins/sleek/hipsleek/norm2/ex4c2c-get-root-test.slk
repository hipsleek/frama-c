data cell {
  int val;
}.

HeapPred HP(cell a,cell b).
//relation HP(cell a,cell b).
//infer[] a=null  |- HP(a,b).
//expect Fail.

infer[HP] a=null  |- HP(a,b).
print residue.
expect Valid.

/*

# norm/ex4c2c.slk

 infer[HP] b::cell<_>  |- HP(a,b).

# need to convert Rel--> HRel

Entail (1) : Valid. 
Residue:
 <1>emp&a=null&{FLOW,(20,21)=__norm#E}[]
 inferred rel: [RELDEFN HP: ( a=null) -->  HP(a,b)]
[[ UnmatchedRHSData]]



!!! **smtsolver.ml#412:rname1:HP
!!! **smtsolver.ml#413:rargs:[a,b]
push_list(global_rel_defs):**smtsolver.ml#419:1[HP[a,b]]

!!! **smtsolver.ml#393:rname1:_pure_of_HP
!!! **smtsolver.ml#394:rargs:[a,b]
!!! **smtsolver.ml#414:rname1:HP
!!! **smtsolver.ml#415:rargs:[a,b]
!!! **context.ml#608:lhs_h: emp
*XXcprog** get_hp_root HP gives 0
[(HP,Some(0))]

!!! **context.ml#627:lhs_p: a=null
!!! **context.ml#628:args:[a,b]
!!! **context.ml#629:hp:HP
!!! **context.ml#630:rhs_node: HP(a,b)
!!! **context.ml#631:root:a
!!! **solver.ml#13660:lhs contra?:None
!!! **solver.ml#13787:TODO: schedule infer_empty_hp_rel?


(==infer.ml#1755==)
infer_pure_m_2#1@2@1
infer_pure_m_2#1 inp1 :estate :
(  emp&a=null&{FLOW,(20,21)=__norm#E}[]
 es_gen_impl_vars(E): []
 es_trace:  UnmatchedRHSData
 es_infer_vars_hp_rel: [HP],[])
infer_pure_m_2#1 inp2 :lhs xpure : a=null
infer_pure_m_2#1 inp3 :lhs xpure0 : a=null
infer_pure_m_2#1 inp4 :rhs xpure : HP(a,b)
infer_pure_m_2#1@2 EXIT:(new es,inf pure,rel_ass) :(None,None,[])


(==cvutil.ml#1359==)
infer_collect_rel@1
infer_collect_rel inp1 :  emp&a=null&{FLOW,(20,21)=__norm#E}[]
 es_gen_impl_vars(E): []
 
 es_infer_vars_rel: [HP]
infer_collect_rel inp2 :[HP]
infer_collect_rel inp3 :lhs_heap: true
infer_collect_rel inp4 :lhs: a=null
infer_collect_rel inp5 :rhs: HP(a,b)
infer_collect_rel@1 EXIT:( a=null,2: true,3:[RELDEFN HP: ( a=null) -->  HP(a,b)],4:None,5:[])

*/
