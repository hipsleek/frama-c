data node {
  node next;
}.

pred ls<p,n> == self=p & n=0
  or self::node<q>*q::ls<p,n-1> //& n>0 //n!=0
  inv n>=0.

/*
# ls-case-bug-1b.slk -debug case.log

 managed to capture :

@1! f_list:[ p=self & n=0, self!=null & 1<=n]

However splitter did not form case. Expecting:

  case { 
     n=0 -> ..
     n!=0 -> ..
  }

splitter@2 EXIT:[ :
EBase {1}->emp&p=self & n=0&{FLOW,(1,24)=__flow}[]
  || :EBase exists (Expl)[](Impl)[q](ex)[]{2}->(exists p_14,
          flted_7_13: self::node<q>@M * q::ls<p_14,flted_7_13>@M&
          n=flted_7_13+1 & p=p_14&{FLOW,(1,24)=__flow})[]]


formula_case_inference@1
formula_case_inference inp1 : :EBase {1}->emp&p=self & n=0&{FLOW,(1,24)=__flow}[]
|| :EBase exists (Expl)[](Impl)[q](ex)[]{2}->(exists p_14,
          flted_7_13: self::node<q>@M * q::ls<p_14,flted_7_13>@M&
          n=flted_7_13+1 & p=p_14&{FLOW,(1,24)=__flow})[]
formula_case_inference inp2 :[self,p,n]
formula_case_inference@1 EXIT: :EBase {1}->emp&p=self & n=0&{FLOW,(1,24)=__flow}[]
|| :EBase exists (Expl)[](Impl)[q](ex)[](exists p_14,
          flted_7_13: self::node<q>@M * q::ls<p_14,flted_7_13>@M&
          n=flted_7_13+1 & p=p_14&{FLOW,(1,24)=__flow})[]

*/

