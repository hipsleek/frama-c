//Valid.Fail.Fail.Valid.Fail.Fail.
data node { int val ; node next }.

pred lseg<n, p> == case {
     n=0 -> [] self = p & n = 0;
     n!=0 ->  [] self::node<next = r> * r::lseg<n - 1, p>; 
     }
     inv n >= 0.


lemma "V1" self::lseg<n, p> & n = a + b & a,b >=0 ->  self::lseg<a, r> * r::lseg<b, p>.

lemma "V2" self::lseg<n, p> &  n = a + b & a,b >=0 <- self::lseg<a, r> * r::lseg<b, p>.

lemma "V3" self::lseg<n, p> &  n = a + b & a,b >=0 <-> self::lseg<a, r> * r::lseg<b, p>.

lemma "V4" self::lseg<a, r> * r::lseg<b, p> & n = a + b & a,b >=0 -> self::lseg<n, p>.

lemma "V5" self::lseg<a, r> * r::lseg<b, p> & n = a + b & a,b >=0 <- self::lseg<n, p>.

lemma "V6" self::lseg<a, r> * r::lseg<b, p> & n = a + b & a,b >=0 <-> self::lseg<n, p>.