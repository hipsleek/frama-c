//Valid.Valid.Valid.Valid
data node { int val ; node next }.

pred lseg<n, p> == 
  case {
    n=0 -> [] self = p & n = 0;
    n!=0 -> [] self::node<next = r> * r::lseg<n - 1, p>;
  }  inv n >= 0.


//lemma_safe "V22" self::lseg<a, r> * r::lseg<b, p>  
//     -> self::lseg<n, p> & n = a + b & a,b >=0.

//lemma_safe "V21" self::lseg<n, p> & n = a + b & a,b >=0 
//     <- self::lseg<a, r> * r::lseg<b, p>.

lemma_safe "V21a" 
  self::lseg<a, r> * r::lseg<b, p>  
  -> (exists n: self::lseg<n, p> & a,b >=0  & n = a + b)
.

/*
# ex12e.slk --assert-no-glob-vars

Fail to prove lemma:

lemma_safe "V21a" 
  self::lseg<a, r> * r::lseg<b, p>  & a,b >=0
  -> self::lseg<n, p> & n = a + b 
.


*/