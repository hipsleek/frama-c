data node {
	int val; 
	node next;	
}.


/* view for a singly linked list */

pred ll<> == self = null
	or self::node<_, q> * q::ll<> 
  inv true.

pred lseg<p> == self = p
	or self::node<_, q> * q::lseg<p> 
  inv true.

  pred PP<p> == self::node<_,p>
	or self::node<_, q> * q::PP<p> & q!=null 
  inv true.

HeapPred P(node x, node y).
HeapPred U(node x, node y).


lemma_infer [U,classic] self::PP<y> <- U(self,q)*q::node<_,y>.
print residue.



/*
# ex21e1.ss

lemma_infer [U,classic] self::PP<y> <- U(self,q)*q::node<_,y>.



 <1>emp&{FLOW,(20,21)=__norm#E}[]
 inferred hprel: [
 U(self_lem_17,q_125)&true |#| q_125::node<Anon_126,y>@M&
         true --> emp&self_lem_17=q_125]
[[ SEARCH ==>  BaseCaseUnfold ==>  Match(q_125,self_lem_17)]]

<2>emp&{FLOW,(20,21)=__norm#E}[]
inferred hprel: [
  HP_152(q_113,q_138@NI,self_lem_17@NI)&true --> emp&
                  q_113!=null; 

  HP_152(q_113,q_138@NI,self_lem_17@NI)&
                  true --> U(q_113,q_138)&true; 

  U(self_lem_17,q_138)&true |#| q_138::node<Anon_139,y>@M&
       true --> self_lem_17::node<Anon_150,q_151>@M * 
               HP_152(q_151,q_138@NI,self_lem_17@NI) &  true]

============================================================

// merge
P(x,y) <-- x::node<Anon_1630,q_1631>@M * P(q_1631,y) & q_1631!=null 
        \/ x::node<Anon_1630,y>@M

P(x,y) <-- x::node<_,q>@M * U(q,y)

P(x,y) <-- U<_,q>*q::node<_,y>

P(x,y) --> x::lseg<q> & x!=null

*/
