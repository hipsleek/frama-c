data node {
	int val; 
	node next;	
}.


/* view for a singly linked list */

pred ll<> == self = null
	or self::node<_, q> * q::ll<> 
  inv true.

pred lseg<p> == self = p
	or self::node<_, q> * q::lseg<p> 
  inv true.

  pred PP<p> == self::node<_,p>
	or self::node<_, q> * q::PP<p> & q!=null 
  inv true.

HeapPred P(node x, node y).
HeapPred U(node x, node y).

relation R(node x, node y).


//lemma_safe self::PP<y> -> self::lseg<y> & self!=null.
lemma_infer[R,@classic] self::PP<y> -> self::lseg<y> & R(self,y).
print residue.


/*
# ex21e3.ss

lemma_infer[R,@classic] self::PP<y> -> self::lseg<y> & R(self,y).

 inferred rel: [RELDEFN R: ( self_lem_16!=null) -->  R(self_lem_16,y); 
                RELDEFN R: ( q_130!=null & self_lem_16!=null & R(q_130,y)) -->  R(self_lem_16,y)]


 ==========================================================

// merge
P(x,y) <-- x::node<Anon_1630,q_1631>@M * P(q_1631,y) & q_1631!=null 
        \/ x::node<Anon_1630,y>@M

P(x,y) <-- x::node<_,q>@M * U(q,y)

P(x,y) <-- U<_,q>*q::node<_,y>

P(x,y) --> x::lseg<q> & x!=null

*/
