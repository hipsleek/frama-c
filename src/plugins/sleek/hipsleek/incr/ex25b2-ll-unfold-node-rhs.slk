data node {
  int val;
  node next;
}.

pred ll<> == self=null
 or self::node<_,q>*q::ll<> .

HeapPred U1(node x).
HeapPred R1(node x).
HeapPred U2(node x,node y).

infer [U1,@classic] U1(x) |- x::node<_,q>*q::ll<>.

//infer [U2,@classic] U2(q2,x) |- q2::ll<>.

//infer [U1,@classic] U1(x) |- x=null.
print residue.

/*
# ex25b2.slk 

infer [U1,@classic] U1(x) |- x::node<_,q>*q::ll<>.

# Below seems OK now. Added an InferUnfold which is being 
  implemented by InferHeap.

Residue:

 <1>emp&{FLOW,(20,21)=__norm#E}[]
 inferred hprel: [HP_35(q)&true |#|3  --> q::ll<>@M&true; 
                  U1(x)&true |#|3  --> x::node<Anon_33,q_34>@M * HP_35(q_34)&
                   true]
[[ InferUnfold  ==>  InferHeap]]

=================================================

this seems unsound. In particulare, q::ll<> on RHS 
  is lost. Why? Also, there is no unfold scheduled?

<1>emp&{FLOW,(20,21)=__norm#E}[]
 inferred hprel: [HP_35(q_34)&q=q_34 |#|3  --> emp&true; 
                  U1(x)&true |#|3  --> x::node<Anon_33,q_34>@M * HP_35(q_34)&
                   true]
[[ InferHeap]]

# This example is supposed to schedule an M_unfold
  However, I have now scheduled an InferHeap since it also
  captures the effect of unfolding and folding.

  Can we split M_infer_heap to capture folding and
  unfolding separately?

Entail (1) : Valid. 
Residue:
 <1>emp&{FLOW,(20,21)=__norm#E}[]
 inferred hprel: [HP_35(q_34)&true |#|3  --> emp&true; 
                  U1(x)&true |#|3  --> x::node<Anon_33,q_34>@M * HP_35(q_34)&
                   true]
[[ InferHeap]]

-------------------------------

!!! **context.ml#2472:process_matches (steps) :
 ### LHS : U1(x)
 ### RHS : x::node<Anon_13,q>@M
 ### matches :
[ Type: Root
 LHS: U1(x)
 RHS: x::node<Anon_13,q>@M
 lhs_rest: emp
 rhs_rest: q::ll<>@M]

!!! **context.ml#2843:compute_action (steps) :
 ### RHS Cand :[ x::node<Anon_13,q>@M, q::ll<>@M]
 ### action :
 SEARCH =>[
  Prio:2
  Unfold 1 =>
    LHS: U1(x)
    RHS: x::node<Anon_13,q>@M;
  Prio:2
  InferHeap => ( x::node<Anon_13,q>@M, emp)
   



*/
