/* singly linked lists */

/* representation of a node */

data node {
	int val; 
	node next;	
}.


pred app3<> == self::node<_,null> 
	or self::node<_, q> * q::app3<> & q!=null 
  inv self!=null.

HeapPred U(node x).
HeapPred U1(node x).
HeapPred U2(node x,node@NI y).
HeapPred U3(node x,node y).

lemma_unsafe 
  self::app3<> -> self::node<_,q>*U(q).


/*
infer [U,@classic]
self_lem_19::node<Anon_136,q_137>@M * q_137::app3<>@M&q_137!=null
 |-  self_lem_19::node<Anon_18,q>@M * U(q).

 <1>emp&Anon_136=Anon_18 & q_137=q & q!=null&{FLOW,(20,21)=__norm#E}[]
 inferred hprel: [U(q)&q!=null --> GP_163(q,q@NI)&true; 
                  q::node<Anon_136,q>@M * GP_163(q,q@NI)&q!=null --> U(q)&
                   true]
[[ Match(self_lem_19,self_lem_19) ==>  COND ==>  (Lemma ==> lem_191 :(q_137,q)) ==> (left: lem_19) ==>  Match(q_137,q) ==>  InferUnfold ]]

*/

infer [U,@classic]
self_lem_19::node<Anon_136,q_137>@M * q_137::app3<>@M&q_137!=null
 |-  (exists Anon_18,q: self_lem_19::node<Anon_18,q>@M * U(q)).

print residue.

/*
# ex21d1b1.slk

(==context.ml#2841==)
process_one_match@3
process_one_match inp1 :match_res: Type: MaterializedArg (q_137,full,[]) coerc_defn_mater: ==> lem_15
 LHS: q_137::app3<>@M
 RHS: U(q_137)
 lhs_rest: emp
 rhs_rest: emp
 rhs_inst: []
process_one_match inp2 :lhs_h: q_137::app3<>@M
process_one_match inp3 :lhs_p: q_137!=null
process_one_match inp4 :rhs_node: U(q_137)
process_one_match inp5 :rhs_rest: emp
process_one_match inp6 :rhs_p: true
process_one_match inp7 :([],None)
process_one_match@3 EXIT: Prio:1
 (Lemma 1==> lem_15) =>

=====================================

 q_137::app3<>@M ->  q_137::node<Anon_80,q_81>@M * U(q_81)
 U(q_137) <- q_137::node<Anon_14,q>@M * GP_76(q,q_137)

================================

(==context.ml#2839==)
process_one_match@4
process_one_match inp1 :match_res:
 Type: Root
 LHS: q_137::node<Anon_80,q_81>@M
 RHS: q_137::node<Anon_14,q>@M
 lhs_rest: U(q_81)
 rhs_rest: GP_76(q,q_137)
 rhs_inst: []
process_one_match inp2 :lhs_h: q_137::node<Anon_80,q_81>@M * U(q_81)
process_one_match inp3 :lhs_p: q_137!=null
process_one_match inp4 :rhs_node: q_137::node<Anon_14,q>@M
process_one_match inp5 :rhs_rest: GP_76(q,q_137)
process_one_match inp6 :rhs_p: true
process_one_match inp7 :([],None)
process_one_match@4 EXIT: Prio:1
 Match =>


===================

infer [U,@classic]
self_lem_19::node<Anon_136,q_137>@M * q_137::app3<>@M&q_137!=null
 |-  (exists Anon_18,q: self_lem_19::node<Anon_18,q>@M * U(q)).


 <1>emp&q_137!=null&{FLOW,(20,21)=__norm#E}[]
 inferred hprel: [q_137::app3<>@M&q_137!=null --> U(q_137)&true; 
                  q_137::node<Anon_14,q>@M * GP_76(q,q_137@NI)&
                   q_137!=null --> U(q_137)&true]
[[ Match(self_lem_19,self_lem_19) ==>  COND ==>  InferFold 0 ==>  COND ==>  Match(q_137,q_137)]]



# Why is there a (exists q: ..)?


id: 7; caller: []; line: 0; classic: true; kind: Verify_Lemma; hec_num: 1; evars: []; impl_vars: [q]; infer_vars: [ U]; c_heap: emp; others:  es_infer_obj: [] globals: [@leak]
 checkentail (exists Anon_136,
q_137: self_lem_19::node<Anon_136,q_137>@M * q_137::app3<>@M&q_137!=null&
{FLOW,(20,21)=__norm#E}[])
 |-  (exists Anon_18,q: self_lem_19::node<Anon_18,q>@M * U(q)&
{FLOW,(20,21)=__norm#E}[]). 
hprel_ass: [ q_147::app3<>@M&q_147!=null |#|  --> U(q_147),
 q_147::node<Anon_18,q>@M * GP_152(q,q_147)&q_147!=null |#|  --> U(q_147)]
ho_vars: nothing?
res:  1[
    emp&q_147!=null&{FLOW,(20,21)=__norm#E}[]
   es_evars: [Anon_148; q_149]
   es_gen_impl_vars(E): [q]
   ]


*/
