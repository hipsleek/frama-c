
data node {
	int val;
	node next;
}.


pred lseg<p> == self = p
	or self::node<_, q> * q::lseg<p>
  inv true.

pred sll<> == self = null 
	or self::node<_, q> * q::sll<>
  inv true.


HeapPred H(node a).
HeapPred H2(node a, node b).
//lemma_infer_pred [H] self::lseg<q> * H(q) -> self::sll<>.
// fail due to complex lemma
//lemma_infer_pred [H]  self::sll<> <- self::lseg<q> * H(q).
// Valid

//lemma_infer_pred [H]  self::sll<> -> self::lseg<qqq> * H(qqq).
lemma_unsafe  self::sll<> -> self::lseg<qqq> * H(qqq).


infer [H2,@classic]  H2(x,y) & y=null |- H2(y,x).
print residue.
/*
# ex17h4b.slk

infer [H2,@classic]  H2(x,y) & y=null |- H2(y,x).

# GOT
inferred hprel: [emp&y=null |#|3  --> H2(y,x)&true; 
                  H2(x,y)&y=null |#|3  --> emp&true]

# Avoid split, better use:
     H2(x,y) & y=null --> H2(y,x)


*/

