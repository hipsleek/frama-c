data node {
	int val; 
	node next;	
}.


/* view for a singly linked list */

pred ll<> == self = null
	or self::node<_, q> * q::ll<> 
  inv true.

pred lseg<p> == self = p
	or self::node<_, q> * q::lseg<p> 
  inv true.

pred PP<y> == self::node<_,null>
	or self::node<_, q> * q::PP<y> & q!=null 
inv true.

pred PP0<> == self::node<_,null>
	or self::node<_, q> * q::PP0<> & q!=null 
inv true.

/*
pred PP2<> == 
       [] self::node<_,q> then
          case {q=null -> [];
              q!=null -> [] q::PP2<>;
           } 
inv self!=null.
*/
HeapPred P(node x, node y).
HeapPred U(node x, node y).

lemma_unsafe "L6" self::PP0<> <- self::ll<> & self!=null.
// can we unfold again if there is a false?

infer [@classic]  self::ll<> & self!=null & self=null 
   |-  self::PP0<>.
//fail

infer [@classic]  self::node<_, q> * q::ll<> & self!=null
  |-  self::PP0<>.


infer [@classic]  self::node<_, q> & q=null & self!=null
  |-  self::PP0<>.

infer [@classic]  self::node<_, q> * q::node<_,q2> * q2::ll<> & self!=null
  |-  self::PP0<>.

infer [@classic]   q::ll<> & self!=null
  |-  case {
        q=null -> [] emp;
        q!=null -> [] q::PP0<>;
     }.


// fail

/*
# ex21a2b.ss

lemma_test "L6" self::PP0<> <- self::ll<> & self!=null.

# unfolding on the LHS do not seem sufficient. Perhaps, we need
  case spec on the RHS for more complete proving, as follows:

infer [@classic]   q::ll<> & self!=null
  |-  case {
        q=null -> [] emp;
        q!=null -> [] q::PP0<>;
     }.


*/
