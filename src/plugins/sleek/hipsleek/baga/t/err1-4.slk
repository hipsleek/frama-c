
data node { int val ; node next }.

pred ll<n> == self = null & n = 0
	or self::node<next = r> * r::ll<n - 1>
	inv n >= 0.


//1
checkentail true |- x::ll<n>.

expect Fail_Must.

//2
checkentail x::node<_,q> |- x::ll<n>.

expect Fail_Must.

//3. must failure. cause:22  x!=null |-  x=null (must-bug).
checkentail x::ll<n> & n>0 |- x=null.
print residue.

expect Fail_Must.

//4. must failure. cause:or[base case unfold failed,22  m=0 & n=0 & x=null | n=m & x!=null & 1<=m |-  3<m (may-bug).]
checkentail x::ll<n> |- x::ll<m> & m>3.
print residue.

expect Fail_Must.

//5. must failure - cause:or[base case unfold failed,22  m=1 |-  3<m (must-bug).]
checkentail x::ll<n> & n=1 |- x::ll<m> & m>3.
print residue.

expect Fail_Must.


//6. must failure - cause:or[base case unfold failed,22  n=m & 2<=m |-  m<2 (must-bug).]
checkentail x::ll<n> & n > 1 |- x::ll<m> & m < 2.
print residue.

expect Fail_Must.


