data node {
  node next;
}.


pred l3<> == 
  self::node<q>*q::node<_> 
inv self!=null.



pred l4<q:node> == 
  (exists z: self::node<r>*r::node<_> & r=z & z=q)
inv self!=null.
// baga {self,q}



pred l5<k> == 
  self::node<q>*q::node<_> & k=q & self!=q
inv self!=null.


pred l6<q:node> == 
  q::node<_> & self=null
  or self::node<r>*r::node<_> & r=q
inv q!=null.
// baga {q}


pred l7<q:node> == 
  self=null & q=null
  or self::node<r>*r::node<_> & r=q
inv true.



//(4) valid
checkentail x::l3<> * x::l3<> |- false.
expect Valid.


// (6) valid
checkentail x::l4<c> * c::node<_> |- false.
expect Valid.

// (7) valid
checkentail x::l5<c> * c::node<_> |- false.
expect Valid.



// --eps
// (14) Valid
checkentail x::l7<q> * x::l7<q> & x!=null |- false.
expect Valid.


// --eps
// (15) Valid
checkentail x::l7<q> * y::l7<q> & x!=null & y!=null |- false.
expect Valid.

