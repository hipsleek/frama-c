data node {
   node nxt;
}.

pred elseg<p> == self=p
  or (exists a,b: self::node<a> * a::node<b> * b::elseg<p>)
 inv true.

//lemma_safe self::elseg<p> <- (exists u: self::elseg<u>*u::elseg<p>).

//lemma_safe self::elseg<p> -> (exists u: self::elseg<u>*u::elseg<p>).

checkentail_exact x::node<a>* a::node<b>*b::elseg<p> |- x::elseg<p>.
expect Valid.
//print residue.

//(2)
checkentail_exact x::node<a>* a::node<p> |- x::elseg<p>.
expect Valid.
//print residue.

checkentail_exact x::node<a>* a::elseg<p> |- x::elseg<p>.
expect Fail.
//print residue.

//(4)
checkentail_exact x::node<a>* a::node<b>*b::node<p> |- x::elseg<p>.
expect Fail.
print residue.

checkentail_exact x::elseg<q>*q::node<q2>*q2::node<p> |- x::elseg<p>.
expect Valid.
//print residue.
