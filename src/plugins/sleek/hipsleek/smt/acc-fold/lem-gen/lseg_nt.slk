data node {
   node nxt;
}.

pred lseg<p> == self=p
  or (exists a: self::node<a> * a::lseg<p> & self!=p)
 inv true.


lemma_safe self::lseg<p> <- (exists u: self::lseg<u>*u::lseg<p> * p::node<_>@L).

lemma_safe self::lseg<p> -> (exists u: self::lseg<u>*u::lseg<p>).

lemma_unsafe self::lseg<p> & self!=p 
        -> (exists u: self::lseg<u>*u::node<p>).
// cannot be proven?

lemma_safe self::lseg<p> 
        <- (exists u: self::lseg<u>*u::node<p> & self!=p).
// cannot be proven?

checkentail_exact x::lseg<u> * u::node<p> |- x::lseg<p>.
expect Fail.

checkentail_exact x::lseg<u> * u::node<p>*p::node<q> |- x::lseg<p> * p::node<q>.
expect Valid.


checkentail_exact x::lseg<u> * u::lseg<p> |- x::lseg<p>.
expect Valid.

checkentail_exact x::lseg<u> * u::node<u2>*u2::lseg<p> |- x::lseg<p>.
expect Valid.


