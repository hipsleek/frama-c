data node {
   node nxt;
}.

pred elseg<p> == self=p
  or (exists a,b: self::node<a> * a::node<b> * b::elseg<p>)
 inv true.

checkentail_exact x::node<a>*a::elseg<p> |- x::elseg<p>.
/*
why is there an Or and not union in residue

Entail 1: Fail.(may) cause:OrR[Cannot infer heap and pure 2,valid]
*/

checkentail_exact x::node<a>*a::elseg<p> |- x=p
    or (exists a,b: x::node<a> * a::node<b> * b::elseg<p>).
/*
Entail 2: Fail.(must) cause:UnionR[residue is forbidden.(2),residue is forbidden.(2)]
*/

/* lemma_safe self::elseg<p> <-> (exists u: self::elseg<u> * u::elseg<p>).

checkentail_exact x::node<a>*a::elseg<p> |- x::elseg<p>.



// below is valid
checkentail_exact x::node<a>*a::node<b>*b::elseg<p> |- x::elseg<p>.
*/

