
data Sll_t {
  Sll_t f;
}.

pred ls<out> ==
 self = out
or (exists u: self::Sll_t<f = u> * u::ls<out>).

//lemma_unsafe "ls1" self::ls<a> <-> self::ls<b> * b::ls<a>.

/*
ent1 is split to ent1a and ent1b
ent1b needs lemma ls1 to be inferred for succ but
ent1a runs very slow when the lemma exists.

HOW to balance?
*/

/*
//1 bolognesa-10-e01.slk unsat
checkentail x2::ls<x7> * x6::Sll_t<f = x1> * x4::Sll_t<f = x9> * x3::Sll_t<f = x2> * x8::Sll_t<f = x4> * x10::ls<x2> * x5::Sll_t<f = x7> * x1::Sll_t<f = x6> * x9::Sll_t<f = x1> * x7::ls<x2> * x_emp::Sll_t<f = y_emp> * z_emp::Sll_t<f = t_emp> & null = null
         |- x6::ls<x1> * x10::ls<x2> * x8::ls<x4> * x3::ls<x2> * x5::ls<x7> * x4::ls<x6> * x2::ls<x7> * x7::ls<x2> * x_emp::Sll_t<f = y_emp> * z_emp::Sll_t<f = t_emp>.

expect Valid.
*/

//1a
checkentail x2::ls<x7> * x3::ls<x2> * x10::ls<x2> * x5::ls<x7> * x7::ls<x2>&
      x_emp!=null & z_emp!=null &
       x3!=x2 & x5!=x7 & x3!=x2 & x5!=x7
 |-  x10::ls<x2> * x3::ls<x2> * x5::ls<x7> * x2::ls<x7> * x7::ls<x2>&x3!=x2 & x5!=x7.


//1b. need lemma ls1
//1 bolognesa-10-e01a.slk unsat
checkentail  x6::ls<x1> * x4::ls<x9> * x8::ls<x4> * x1::ls<x6> * 
x9::ls<x1> & x6!=x1 & x4!=x9 & x8!=x4 & x1!=x6 & x9!=x1
       |-  x6::ls<x1> * x8::ls<x4> * 
       x4::ls<x6>&x6!=x1 & x8!=x4.

expect Valid.

