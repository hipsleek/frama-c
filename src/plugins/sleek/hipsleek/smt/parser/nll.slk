data pto1{
     pto1 next1;
}.

data pto2{
     pto2 next2;
     pto1 down;
}.

pred lso<out> == self=out
  or (exists u: self::pto1<u> * u::lso<out>).

pred nll<out, boundary> == self=out
     or (exists u, Z1: self::pto2<u, Z1> * Z1::lso<boundary> * u::nll<out,boundary>).

/*
x1 |->
 x1_1 |-> x1_2 |-> x1_3 |-> nil_lvl1
 x2 |-> x2_2 |-> nil_lvl1
*/

//exp: unsat ==> VALID
checkentail x1::pto2<x2,x1_1> * x1_1::pto1<x1_2> * x1_2::pto1<x1_3> * x1_3::pto1<nil_lvl1> * x2::pto2<nil_lvl2,x2_1> * x2_1::pto1<x2_2> * x2_2::pto1<nil_lvl1> |-
            x1::nll<nil_lvl2,nil_lvl1>.