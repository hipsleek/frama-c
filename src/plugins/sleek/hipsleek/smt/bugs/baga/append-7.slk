
data node {
  node next;
}.

pred lseg<p:node> ==
 self = p
or (exists p_21,q_20: self::node<next = q_20> * q_20::lseg<p_21> & p_21 = p).

//!!! baga inv(lseg):[(BAGA:[],EQ:[[p,self]],INEQ:[]),(BAGA:[self],EQ:[],INEQ:[])]

pred ll<> ==
 self = null
or (exists q_22: self::node<next = q_22> * q_22::ll<>).

//!!! baga inv(ll):[(BAGA:[],EQ:[[_null,self]],INEQ:[]),(BAGA:[self],EQ:[],INEQ:[])]

pred clist<> ==
(exists self_19,p_18: self::node<next = p_18> * p_18::lseg<self_19> & self_19 = self).
//!!! baga inv(clist):[(BAGA:[self],EQ:[],INEQ:[])]

pred ll_e1<> ==
(exists q: self::node<next = q> * q::ll<>).

pred ll_e2<> ==
(exists p,q: self::node<next = p> * q::ll<> & p = q).

/*
!!! baga inv(ll_e1):[(BAGA:[self],EQ:[],INEQ:[])]
!!! baga inv(ll_e2):[(BAGA:[self],EQ:[],INEQ:[])]
*/


pred node_e1<q:node> ==
(exists p: self::node<next = p> & p = q).

pred lseg_e1<p:node> ==
(exists q: self::lseg<p> & p = q).

/*
!!! baga inv(lseg_e1):[(BAGA:[],EQ:[[p,self]],INEQ:[]),(BAGA:[self],EQ:[],INEQ:[])]
!!! baga inv(node_e1):[(BAGA:[self],EQ:[],INEQ:[])]
*/

checkentail_exact q::ll<> * xprm::node<next = q> & q = null & xprm = x & yprm = y & x != null
         |- xprm::node_e1<q> & q = null & xprm = x & yprm = y & x != null.

expect Valid.

/*
Entail 1: Fail.(must) cause: q::ll<>&q=Cnull & xprm=x & yprm=y & x!=Cnull&{FLOW,(21,22)=__norm}[]: residue is forbidden.(2)

*/