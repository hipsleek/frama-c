(push); SLICING
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const k Int)
(declare-const x1 Int)
(declare-const y1 Int)
(declare-const z1 Int)
(declare-const k1 Int)
(declare-const x2 Int)
(declare-const y2 Int)
(declare-const z2 Int)
(declare-const k2 Int)
(declare-const x3 Int)
(declare-const y3 Int)
(declare-const z3 Int)
(declare-const k3 Int)
(declare-const x4 Int)
(declare-const y4 Int)
(declare-const z4 Int)
(declare-const k4 Int)
(declare-const x5 Int)
(declare-const y5 Int)
(declare-const z5 Int)
(declare-const k5 Int)
(declare-const x6 Int)
(declare-const y6 Int)
(declare-const z6 Int)
(declare-const k6 Int)
(declare-const b1 Bool)
(declare-const b2 Bool)
(declare-const b3 Bool)
(declare-const b4 Bool)
 (push)
 (assert (> x 2))
 (assert (= x1 (+ x 1)))
 (assert (= x2 (+ x1 1)))
 (assert (= b1 (> x2 4)))
  (push)
  (assert b1)
  (check-sat)
  (assert (= x3 (- x2 1)))
  (assert (= x4 (+ x3 1)))
  (assert (= x5 (- x4 1)))
  (assert (= x6 (+ x5 1)))
  (assert (not (= x6 (+ x 2))))
  (check-sat)
  (pop)
  (push)
  (assert (not b1))
  (check-sat)
  (pop)
 (pop)
 (push)
 (assert (> y 2))
 (assert (= y1 (+ y 1)))
 (assert (= y2 (+ y1 1)))
 (assert (= b2 (> y2 4)))
  (push)
  (assert b2)
  (check-sat)
  (assert (= y3 (- y2 1)))
  (assert (= y4 (+ y3 1)))
  (assert (= y5 (- y4 1)))
  (assert (= y6 (+ y5 1)))
  (assert (not (= y6 (+ y 2))))
  (check-sat)
  (pop)
  (push)
  (assert (not b2))
  (check-sat)
  (pop)
 (pop)
 (push)
 (assert (> z 2))
 (assert (= z1 (+ z 1)))
 (assert (= z2 (+ z1 1)))
 (assert (= b3 (> z2 4)))
  (push)
  (assert b3)
  (check-sat)
  (assert (= z3 (- z2 1)))
  (assert (= z4 (+ z3 1)))
  (assert (= z5 (- z4 1)))
  (assert (= z6 (+ z5 1)))
  (assert (not (= z6 (+ z 2))))
  (check-sat)
  (pop)
  (push)
  (assert (not b3))
  (check-sat)
  (pop)
 (pop)
 (push)
 (assert (> k 2))
 (assert (= k1 (+ k 1)))
 (assert (= k2 (+ k1 1)))
 (assert (= b4 (> k2 4)))
  (push)
  (assert b4)
  (check-sat)
  (assert (= k3 (- k2 1)))
  (assert (= k4 (+ k3 1)))
  (assert (= k5 (- k4 1)))
  (assert (= k6 (+ k5 1)))
  (assert (not (= k6 (+ k 2))))
  (check-sat)
  (pop)
  (push)
  (assert (not b4))
  (check-sat)
  (pop)
 (pop)
(pop)
