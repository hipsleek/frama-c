data arrI {
  int val;
}.

pred arr_seg_bounded<i,n,m> == i=n & i>=0
  or x::arrI<m0>*self::arr_seg_bounded<i,n-1,m> & x=self+(n-1) & i>=0 & m0<=m
  inv n>=i & i>=0.

pred arr_seg<i,n> == i=n & i>=0
  or x::arrI<m0>*self::arr_seg<i,n-1> & x=self+(n-1) & i>=0 
  inv n>=i & i>=0.

checkentail x::arrI<m0> * base::arr_seg_bounded<i,n-1,m> 
  & x=base+(n-1) & i>=0 //& m0<=m
  |- base::arr_seg_bounded<i,n,m>.
expect Fail.

checkentail x::arrI<m0> * base::arr_seg_bounded<i,n-1,m> 
  & x=base+(n-1) & i>=0 & m0<=m
  |- base::arr_seg_bounded<i,n,m>.
expect Valid.

checkentail x::arrI<m0> * base::arr_seg_bounded<i,n-1,m> 
  & x=base+(n-1) & i>=0 & m0<=m
  |- base::arr_seg_bounded<i,n,m>.
expect Valid.


infer[@classic] base::arr_seg<i,n> * y::arrI<_>
  & i>=0 & y=base+n
  |- base::arr_seg<i,n+1>.
expect Valid.

infer[@classic] base::arr_seg<i,n> * y::arrI<_>
  & i>=0 & y=base+n
  |- base::arr_seg<i,n>.
expect Fail.

checkentail x::arrI<_> * base::arr_seg<i,n-1> * y::arrI<_>
  & x=base+(n-1) & i>=0 & y=base+n
  |- base::arr_seg<i,n>.
print residue.
expect Valid.
