data arrI {
  int val;
}.

pred arr_seg<i,n> == i=n & i>=0
  or x::arrI<_>*self::arr_seg<i+1,n> & x=self+i & i>=0
  inv n>=i & i>=0.


/*
lemma_unsafe self::arr_seg<i,n> & i<=m & m<=n 
   <-> self::arr_seg<i,m>*self::arr_seg<m,n>.
*/

checkentail base::arr_seg<mm,end> &
    start!=end & start+1>=end  & start<=end & Univ(mm)
       & mm=end-1 //& start+1=end
   |- r::arrI<_> & r=base+start &
  mm=end-1.
print residue.
expect Valid.


checkentail x::arrI<_>*base::arr_seg<mm+1,n> & x=base+mm & mm>=0 &
    //base::arr_seg<mm,end> &
    start!=end & start+1>=end  & start<=end & Univ(mm)
       //& mm=end-1 //& start+1=end
   |- r::arrI<_> & r=base+start & mm=end-1.
print residue.
expect Valid.

checkentail x=base+mm & mm>=0 & x=r & Univ(r) & mm=end-1 &
    start!=end & start+1>=end  & start<=end & Univ(mm)
   |- r=base+start //& mm=end-1
  .

checkentail x=base+mm & mm>=0 & x=r & Univ(r) & //mm=end-1 &
    start!=end & start+1>=end  & start<=end & Univ(mm)
   |-  mm=end-1
  .

/*
# ex6f1e.slk

@1! **context.ml#866:ante: Univ(mm) & start<=end & end<=(1+start) & start!=end & r=start+base & 
 x_64=mm+base
@1! **context.ml#867:rhs_pure: r=start+base & mm+1=end
@1! **context.ml#868:rhs(to prove): r=x_64

(connected_rhs univ_vars conseq0)

Check rhs for possible univ inst to add to LHS


*/
