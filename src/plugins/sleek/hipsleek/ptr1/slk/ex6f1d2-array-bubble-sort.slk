data arrI {
  int val;
}.

pred arr_seg<i,n> == i=n & i>=0
  or x::arrI<_>*self::arr_seg<i+1,n> & x=self+i & i>=0
  inv n>=i & i>=0.


lemma_unsafe self::arr_seg<i,n> & i<=m & m<=n 
   <-> self::arr_seg<i,m>*self::arr_seg<m,n>.

checkentail base::arr_seg<start,end> &
    start!=end & start+1>=end & start<=end
   |- base::arr_seg<start,mm> 
       // * r::arrI<_> & r=base+start 
       & mm=end-1.
print residue.
expect Valid.

checkentail base::arr_seg<start,end> &
    start!=end & start+1>=end & start<=end
   |- base::arr_seg<start,end-1> 
       .
print residue.
expect Valid.


checkentail base::arr_seg<start,end> &
    start!=end & start>=end-1 
   |- base::arr_seg<start,mm> & mm=end-1.
print residue.
expect Valid. 


infer[@classic] emp & start=end & start>=end-1 
   |- emp.
print residue.
expect Valid. 

infer[@classic] base::arr_seg<start,end> &
    start!=end & start>=(end-1) 
   |- base::arr_seg<start,mm> * r::arrI<_> & r=base+(end-1) & mm=end-1.
print residue.
expect Valid. 

infer[@classic] base::arr_seg<start,end> &
    start!=end & start>=(end-1) 
   |- base::arr_seg<start,end-1> * r::arrI<_> & r=base+(end-1).
print residue.
expect Valid. 

infer[] base::arr_seg<start,end> &
    start!=end & start>=(end-1) 
   |- (exists mm: base::arr_seg<start,mm> & mm=end-1).
print residue.
expect Valid. 

infer[] base::arr_seg<start,end> &
    start!=end & start>=(end-1) 
   |- base::arr_seg<start,mm> & mm=end-1.
print residue.
expect Valid. 


/*
# ex6f1d2.slk --pnum 2

checkentail base::arr_seg<start,end> &
    start!=end & start+1>=end & start<=end
   |- base::arr_seg<start,end-1> 
       .

# why isn't field=mm below?

!!! **solver.ml#11028:ext_subst:[(start_116,start),(flted_24_117,end)]
!!! **solver.ml#11024:univ_vs:[m_128,m_122,m_122]
!!! **solver.ml#11025:to_lhs: true
!!! **solver.ml#11026:to_rhs: true
!!! **solver.ml#11027:p_ante: true
!!! **solver.ml#11028:ext_subst:[(start_116,start)]

# Can we instantiate m_181+1=end (instead of mm+1=end)

Entail 2: Valid. 
Residue:
<1>base::arr_seg<m_187,end>@M&m_187=m_181 & start<=m_181 & m_181<=end & 
                               Univ(m_181) & start<=end & end<=(1+start) & 
                               start!=end&{FLOW,(20,21)=__norm#E}[]
[[ SEARCH ==>  (Lemma ==> lem_13_left(base,base)) ==>  COND ==>  Match(base,base)]]
Validate 2: OK
*/