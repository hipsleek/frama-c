
data arrI {
  int val;
}.

pred arr_seg<i,n> == i=n & i>=0
  or xxx::arrI<_>*self::arr_seg<i+1,n> & xxx=self+i & i>=0
  inv BG([(xxx,y)], xxx=self+i & y=self+n & n>=i & i>=0 ).
//  inv BG([(xxx,y)], xxx=self+i & y=self+n & n>=i & i>=0 & n>2).


// i,n-1  j,m-1

checkentail base::arr_seg<i,n> * base::arr_seg<j,m>
   |-  i=n.
print residue.
expect Fail.

checkentail base::arr_seg<i,n> * base::arr_seg<j,m>
   |-  false.
print residue.
expect Fail.


checkentail base::arr_seg<i,n> //* base::arr_seg<j,m>
   |-  i<n.
expect Fail.

checkentail base::arr_seg<i,n> //* base::arr_seg<j,m>
   |-  i<=n.
expect Valid.


checkentail base::arr_seg<i,n> * base::arr_seg<j,m>
   |-  i<=n.
expect Valid.


/*
# ex7a1b.slk -dre "ef_unsat\|.*enum\|get_spec_baga\|add_epure" 

chinwn@loris-60:~/hg/sl_def/ptr1$ ../sleek ex7a1b-arrseg-baga.slk | grep WARN
!!! **WARNING****astsimp.ml#2473:extr_exists_vars TBI
!!! **WARNING****astsimp.ml#2214:skip INV Check

# need fresh existential for one xxx

(==solver.ml#8925==)
imply_mix_formula#1@82
imply_mix_formula#1 inp1 : ((i=n & 0<=i) | 
  ((i+self)!=null & y_56=n+self & (1+i)<=n & xxx_55=1+i+self & 0<=(1+i) & 
   0<=i & xxx_55!=null))
imply_mix_formula#1 inp2 :Some( ((i=n & 0<=i) | 
  ((i+self)!=null & y_56=n+self & (1+i)<=n & xxx_55=1+i+self & 0<=(1+i) & 
   0<=i & xxx_55!=null)))
imply_mix_formula#1 inp3 : exists(y:exists(xxx:i+self=xxx & self<=xxx & xxx<=y) & n+self=y)
imply_mix_formula#1 inp4 : []
imply_mix_formula#1@82 EXIT:(true,Some(([ i=n & 0<=i, (i+self)!=null & y_56=n+self & (1+i)<=n & xxx_55=1+i+self & 0<=(1+i) & 
 0<=i & xxx_55!=null],[ i=n & 0<=i, (i+self)!=null & y_56=n+self & (1+i)<=n & xxx_55=1+i+self & 0<=(1+i) & 
 0<=i & xxx_55!=null])))




*/

