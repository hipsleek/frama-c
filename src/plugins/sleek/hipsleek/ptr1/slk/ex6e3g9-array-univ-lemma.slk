data node { int val ; node next }.
//relation Univ(int x).


pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.


checkentail x::lseg<a, p> & Univ(a) & a<=10  
    |- x::node<_,p>.
print residue.
expect Fail.

/*

pre: a=1

*/

checkentail i<m & m<=n & Univ(m) |- m=i+1.
print residue.

checkentail i<m & m<=n & Univ(m) |- m=i+2.
print residue.

slk_simplify true & exists(mm: i<mm & mm<=n & mm=i+2).
slk_simplify (exists mm: i<mm & mm<=n & mm=i+2).

/*
# ex6e3g9.slk

slk_simplify (exists mm: i<mm & mm<=n & mm=i+2).

# why is mm_91 not removed?

!!! **sleekengine.ml#1180:simplify:ante: emp&i<mm_91 & mm_91<=n & mm_91=2+i&{FLOW,(20,21)=__norm#E}[]
!!! **sleekengine.ml#1181:simplify:heap: emp
!!! **sleekengine.ml#1182:simplify:pure: i<mm_91 & mm_91<=n & mm_91=2+i
!!! **sleekengine.ml#1184:Andreea: heap need to be normalized before xpure_heap_sym
!!! **sleekengine.ml#1192:Andreea: gist need to detect true modulo variable renamingSimplify  (4): mm_91=i+2 & mm_91<=n
*/
