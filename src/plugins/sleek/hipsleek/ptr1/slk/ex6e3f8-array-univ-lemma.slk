data node { int val ; node next }.
//relation Univ(int x).

/*
pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.
*/

pred lseg<n, p> == case {
     n=0 -> [] self = p & n = 0;
//   n!=0 ->  [] self::node<next = r> * r::lseg<n - 1, p>; 
     n!=0 ->  [] self::node<next = r> * r::lseg<b,p> & b=n-1; 
     }
     inv n >= 0.

lemma_unsafe self::lseg<n, p> & n = a + b & a,b >=0 
   -> self::lseg<a, r> * r::lseg<b, p>.

checkentail x::lseg<10, p>  |- x::lseg<n1, r1>@L & n1>3.
print residue.
expect Valid.

checkentail x::lseg<10, p>  |- x::node<_,q1>@L*q1::node<_,q2>.
print residue.
expect Valid.


checkentail x::lseg<10, p>  |- x::node<_,q1>*q1::node<_,q2>@L.
print residue.
expect Valid.

checkentail x::lseg<10, p>  |- x::lseg<nn,q>*q::node<_,p>.
print residue.
expect Valid.


infer[] x::lseg<1, p>  |- x::node<_,p>.
print residue.
expect Valid.

checkentail x::lseg<a, p> & Univ(a) & a<=10  |- x::node<_,p>.
print residue.
expect Valid.

infer[a] x::lseg<a, p>  |- x::node<_,p>.
print residue.
expect Valid.

/*
# ex6e3f8.slk

infer[a] x::lseg<a, p>  |- x::node<_,p>.


---------------------------------


# Below is unsound ...

 <1>x::lseg<n1,r1>@M * r1::lseg<b_103,p>@M * x::lseg<flted_19_90,p>@M&flted_19_90=10 & 
        -                                                             b_103=7 & 
                                                                    n1=3 & 
                                                                    Univ(b_103) & 
                                                                    Univ(n1)&{FLOW,(20,21)=__norm#E}[]
[[ SEARCH ==>  (Lemma ==> lem_12(x,x)) ==>  Match(x,x)]]

*/