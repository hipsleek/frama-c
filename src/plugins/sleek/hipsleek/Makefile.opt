OCAMLC=ocamlopt.opt
OCAMLDEP=ocamldep
OCAMLDOC=ocamldoc

DIRS=.
INCLUDES=-I ./xml -I +ocamlgraph
#OCAMLFLAGS=-dtypes $(INCLUDES)    # add other options for ocamlc here
#OCAMLOPTFLAGS=-dtypes $(INCLUDES) # add other options for ocamlopt here
OCAMLFLAGS=$(INCLUDES) # add other options for ocamlc here
OCAMLOPTFLAGS=$(INCLUDES) -p # add other options for ocamlopt here
OCAMLYACC=ocamlyacc
OCAMLYACCFLAGS=-v
OCAMLLEX=ocamllex -q
BIN=../bin
DOC=../doc
DOC_SRC=*/*.ml */*.mli
DEP_DOT_FILE=$(DOC)/depend/dependencies.dot
DEP_PS_FILE=$(DOC)/depend/dependencies.ps
DEP_PDF_FILE=$(DOC)/depend/dependencies.pdf

all: hip.opt sleek.opt prover.opt

sparser.cmx sparser.ml: sparser.mly
	$(OCAMLYACC) $(OCAMLYACCFLAGS) sparser.mly
	rm sparser.mli
	$(OCAMLC) $(OCAMLFLAGS) -c sparser.ml

slexer.cmx slexer.ml: slexer.mll sparser.ml
	$(OCAMLLEX) slexer.mll
	$(OCAMLC) $(OCAMLFLAGS) -c slexer.ml

iparser.cmx iparser.ml: iparser.mly
	$(OCAMLYACC) $(OCAMLYACCFLAGS) iparser.mly
	rm iparser.mli
	$(OCAMLC) $(OCAMLFLAGS) -c iparser.ml

ilexer.cmx ilexer.ml: ilexer.mll iparser.ml
	$(OCAMLLEX) ilexer.mll
	$(OCAMLC) $(OCAMLFLAGS) -c ilexer.ml

ocparser.cmx ocparser.ml: ocparser.mly
	$(OCAMLYACC) $(OCAMLYACCFLAGS) ocparser.mly
	rm ocparser.mli
	$(OCAMLC) $(OCAMLFLAGS) -c ocparser.ml

oclexer.cmx oclexer.ml: oclexer.mll ocparser.ml
	$(OCAMLLEX) oclexer.mll
	$(OCAMLC) $(OCAMLFLAGS) -c oclexer.ml


MAIN_FILES=globals.cmx error.cmx util.cmx debug.cmx \
	net.cmx \
	cpure.cmx ipure.cmx \
	iformula.cmx iast.cmx \
	iparser.cmx ilexer.cmx \
	iprinter.cmx \
	cformula.cmx cast.cmx cprinter.cmx \
	ocparser.cmx oclexer.cmx unix_add.cmx isabelle.cmx coq.cmx mona.cmx omega.cmx setmona.cmx redlog.cmx \
	cvclite.cmx smtsolver.cmx tpdispatcher.cmx paralib1.cmx paralib1v2.cmx\
	prooftracer.cmx context.cmx solver.cmx \
	drawing.cmx \
	env.cmx checks.cmx inliner.cmx astsimp.cmx \
	typechecker.cmx \
	java.cmx cjava.cmx predcomp.cmx rtc.cmx \
	globalvars.cmx \
	main.cmx

MAIN_FILES_2=util.cmx debug.cmx globals.cmx \
	ipure.cmx iformula.cmx iast.cmx \
	iparser.cmx ilexer.cmx \
	iprinter.cmx

hip1: $(MAIN_FILES_2)
	$(OCAMLC) -o $@ $(OCAMLFLAGS) unix.cma str.cma graph.cma $(MAIN_FILES_2)

hip.opt: $(MAIN_FILES)
	$(OCAMLC) -o $@ $(OCAMLFLAGS) unix.cmxa str.cmxa graph.cmxa $(MAIN_FILES)

SLEEK_FILES=globals.cmx error.cmx util.cmx debug.cmx \
	cpure.cmx ipure.cmx \
	iformula.cmx iast.cmx \
	iparser.cmx ilexer.cmx \
	iprinter.cmx \
	cformula.cmx cast.cmx cprinter.cmx \
	ocparser.cmx oclexer.cmx unix_add.cmx isabelle.cmx coq.cmx omega.cmx mona.cmx setmona.cmx redlog.cmx \
    net.cmx \
	cvclite.cmx smtsolver.cmx tpdispatcher.cmx paralib1.cmx paralib1v2.cmx\
	prooftracer.cmx context.cmx solver.cmx \
	drawing.cmx \
	env.cmx checks.cmx \
	inliner.cmx \
	astsimp.cmx \
	java.cmx cjava.cmx predcomp.cmx rtc.cmx \
	typechecker.cmx \
	sleekcommons.cmx \
	sparser.cmx slexer.cmx \
	xmlfront.cmx nativefront.cmx \
	sleekengine.cmx \
	sleek.cmx

sleek.opt: $(SLEEK_FILES)
	$(OCAMLC) -o $@ $(OCAMLFLAGS) unix.cmxa str.cmxa graph.cmxa xml-light.cmxa $(SLEEK_FILES)


PROVE_FILES=globals.cmx error.cmx util.cmx debug.cmx \
	cpure.cmx ipure.cmx \
	iformula.cmx iast.cmx \
	iparser.cmx ilexer.cmx \
	iprinter.cmx \
	cformula.cmx cast.cmx cprinter.cmx \
	ocparser.cmx oclexer.cmx unix_add.cmx isabelle.cmx coq.cmx mona.cmx omega.cmx setmona.cmx redlog.cmx \
    net.cmx \
	cvclite.cmx smtsolver.cmx tpdispatcher.cmx paralib1.cmx paralib1v2.cmx\
	prooftracer.cmx context.cmx solver.cmx \
	drawing.cmx \
	env.cmx checks.cmx inliner.cmx astsimp.cmx \
	typechecker.cmx \
	java.cmx cjava.cmx predcomp.cmx rtc.cmx \
	prove.cmx

prover.opt: $(PROVE_FILES)
	$(OCAMLC) -o $@ $(OCAMLFLAGS) unix.cmxa str.cmxa graph.cmxa $(PROVE_FILES)
# ------------------------------------------------------------
# Common rules
# ------------------------------------------------------------
.SUFFIXES: .ml .mli .cmx .cmi .cmx .mly .mll

.ml.annot:
	$(OCAMLC) $(OCAMLFLAGS) -c  $<

.mli.cmi:
	$(OCAMLC) $(OCAMLFLAGS) -c  $<

.ml.cmx:
	$(OCAMLC) $(OCAMLOPTFLAGS) -c $<

# Clean up
clean: 
	rm ilexer.ml iparser.ml oclexer.ml ocparser.ml *.cmx *.cmi *.cmx *.o *.mli *.output ssc ss ss1 ss.exe *~ 

# Dependencies
beforedepend: ilexer.mli iparser.mli oclexer.ml ocparser.ml

depend: beforedepend
	(for d in $(DIRS); \
	do $(OCAMLDEP) $(INCLUDES) $$d/*.mli $$d/*.ml; \
	done) > .depend

-include .depend
# DO NOT DELETE
