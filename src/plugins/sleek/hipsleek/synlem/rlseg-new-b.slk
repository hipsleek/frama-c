data node {
	int val; 
	node next;	
}.


/*


pred rlseg<p:node> == self:node=p
  or self::rlseg<q> * q::node<_,p>.

lemma_safe "one" self::node<_,p1>*p1::rlseg<p> -> self::rlseg<p>.

A problem with the above definition is that it is
not inductive on data nodes.

I think predicate definitions should be in the following
form instead:

pred rlseg<p:node> == self:node=p
  or self::node<_,q> * q::rlseg<p> 

To get at the last node one should instead use:

# rlseg-new-b.slk

*/

pred rlseg<p:node> == self=p
  or self::node<_,q> * q::rlseg<p>.


lemma_safe "1" self::rlseg<p1>* p1::node<_,p> -> self::rlseg<p>.

