data node {
	int val; 
	node next;	
}.


pred rlseg<p:node> == 
     self=p
  or self::node<_,q> * q::rlseg<p>
.

/* 

# rlseg-new-b1.slk

Why failure? Why invalid lemma added..
 
Entailing lemma 2: Fail. (must) cause:residue is forbidden.(2)

Valid Lemmas : [2:==>] added to lemma store.

*/

lemma_unsafe "3" self::node<_,q>*q::rlseg<p> 
    <-> self::rlseg<p1>* p1::node<_,p>.


lemma_safe "2" self::rlseg<p> & self!=p 
    -> self::rlseg<p1>* p1::node<_,p>.


checkentail_exact self::rlseg<p> & self!=p 
    |- self::rlseg<p1>* p1::node<_,p>
.

// trivially valid

checkentail_exact 
   self!=p & self=p
   or self::node<_,q> * q::rlseg<p> & self!=p 
    |- self::rlseg<p1>* p1::node<_,p>
.


checkentail_exact 
   self::node<_,q> * q::rlseg<p> & self!=p 
    |- self::rlseg<p1>* p1::node<_,p>
.

/*
checkentail_exact self::rlseg<p> & self!=p 
    |- self::node<_,p> 
  or self::node<_,q> * q::rlseg<p1> *p1::node<_,p>.
//Entail 2: Fail.(must) cause:residue is forbidden.(2)

checkentail_exact 
     self=p & self!=p 
  or self::node<_,q> * q::rlseg<p> & self!=p 
    |- self::rlseg<p1>* p1::node<_,p>
.



checkentail self::rlseg<p> & self!=p 
    |- self::node<_,p1>*p1::rlseg<p>.

checkentail
  self::node<_,q> * q::rlseg<p> & self!=p 
    |- self::rlseg<p1>* p1::node<_,p>
.

print residue.


*/