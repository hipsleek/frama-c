data node {
	int val;
	node next;
}.

pred lseg2<p> == self=p
	or self::node<_, r> * r::lseg2<p>
	inv true.

pred ll_tail2<tx> == self::node<_, null> & tx=self
	or self::node<_, r> * r::ll_tail2<tx> & r!=null
	inv true.

//lemma_safe "lseg2" self::lseg2<p> <- self::lseg2<q>@D * q::lseg2<p>.
//lemma_safe "ll_tail2" self::ll_tail2<t> <-> self::lseg2<t> * t::node<_, null>.

HeapPred H(node a, node b).

//0.
//checkentail x::ll_tail2<tx>  |-  tx::node<_,_>.

//1.
checkentail x::ll_tail2<tx> & tx1=tx |-  tx1::node<_,_>.
