//Valid.Valid.Valid.Valid.Valid.Valid.Fail.Valid.Fail
data node { int val ; node next }.

pred ll_s<n> == self = null & n = 0
	or self::node<next = r> * r::ll_s<n - 1>
	inv n >= 0.

pred ll<> == self = null 
	or self::node<next = r> * r::ll<>
	inv true.

/*
lemma "V1" self::ll_s<n> -> self::ll<>.
*/

/*
lemma "V2" self::ll_s<n> <- self::ll<>.
*/

/*
lemma "V3" self::ll_s<n> <-> self::ll<>.
*/

/*
lemma "V4" self::ll<> -> (exists n: self::ll_s<n>).
*/

/*
lemma "V5" self::ll<> <- (exists n: self::ll_s<n>).
*/

/*
lemma "V6" self::ll<> <-> (exists n: self::ll_s<n>).
*/
/*
//Fail
lemma "F7" self::ll<> -> self::ll_s<n>.
*/

/*
lemma "V8" self::ll<> <- self::ll_s<n>.
*/

/*
 //Fail
lemma "F9" self::ll<> <-> self::ll_s<n>.
*/

///////////////////////////////////////

//V1. OK with --lem-en-syn
checkentail x::ll_s<n> |- x::ll<>.


//V2 OK with --lem-en-syn
checkentail x::ll<> |- x::ll_s<n>.


//V3a -> OK with --lem-en-syn
checkentail x::ll_s<n> |- x::ll<>.


//V3b <- OK with --lem-en-syn
checkentail x::ll<> |- x::ll_s<n>.


//V4 OK with --lem-en-syn
checkentail x::ll<> |- (exists n: x::ll_s<n>).


//V5 <- OK with --lem-en-syn
checkentail (exists n: self::ll_s<n>) |- self::ll<>.


//V6a -> OK with --lem-en-syn
checkentail self::ll<> |- (exists n: self::ll_s<n>).


//V6b <- OK with --lem-en-syn
checkentail (exists n: self::ll_s<n>) |- self::ll<>.


//V8 OK with --lem-en-syn
checkentail self::ll_s<n> |- self::ll<>.

