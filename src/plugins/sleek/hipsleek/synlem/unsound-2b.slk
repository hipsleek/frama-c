data node { int val ; node next }.


pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.

lemma_unsafe "V2" self::lseg<n, p> <- 
   self::lseg<a, r> * r::lseg<b, p> 
   & n = a + b 
   & a,b >=0 .


checkentail
  self::lseg<a, r> * r::lseg<b, p> 
 |- (exists k: self::lseg<k, p> & k=5) .
print residue.

checkentail
  self::lseg<a, r> * r::lseg<b, p> 
 |- self::lseg<5, p> .
print residue.

checkentail
  self::lseg<a, r> * r::lseg<b, p> 
 |-  self::lseg<k, p> & k=5.
print residue.

/*
# unsound-2b.slk

first two entailment is unsound. not handling
existential properly.


implicit instantiation seems to be OK
as seen for 3rd entailment.

checkentail
  self::lseg<a, r> * r::lseg<b, p> & a=4 & b=2
 |-  self::lseg<k, p> & k=5.
print residue.

*/


