data node {
  int val;
  node next;
}
.

pred ll<n> == emp & self=null & n=0
  or (exists v,q: self::node<v,q>*q::ll<n-1>)
  inv n>=0.

infer[xxxx] xxxx=null |- xxxx::node<_,q>.
print residue.

/*
# bugs-ex11a.slk

HeapPred H(node n).

//infer[x] x=null |- x::node<_,q>.

infer[H] H(x) & x=null |- x::node<_,q>.
print residue.

Residue:
 <1>hfalse&false&{FLOW,(4,5)=__norm#E}[]

Why isn't x!=null attached here as inferred pre
Did we lose it below?

early_hp_contra_detection#1@6@5
early_hp_contra_detection#1 inp1 : emp&xxxx=null&{FLOW,(4,5)=__norm#E}[]
  es_heap:emp
  es_infer_vars: [xxxx]
early_hp_contra_detection#1 inp2 : xxxx::node<Anon_12,q>&{FLOW,(4,5)=__norm#E}[]
early_hp_contra_detection#1@6 EXIT:CONTRADICTION DETECTEDREAL_CONTRA
 es = Some( es_formula: hfalse&false&{FLOW,(4,5)=__norm#E}[]
 es_orig_ante: Some(emp&xxxx=null&{FLOW,(4,5)=__norm#E}[])
 es_infer_vars: [xxxx]
 es_infer_vars_rel: [])

early_hp_contra_detection_add_to_list_context#1@5
early_hp_contra_detection_add_to_list_context#1 inp1 : emp&xxxx=null&{FLOW,(4,5)=__norm#E}[]
  es_heap:emp
  es_infer_vars: [xxxx]
early_hp_contra_detection_add_to_list_context#1 inp2 : xxxx::node<Anon_12,q>&{FLOW,(4,5)=__norm#E}[]
early_hp_contra_detection_add_to_list_context#1@5 EXIT:(real_c:false,true,Some( 
Good Context: length= 1 [es_formula: hfalse&false&{FLOW,(4,5)=__norm#E}[]
                         es_orig_ante: Some(emp&xxxx=null&
                                        {FLOW,(4,5)=__norm#E}[])
                         es_infer_vars: [xxxx]
                         es_infer_vars_rel: []] <1>hfalse&false&{FLOW,(4,5)=__norm#E}[]
[[empty]]


*/