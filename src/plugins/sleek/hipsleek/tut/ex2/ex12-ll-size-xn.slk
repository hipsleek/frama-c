data node {
  int val;
  node next;
}.

pred ll<n> == emp & self=null & n=0
  or (exists v,q: self::node<v,q>*q::ll<n-1>)
  inv n>=0.



//(1)
infer[n] x::ll<n> |- x=null.
print residue.
// n=0

//(2)
infer[n] x::ll<n> |- x!=null.
print residue.
// n>=1

slk_simplify ((x:node)=null | (x!=null & n<=0)) & (x=null & n=0 | x!=null & n>0).

slk_simplify ((x:node)!=null | (x=null & n!=0)) & (x=null & n=0 | x!=null & n>0).

/*

Can below be simplified?

Entail (1) : Valid. 

Residue:
 <1>x::ll{}<n>&(x=null | (n<=0 & x!=null))&{FLOW,(4,5)=__norm#E}[]
 inferred pure: [(x=null | (x!=null & n<=0))]


Entail (2) : Valid. 

Residue:
 <1>x::ll{}<n>&(x!=null | (x=null & n!=0))&{FLOW,(4,5)=__norm#E}[]
 inferred pure: [(x!=null | (n!=0 & x=null))]

*/
