data node {
  int val;
  node next;
}.

pred ll<n> == emp & self=null & n=0
  or (exists v,q: self::node<v,q>*q::ll<n-1>)
  inv n>=0.

//(1)
checkentail x=null |- x::ll<n>.
print residue.

//(2)
checkentail x=null |- (exists n: x::ll<n>).
print residue.

//(3)
checkentail x=null |- x::ll<_>.
print residue.
// Anon vars can be ignored.

//(4)
checkentail x::node<_,q>*q::node<_,q2>*q2::node<_,null> 
     |- x::ll<n>.
print residue.
// n=3

//(5)
checkentail x::node<_,q>*q::node<_,q2>*q2::node<_,null> |- x::ll<n> & n>2.
// will this hold?

//(6)
checkentail x::node<_,q>*q::node<_,q2>*q2::node<_,null> |- x::ll<n> & n>4.
// will this hold?

//(7)
checkentail x::node<_,q>*q::ll<m> |- x::ll<n>.
// what is the instantiation?
print residue.

//(8)
checkentail x::ll<n> |- x::node<a,b>.
// will this hold?

//(9)
checkentail x::ll<n> & n>4 |- x::node<a,b>.
print residue.
// will this hold? what is the residue?

//(10)
checkentail x::ll<n> |- n>=0.
// will this hold?

//(11)
checkentail x::ll<n> |- n<0.
// will this hold?

//(12)
checkentail x::ll<n> & x=null|- x=null.
// will this hold?

//(13)
checkentail x::ll<n> & n<1|- x=null.
// will this hold?

//(14)
checkentail x::ll<n> & n>1|- x=null.
// will this hold?

