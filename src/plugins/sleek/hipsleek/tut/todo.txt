# tut/zip.ss

How come fixcalc for P & Q not displayed?

Could we print the constraint abstraction generated 
and then the fixpoint derived, one by one?

*************************************
*******fixcalc of pure relation *******
*************************************
[( Q(a,b,n_1400), a=n_1400 & n_1400<=b, P(a,b), a<=b)]
*************************************

!!! REL POST :  Q(a,b,n_1400)
!!! POST:  a=n_1400 & n_1400<=b
!!! REL PRE :  P(a,b)
!!! PRE :  a<=b
====================================================================
# split-1.fc

post_1320:={[x] -> [res] -> []: 
   (((x=res && res<=0) 
   || (x=res && 2223<=res)) 
   || (( (exists (v_int_10_1344:(v_int_10_1344+1=x && post_1320(v_int_10_1344,res))))  && 1<=x) && x<=2222))
};
bottomupgen([post_1320], [2], SimHeur);

# post_1320:={ ... };
x >= res

bottomupgen([post_1320], [3], SimHeur);

# post_1320:={ ... };
((x >= 1 && 0 = res) || (res >= 2223 && res = x) || (0 >= res && res = x))
# Total CPU time: 0.040561 seconds

------------

Increasing the number of disjuncts will give better result but:

((x >= 1 && 0 = res) 
  || (res >= 2223 && res = x) 
  || (0 >= res && res= x))

is not as good as:

((res=0 && 1<=x && x<=2222) 
  || (x=res && 2223<=res) 
  || (x=res && res<=0))

We lack x<=2222. That's why we split at that point.

===============================================
--en-split-fixcalc

Given abstraction A:

post_1320:={[x] -> [res] -> []: 
   (((x=res && res<=0) 
   || (x=res && 2223<=res)) 
   || (( (exists (v_int_10_1344:(v_int_10_1344+1=x && post_1320(v_int_10_1344,res))))  && 1<=x) && x<=2222))
};

We have two base-cases
   (((x=res && res<=0) 
   || (x=res && 2223<=res)) 
and a recursive case:
   || (( (exists (v_int_10_1344:(v_int_10_1344+1=x && post_1320(v_int_10_1344,res))))  && 1<=x) && x<=2222))

To do fixcalc-spliiting, we need to check the constraint
from the recursive case, namely:
    && 1<=x && x<=2222

and determine if any base-case is contradicted by it.
We found x<=2222 to contradict with base-case:
   || (x=res && 2223<=res)) 

Hence, we due a split analysis on x<=2222 and x>2222. This is done
by adding this context to the abstraction A, as:

A & x<=2222

post_1320:={[x] -> [res] -> []: 
   (((x=res && res<=0 & x<=2222) 
   || (x=res && 2223<=res & x<=2222)) 
   || (( (exists (v_int_10_1344:(v_int_10_1344+1=x && post_1320(v_int_10_1344,res))))  && 1<=x) && x<=2222 & x<=2222))
};

This fix-point gives:
# ((x >= 1 && 0 = res) || (0 >= res && res = x))
# missing x>=2222


A & x>2222

post_1320:={[x] -> [res] -> []: 
   (((x=res && res<=0 & x>2222) 
   || (x=res && 2223<=res & x>2222)) 
   || (( (exists (v_int_10_1344:(v_int_10_1344+1=x && post_1320(v_int_10_1344,res))))  && 1<=x) && x<=2222 & x>2222))
};
This fix-point gives:
# (x >= 2223 && x = res)


If you use this approach, there will be no splitting for f91; but a 
sound splitting for the foo method.







We should only pick the constraints x>=1 and x<=2222 from the recursive
branch

====================================================================
# fixcalc split-1a.fc

Why did fixcalc below lose a x<=2222 constraint?

post:={[x] -> [res] -> []: 
  (((x=res && res<=0 && x<=2222) 
   || (x=res && 2223<=res && x<=2222)) 
   || (( (exists (v_int:(v_int+1=x && post(v_int,res))))  && 1<=x) && x<=2222))
};
bottomupgen([post], [2], SimHeur);
# ((x >= 1 && 0 = res) || (0 >= res && res = x))
# missing x>=2222

====================================================================
let str_get_next fixno = 
    let i = fixno # inf_and_get in
    
If we do a split at: 1<=x,

post:={[x] -> [res] -> []: 
   (((x=res && res<=0) 
   || (x=res && 2223<=res)) 
   || (( (exists (v_int:(v_int+1=x && post(v_int,res)  && 1<=x && x<=2222)
};
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
====================================================================
